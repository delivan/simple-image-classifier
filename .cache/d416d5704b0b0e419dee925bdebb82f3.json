{"dependencies":[{"name":"./three.min.js","dynamic":true},{"name":"./ar.js","dynamic":true}],"generated":{"html":"<!DOCTYPE html>\n<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\n<!-- three.js library -->\n<script src=\"/42e312a9e1619b3471aab5f2d9334f93.js\"></script>\n<!-- ar.js -->\n<script src=\"/947b37f866a694bf293291fc16cf65ab.js\"></script>\n\n<body style=\"margin : 0px; overflow: hidden; font-family: Monospace;\"><div style=\"position: absolute; top: 10px; width:100%; text-align: center; z-index: 1;\">\n\t<a href=\"https://github.com/jeromeetienne/AR.js/\" target=\"_blank\">AR.js</a> - three.js camera transform\n\t<br>\n\tContact me any time at <a href=\"https://twitter.com/jerome_etienne\" target=\"_blank\">@jerome_etienne</a>\n</div><script>\n\t//////////////////////////////////////////////////////////////////////////////////\n\t//\t\tInit\n\t//////////////////////////////////////////////////////////////////////////////////\n\t// init renderer\n\tvar renderer\t= new THREE.WebGLRenderer({\n\t\tantialias: true,\n\t\talpha: true\n\t});\n\trenderer.setClearColor(new THREE.Color('lightgrey'), 0)\n\trenderer.setSize( 640, 480 );\n\trenderer.domElement.style.position = 'absolute'\n\trenderer.domElement.style.top = '0px'\n\trenderer.domElement.style.left = '0px'\n\tdocument.body.appendChild( renderer.domElement );\n\t// array of functions for the rendering loop\n\tvar onRenderFcts= [];\n\t// init scene and camera\n\tvar scene\t= new THREE.Scene();\n\t\t\n\t//////////////////////////////////////////////////////////////////////////////////\n\t//\t\tInitialize a basic camera\n\t//////////////////////////////////////////////////////////////////////////////////\n\t// Create a camera\n\tvar camera = new THREE.Camera();\n\tscene.add(camera);\n\t////////////////////////////////////////////////////////////////////////////////\n\t//          handle arToolkitSource\n\t////////////////////////////////////////////////////////////////////////////////\n\tvar arToolkitSource = new THREEx.ArToolkitSource({\n\t\t// to read from the webcam \n\t\tsourceType : 'webcam',\n\t\t\n\t\t// // to read from an image\n\t\t// sourceType : 'image',\n\t\t// sourceUrl : THREEx.ArToolkitContext.baseURL + '../data/images/img.jpg',\t\t\n\t\t// to read from a video\n\t\t// sourceType : 'video',\n\t\t// sourceUrl : THREEx.ArToolkitContext.baseURL + '../data/videos/headtracking.mp4',\t\t\n\t})\n\tarToolkitSource.init(function onReady(){\n\t\tonResize()\n\t})\n\t\n\t// handle resize\n\twindow.addEventListener('resize', function(){\n\t\tonResize()\n\t})\n\tfunction onResize(){\n\t\tarToolkitSource.onResize()\t\n\t\tarToolkitSource.copySizeTo(renderer.domElement)\t\n\t\tif( arToolkitContext.arController !== null ){\n\t\t\tarToolkitSource.copySizeTo(arToolkitContext.arController.canvas)\t\n\t\t}\t\n\t}\n\t////////////////////////////////////////////////////////////////////////////////\n\t//          initialize arToolkitContext\n\t////////////////////////////////////////////////////////////////////////////////\n\t\n\t// create atToolkitContext\n\tvar arToolkitContext = new THREEx.ArToolkitContext({\n\t\tcameraParametersUrl: './camera_para.dat',\n\t\tdetectionMode: 'mono',\n\t})\n\t// initialize it\n\tarToolkitContext.init(function onCompleted(){\n\t\t// copy projection matrix to camera\n\t\tcamera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );\n\t})\n\t// update artoolkit on every frame\n\tonRenderFcts.push(function(){\n\t\tif( arToolkitSource.ready === false )\treturn\n\t\tarToolkitContext.update( arToolkitSource.domElement )\n\t\t\n\t\t// update scene.visible if the marker is seen\n\t\tscene.visible = camera.visible\n\t})\n\t\t\n\t////////////////////////////////////////////////////////////////////////////////\n\t//          Create a ArMarkerControls\n\t////////////////////////////////////////////////////////////////////////////////\n\t\n\t// init controls for camera\n\tvar markerControls = new THREEx.ArMarkerControls(arToolkitContext, camera, {\n\t\ttype : 'pattern',\n\t\tpatternUrl : './patt.hiro',\n\t\t// patternUrl : THREEx.ArToolkitContext.baseURL + '../data/data/patt.kanji',\n\t\t// as we controls the camera, set changeMatrixMode: 'cameraTransformMatrix'\n\t\tchangeMatrixMode: 'cameraTransformMatrix'\n\t})\n\t// as we do changeMatrixMode: 'cameraTransformMatrix', start with invisible scene\n\tscene.visible = false\n\t//////////////////////////////////////////////////////////////////////////////////\n\t//\t\tadd an object in the scene\n\t//////////////////////////////////////////////////////////////////////////////////\n\t// add a torus knot\t\n\tvar geometry\t= new THREE.CubeGeometry(1,1,1);\n\tvar material\t= new THREE.MeshNormalMaterial({\n\t\ttransparent : true,\n\t\topacity: 0.5,\n\t\tside: THREE.DoubleSide\n\t}); \n\tvar mesh\t= new THREE.Mesh( geometry, material );\n\tmesh.position.y\t= geometry.parameters.height/2\n\tscene.add( mesh );\n\t\n\tvar geometry\t= new THREE.TorusKnotGeometry(0.3,0.1,64,16);\n\tvar material\t= new THREE.MeshNormalMaterial(); \n\tvar mesh\t= new THREE.Mesh( geometry, material );\n\tmesh.position.y\t= 0.5\n\tscene.add( mesh );\n\t\n\tonRenderFcts.push(function(delta){\n\t\tmesh.rotation.x += Math.PI*delta\n\t})\n\t//////////////////////////////////////////////////////////////////////////////////\n\t//\t\trender the whole thing on the page\n\t//////////////////////////////////////////////////////////////////////////////////\n\t// render the scene\n\tonRenderFcts.push(function(){\n\t\trenderer.render( scene, camera );\n\t})\n\t// run the rendering loop\n\tvar lastTimeMsec= null\n\trequestAnimationFrame(function animate(nowMsec){\n\t\t// keep looping\n\t\trequestAnimationFrame( animate );\n\t\t// measure time\n\t\tlastTimeMsec\t= lastTimeMsec || nowMsec-1000/60\n\t\tvar deltaMsec\t= Math.min(200, nowMsec - lastTimeMsec)\n\t\tlastTimeMsec\t= nowMsec\n\t\t// call each update function\n\t\tonRenderFcts.forEach(function(onRenderFct){\n\t\t\tonRenderFct(deltaMsec/1000, nowMsec/1000)\n\t\t})\n\t})\n</script></body>"},"hash":"1621d53aef5e436f5486100ddc8f4c73","cacheData":{}}