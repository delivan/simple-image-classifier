{"code":"import * as erf_util from '../../ops/erf_util';\r\nimport * as selu_util from '../../ops/selu_util';\r\nvar UnaryOpProgram = (function () {\r\n    function UnaryOpProgram(aShape, opSnippet) {\r\n        this.variableNames = ['A'];\r\n        this.outputShape = aShape;\r\n        this.userCode = \"\\n      float unaryOperation(float x) {\\n        \" + opSnippet + \"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \";\r\n    }\r\n    return UnaryOpProgram;\r\n}());\r\nexport { UnaryOpProgram };\r\nvar CHECK_NAN_SNIPPET = \"if (isNaN(x)) return x;\";\r\nexport var ABS = \"return abs(x);\";\r\nexport var RELU = CHECK_NAN_SNIPPET + \"\\n  return (x < 0.0) ? 0.0 : x;\\n\";\r\nexport var ELU = \"return (x >= 0.0) ? x : (exp(x) - 1.0);\";\r\nexport var SELU = \"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \" + selu_util.SELU_SCALEALPHA + \";\\n  float scale = \" + selu_util.SELU_SCALE + \";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\";\r\nexport function STEP(alpha) {\r\n    if (alpha === void 0) { alpha = 0.0; }\r\n    return CHECK_NAN_SNIPPET + (\"\\n    return x > 0.0 ? 1.0 : float(\" + alpha + \");\\n  \");\r\n}\r\nexport var NEG = \"return -x;\";\r\nexport var CEIL = \"return ceil(x);\";\r\nexport var FLOOR = \"return floor(x);\";\r\nexport var SIGN = \"\\n  if (isNaN(x)) { return 0.0; }\\n  return sign(x);\\n\";\r\nexport var ROUND = \"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\";\r\nexport var EXP = \"return exp(x);\";\r\nexport var EXPM1 = \"return exp(x) - 1.0;\";\r\nexport var LOG = \"return log(x);\";\r\nexport var LOG1P = \"return log(1.0 + x);\";\r\nexport var SQRT = \"return sqrt(x);\";\r\nexport var RSQRT = \"return inversesqrt(x);\";\r\nexport var SIGMOID = \"return 1.0 / (1.0 + exp(-1.0 * x));\";\r\nexport var SOFTPLUS = \"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\";\r\nexport var SIN = \"return sin(x);\";\r\nexport var COS = \"return cos(x);\";\r\nexport var TAN = \"return tan(x);\";\r\nexport var ASIN = \"return asin(x);\";\r\nexport var ACOS = \"return acos(x);\";\r\nexport var ATAN = CHECK_NAN_SNIPPET + \"\\n  return atan(x);\\n\";\r\nexport var SINH = \"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\";\r\nexport var COSH = \"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\";\r\nexport var TANH = \"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\";\r\nexport var ASINH = \"return log(x + sqrt(x * x + 1.0));\";\r\nexport var ACOSH = \"return log(x + sqrt(x * x - 1.0));\";\r\nexport var ATANH = \"return (log(1.0 + x) - log(1.0 - x)) / 2.0;\";\r\nexport var ERF = \"\\n  // Error function is calculated approximately with elementary function.\\n  // See \\\"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\\\", Abramowitz and Stegun.\\n  float p = \" + erf_util.ERF_P + \";\\n  float a1 = \" + erf_util.ERF_A1 + \";\\n  float a2 = \" + erf_util.ERF_A2 + \";\\n  float a3 = \" + erf_util.ERF_A3 + \";\\n  float a4 = \" + erf_util.ERF_A4 + \";\\n  float a5 = \" + erf_util.ERF_A5 + \";\\n\\n  float t = 1.0 / (1.0 + p * x);\\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\\n\";\r\nexport var SQUARE = \"return x * x;\";\r\nexport var RECIPROCAL = \"return 1.0 / x;\";\r\nexport var LOGICAL_NOT = \"return float(!(x >= 1.0));\";\r\nexport var TO_INT = \"return float(int(x));\";\r\n//# sourceMappingURL=unaryop_gpu.js.map","map":"{\"version\":3,\"file\":\"unaryop_gpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/unaryop_gpu.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/unaryop_gpu.d.ts","text":"import { GPGPUProgram } from './gpgpu_math';\r\nexport declare class UnaryOpProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    userCode: string;\r\n    outputShape: number[];\r\n    constructor(aShape: number[], opSnippet: string);\r\n}\r\nexport declare const ABS = \"return abs(x);\";\r\nexport declare const RELU: string;\r\nexport declare const ELU = \"return (x >= 0.0) ? x : (exp(x) - 1.0);\";\r\nexport declare const SELU: string;\r\nexport declare function STEP(alpha?: number): string;\r\nexport declare const NEG = \"return -x;\";\r\nexport declare const CEIL = \"return ceil(x);\";\r\nexport declare const FLOOR = \"return floor(x);\";\r\nexport declare const SIGN = \"\\n  if (isNaN(x)) { return 0.0; }\\n  return sign(x);\\n\";\r\nexport declare const ROUND = \"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\";\r\nexport declare const EXP = \"return exp(x);\";\r\nexport declare const EXPM1 = \"return exp(x) - 1.0;\";\r\nexport declare const LOG = \"return log(x);\";\r\nexport declare const LOG1P = \"return log(1.0 + x);\";\r\nexport declare const SQRT = \"return sqrt(x);\";\r\nexport declare const RSQRT = \"return inversesqrt(x);\";\r\nexport declare const SIGMOID = \"return 1.0 / (1.0 + exp(-1.0 * x));\";\r\nexport declare const SOFTPLUS = \"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\";\r\nexport declare const SIN = \"return sin(x);\";\r\nexport declare const COS = \"return cos(x);\";\r\nexport declare const TAN = \"return tan(x);\";\r\nexport declare const ASIN = \"return asin(x);\";\r\nexport declare const ACOS = \"return acos(x);\";\r\nexport declare const ATAN: string;\r\nexport declare const SINH = \"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\";\r\nexport declare const COSH = \"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\";\r\nexport declare const TANH = \"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\";\r\nexport declare const ASINH = \"return log(x + sqrt(x * x + 1.0));\";\r\nexport declare const ACOSH = \"return log(x + sqrt(x * x - 1.0));\";\r\nexport declare const ATANH = \"return (log(1.0 + x) - log(1.0 - x)) / 2.0;\";\r\nexport declare const ERF: string;\r\nexport declare const SQUARE = \"return x * x;\";\r\nexport declare const RECIPROCAL = \"return 1.0 / x;\";\r\nexport declare const LOGICAL_NOT = \"return float(!(x >= 1.0));\";\r\nexport declare const TO_INT = \"return float(int(x));\";\r\n"}}
