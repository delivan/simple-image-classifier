{"code":"var Conv2DDerFilterProgram = (function () {\r\n    function Conv2DDerFilterProgram(convInfo) {\r\n        this.variableNames = ['x', 'dy'];\r\n        this.outputShape = convInfo.filterShape;\r\n        var strideHeight = convInfo.strideHeight;\r\n        var strideWidth = convInfo.strideWidth;\r\n        var padTop = convInfo.padInfo.top;\r\n        var padLeft = convInfo.padInfo.left;\r\n        this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int d2 = coords.w;\\n\\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \" + convInfo.batchSize + \"; b++) {\\n          for (int yR = 0; yR < \" + convInfo.outHeight + \"; yR++) {\\n            int xR = wR + yR * \" + strideHeight + \" - \" + padTop + \";\\n\\n            if (xR < 0 || xR >= \" + convInfo.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \" + convInfo.outWidth + \"; yC++) {\\n              int xC = wC + yC * \" + strideWidth + \" - \" + padLeft + \";\\n\\n              if (xC < 0 || xC >= \" + convInfo.inWidth + \") {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\r\n    }\r\n    return Conv2DDerFilterProgram;\r\n}());\r\nexport { Conv2DDerFilterProgram };\r\nvar Conv2DDerInputProgram = (function () {\r\n    function Conv2DDerInputProgram(convInfo) {\r\n        this.variableNames = ['dy', 'W'];\r\n        this.outputShape = convInfo.inShape;\r\n        var filterHeight = convInfo.filterHeight;\r\n        var filterWidth = convInfo.filterWidth;\r\n        var strideHeight = convInfo.strideHeight;\r\n        var strideWidth = convInfo.strideWidth;\r\n        var padTop = filterHeight - 1 - convInfo.padInfo.top;\r\n        var padLeft = filterWidth - 1 - convInfo.padInfo.left;\r\n        this.userCode = \"\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + filterHeight + \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \" + strideHeight + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + convInfo.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \" + filterHeight + \" - 1 - wR;\\n\\n          for (int wC = 0; wC < \" + filterWidth + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + strideWidth + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + convInfo.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \" + filterWidth + \" - 1 - wC;\\n\\n            for (int d2 = 0; d2 < \" + convInfo.outChannels + \"; d2++) {\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\r\n    }\r\n    return Conv2DDerInputProgram;\r\n}());\r\nexport { Conv2DDerInputProgram };\r\n//# sourceMappingURL=conv_backprop_gpu.js.map","map":"{\"version\":3,\"file\":\"conv_backprop_gpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/conv_backprop_gpu.ts\"],\"names\":[],\"mappings\":\"AAoBA;IAKE,gCAAY,QAAoB;QAJhC,kBAAa,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAK1B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QAExC,IAAM,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;QAC3C,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACzC,IAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC;QACpC,IAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;QAEtC,IAAI,CAAC,QAAQ,GAAG,yYAYU,QAAQ,CAAC,SAAS,kDACd,QAAQ,CAAC,SAAS,kDACnB,YAAY,WAAM,MAAM,6CAEvB,QAAQ,CAAC,QAAQ,yFAIf,QAAQ,CAAC,QAAQ,oDAClB,WAAW,WAAM,OAAO,+CAEvB,QAAQ,CAAC,OAAO,+RAY/C,CAAC;IACJ,CAAC;IACH,6BAAC;AAAD,CAAC,AAlDD,IAkDC;;AAED;IAKE,+BAAY,QAAoB;QAJhC,kBAAa,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAK1B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC;QAEpC,IAAM,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;QAC3C,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACzC,IAAM,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;QAC3C,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QAEzC,IAAM,MAAM,GAAG,YAAY,GAAG,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC;QACvD,IAAM,OAAO,GAAG,WAAW,GAAG,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;QAExD,IAAI,CAAC,QAAQ,GAAG,sCACa,MAAM,UAAK,OAAO,ydAcnB,YAAY,iEACI,YAAY,iDAExB,QAAQ,CAAC,SAAS,gIAK7B,YAAY,sDAEH,WAAW,mEACK,WAAW,mDAEvB,QAAQ,CAAC,QAAQ,yJAM5B,WAAW,wDAEF,QAAQ,CAAC,WAAW,oQASnD,CAAC;IACJ,CAAC;IACH,4BAAC;AAAD,CAAC,AA/DD,IA+DC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/conv_backprop_gpu.d.ts","text":"import { Conv2DInfo } from '../../ops/conv_util';\r\nimport { GPGPUProgram } from './gpgpu_math';\r\nexport declare class Conv2DDerFilterProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    outputShape: number[];\r\n    userCode: string;\r\n    constructor(convInfo: Conv2DInfo);\r\n}\r\nexport declare class Conv2DDerInputProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    outputShape: number[];\r\n    userCode: string;\r\n    constructor(convInfo: Conv2DInfo);\r\n}\r\n"}}
