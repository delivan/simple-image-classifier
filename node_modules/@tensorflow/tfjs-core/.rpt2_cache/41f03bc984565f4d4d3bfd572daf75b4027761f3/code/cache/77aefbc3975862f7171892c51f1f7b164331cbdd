{"code":"import * as tslib_1 from \"tslib\";\r\nimport { doc } from '../doc';\r\nimport { Tracking } from '../tracking';\r\nimport { assert } from '../util';\r\nimport { operation } from './operation';\r\nimport { norm, split, squeeze, stack, sum } from './ops';\r\nvar LinalgOps = (function () {\r\n    function LinalgOps() {\r\n    }\r\n    LinalgOps.gramSchmidt = function (xs) {\r\n        var inputIsTensor2D;\r\n        if (Array.isArray(xs)) {\r\n            inputIsTensor2D = false;\r\n            assert(xs != null && xs.length > 0, 'Gram-Schmidt process: input must not be null, undefined, or empty');\r\n            var dim = xs[0].shape[0];\r\n            for (var i = 1; i < xs.length; ++i) {\r\n                assert(xs[i].shape[0] === dim, 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\r\n                    (\"(\" + xs[i].shape[0] + \" vs. \" + dim + \")\"));\r\n            }\r\n        }\r\n        else {\r\n            inputIsTensor2D = true;\r\n            xs = split(xs, xs.shape[0], 0).map(function (x) { return squeeze(x, [0]); });\r\n        }\r\n        assert(xs.length <= xs[0].shape[0], \"Gram-Schmidt: Number of vectors (\" + xs.length + \") exceeds \" +\r\n            (\"number of dimensions (\" + xs[0].shape[0] + \").\"));\r\n        var ys = [];\r\n        var xs1d = xs;\r\n        var _loop_1 = function (i) {\r\n            ys.push(Tracking.tidy(function () {\r\n                var x = xs1d[i];\r\n                if (i > 0) {\r\n                    for (var j = 0; j < i; ++j) {\r\n                        var proj = sum(ys[j].mulStrict(x)).mul(ys[j]);\r\n                        x = x.sub(proj);\r\n                    }\r\n                }\r\n                return x.div(norm(x, 'euclidean'));\r\n            }));\r\n        };\r\n        for (var i = 0; i < xs.length; ++i) {\r\n            _loop_1(i);\r\n        }\r\n        if (inputIsTensor2D) {\r\n            return stack(ys, 0);\r\n        }\r\n        else {\r\n            return ys;\r\n        }\r\n    };\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Operations', subheading: 'Linear Algebra' }),\r\n        operation\r\n    ], LinalgOps, \"gramSchmidt\", null);\r\n    return LinalgOps;\r\n}());\r\nexport { LinalgOps };\r\n//# sourceMappingURL=linalg_ops.js.map","map":"{\"version\":3,\"file\":\"linalg_ops.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/ops/linalg_ops.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/ops/linalg_ops.d.ts","text":"import { Tensor1D, Tensor2D } from '../tensor';\r\nexport declare class LinalgOps {\r\n    static gramSchmidt(xs: Tensor1D[] | Tensor2D): Tensor1D[] | Tensor2D;\r\n}\r\n"}}
