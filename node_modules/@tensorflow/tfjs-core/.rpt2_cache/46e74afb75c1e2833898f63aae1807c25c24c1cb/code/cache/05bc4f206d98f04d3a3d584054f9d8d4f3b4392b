{"code":"import * as tslib_1 from \"tslib\";\r\nimport { ENV } from '../environment';\r\nimport { keep, tidy } from '../globals';\r\nimport { scalar } from '../ops/ops';\r\nimport { SerializationMap } from '../serialization';\r\nimport { Optimizer } from './optimizer';\r\nvar SGDOptimizer = (function (_super) {\r\n    tslib_1.__extends(SGDOptimizer, _super);\r\n    function SGDOptimizer(learningRate) {\r\n        var _this = _super.call(this) || this;\r\n        _this.learningRate = learningRate;\r\n        _this.setLearningRate(learningRate);\r\n        return _this;\r\n    }\r\n    SGDOptimizer.prototype.applyGradients = function (variableGradients) {\r\n        var _this = this;\r\n        var varNames = Object.keys(variableGradients);\r\n        varNames.forEach(function (varName) {\r\n            var gradient = variableGradients[varName];\r\n            var value = ENV.engine.registeredVariables[varName];\r\n            tidy(function () {\r\n                var newValue = _this.c.mul(gradient).add(value);\r\n                value.assign(newValue);\r\n            });\r\n        });\r\n    };\r\n    SGDOptimizer.prototype.setLearningRate = function (learningRate) {\r\n        this.learningRate = learningRate;\r\n        if (this.c != null) {\r\n            this.c.dispose();\r\n        }\r\n        this.c = keep(scalar(-learningRate));\r\n    };\r\n    SGDOptimizer.prototype.dispose = function () {\r\n        this.c.dispose();\r\n    };\r\n    SGDOptimizer.prototype.getConfig = function () {\r\n        return { learningRate: this.learningRate };\r\n    };\r\n    SGDOptimizer.fromConfig = function (cls, config) {\r\n        return new cls(config.learningRate);\r\n    };\r\n    SGDOptimizer.className = 'SGDOptimizer';\r\n    return SGDOptimizer;\r\n}(Optimizer));\r\nexport { SGDOptimizer };\r\nSerializationMap.register(SGDOptimizer);\r\n//# sourceMappingURL=sgd_optimizer.js.map","map":"{\"version\":3,\"file\":\"sgd_optimizer.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/optimizers/sgd_optimizer.ts\"],\"names\":[],\"mappings\":\";AAiBA,OAAO,EAAC,GAAG,EAAC,MAAM,gBAAgB,CAAC;AACnC,OAAO,EAAC,IAAI,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AACtC,OAAO,EAAC,MAAM,EAAC,MAAM,YAAY,CAAC;AAElC,OAAO,EAAoD,gBAAgB,EAAC,MAAM,kBAAkB,CAAC;AAIrG,OAAO,EAAC,SAAS,EAAC,MAAM,aAAa,CAAC;AAGtC;IAAkC,wCAAS;IAIzC,sBAAsB,YAAoB;QAA1C,YACE,iBAAO,SAER;QAHqB,kBAAY,GAAZ,YAAY,CAAQ;QAExC,KAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;;IACrC,CAAC;IAED,qCAAc,GAAd,UAAe,iBAAiC;QAAhD,iBAWC;QAVC,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAChD,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;YACtB,IAAM,QAAQ,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAC5C,IAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAEtD,IAAI,CAAC;gBACH,IAAM,QAAQ,GAAG,KAAI,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACjD,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAKD,sCAAe,GAAf,UAAgB,YAAoB;QAClC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;QACD,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,8BAAO,GAAP;QACE,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAED,gCAAS,GAAT;QACE,MAAM,CAAC,EAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAC,CAAC;IAC3C,CAAC;IACM,uBAAU,GAAjB,UACI,GAA+B,EAAE,MAAkB;QACrD,MAAM,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC;IA1CM,sBAAS,GAAG,cAAc,CAAC;IA2CpC,mBAAC;CAAA,AA5CD,CAAkC,SAAS,GA4C1C;SA5CY,YAAY;AA6CzB,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/optimizers/sgd_optimizer.d.ts","text":"import { ConfigDict, Serializable, SerializableConstructor } from '../serialization';\r\nimport { Scalar } from '../tensor';\r\nimport { NamedTensorMap } from '../types';\r\nimport { Optimizer } from './optimizer';\r\nexport declare class SGDOptimizer extends Optimizer {\r\n    protected learningRate: number;\r\n    static className: string;\r\n    protected c: Scalar;\r\n    constructor(learningRate: number);\r\n    applyGradients(variableGradients: NamedTensorMap): void;\r\n    setLearningRate(learningRate: number): void;\r\n    dispose(): void;\r\n    getConfig(): ConfigDict;\r\n    static fromConfig<T extends Serializable>(cls: SerializableConstructor<T>, config: ConfigDict): T;\r\n}\r\n"}}
