{"code":"import { getCoordsDataType } from './shader_compiler';\r\nvar PadProgram = (function () {\r\n    function PadProgram(xShape, paddings, constantValue) {\r\n        this.variableNames = ['x'];\r\n        this.outputShape = paddings.map(function (p, i) { return p[0] + xShape[i] + p[1]; });\r\n        var rank = xShape.length;\r\n        var type = getCoordsDataType(rank);\r\n        var start = paddings.map(function (p) { return p[0]; }).join(',');\r\n        var end = paddings.map(function (p, i) { return p[0] + xShape[i]; }).join(',');\r\n        var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\r\n        if (rank === 1) {\r\n            this.userCode = \"\\n        int start = \" + start + \";\\n        int end = \" + end + \";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(float(\" + constantValue + \"));\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \";\r\n            return;\r\n        }\r\n        this.userCode = \"\\n      \" + type + \" start = \" + type + \"(\" + start + \");\\n      \" + type + \" end = \" + type + \"(\" + end + \");\\n\\n      void main() {\\n        \" + type + \" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(float(\" + constantValue + \"));\\n        } else {\\n          \" + type + \" coords = outC - start;\\n          setOutput(getX(\" + unpackedCoords + \"));\\n        }\\n      }\\n    \";\r\n    }\r\n    return PadProgram;\r\n}());\r\nexport { PadProgram };\r\n//# sourceMappingURL=pad_gpu.js.map","map":"{\"version\":3,\"file\":\"pad_gpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/pad_gpu.ts\"],\"names\":[],\"mappings\":\"AAkBA,OAAO,EAAC,iBAAiB,EAAC,MAAM,mBAAmB,CAAC;AAEpD;IAKE,oBACI,MAAgB,EAAE,QAAiC,EACnD,aAAqB;QANzB,kBAAa,GAAG,CAAC,GAAG,CAAC,CAAC;QAOpB,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,GAAG,CAC3B,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,CAAC,GAAmB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAvC,CAAuC,CAAgB,CAAC;QACtE,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;QAC3B,IAAM,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAErC,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,CAAC,EAAJ,CAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChD,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/D,IAAM,cAAc,GAChB,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAExE,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,QAAQ,GAAG,2BACA,KAAK,6BACP,GAAG,uJAKO,aAAa,wGAKpC,CAAC;YACF,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,QAAQ,GAAG,aACZ,IAAI,iBAAY,IAAI,SAAI,KAAK,kBAC7B,IAAI,eAAU,IAAI,SAAI,GAAG,2CAGvB,IAAI,6IAEc,aAAa,yCAE7B,IAAI,0DACW,cAAc,kCAGpC,CAAC;IACJ,CAAC;IACH,iBAAC;AAAD,CAAC,AAjDD,IAiDC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/pad_gpu.d.ts","text":"import { GPGPUProgram } from './gpgpu_math';\r\nexport declare class PadProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    outputShape: number[];\r\n    userCode: string;\r\n    constructor(xShape: number[], paddings: Array<[number, number]>, constantValue: number);\r\n}\r\n"}}
