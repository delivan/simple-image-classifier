{"code":"import * as tslib_1 from \"tslib\";\r\nimport { doc } from '../doc';\r\nimport * as util from '../util';\r\nimport { operation } from './operation';\r\nvar LSTMOps = (function () {\r\n    function LSTMOps() {\r\n    }\r\n    LSTMOps.multiRNNCell = function (lstmCells, data, c, h) {\r\n        util.assertArgumentsAreTensors({ data: data, c: c, h: h }, 'multiRNNCell');\r\n        var input = data;\r\n        var newStates = [];\r\n        for (var i = 0; i < lstmCells.length; i++) {\r\n            var output = lstmCells[i](input, c[i], h[i]);\r\n            newStates.push(output[0]);\r\n            newStates.push(output[1]);\r\n            input = output[1];\r\n        }\r\n        var newC = [];\r\n        var newH = [];\r\n        for (var i = 0; i < newStates.length; i += 2) {\r\n            newC.push(newStates[i]);\r\n            newH.push(newStates[i + 1]);\r\n        }\r\n        return [newC, newH];\r\n    };\r\n    LSTMOps.basicLSTMCell = function (forgetBias, lstmKernel, lstmBias, data, c, h) {\r\n        util.assertArgumentsAreTensors({ forgetBias: forgetBias, lstmKernel: lstmKernel, lstmBias: lstmBias, data: data, c: c, h: h }, 'basicLSTMCell');\r\n        var combined = data.concat(h, 1);\r\n        var weighted = combined.matMul(lstmKernel);\r\n        var res = weighted.add(lstmBias);\r\n        var batchSize = res.shape[0];\r\n        var sliceCols = res.shape[1] / 4;\r\n        var sliceSize = [batchSize, sliceCols];\r\n        var i = res.slice([0, 0], sliceSize);\r\n        var j = res.slice([0, sliceCols], sliceSize);\r\n        var f = res.slice([0, sliceCols * 2], sliceSize);\r\n        var o = res.slice([0, sliceCols * 3], sliceSize);\r\n        var newC = i.sigmoid().mulStrict(j.tanh()).addStrict(c.mulStrict(forgetBias.add(f).sigmoid()));\r\n        var newH = newC.tanh().mulStrict(o.sigmoid());\r\n        return [newC, newH];\r\n    };\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Operations', subheading: 'RNN' }),\r\n        operation\r\n    ], LSTMOps, \"multiRNNCell\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Operations', subheading: 'RNN' }),\r\n        operation\r\n    ], LSTMOps, \"basicLSTMCell\", null);\r\n    return LSTMOps;\r\n}());\r\nexport { LSTMOps };\r\n//# sourceMappingURL=lstm.js.map","map":"{\"version\":3,\"file\":\"lstm.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/ops/lstm.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/ops/lstm.d.ts","text":"import { Scalar, Tensor1D, Tensor2D } from '../tensor';\r\nexport declare type LSTMCellFunc = {\r\n    (data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D];\r\n};\r\nexport declare class LSTMOps {\r\n    static multiRNNCell(lstmCells: LSTMCellFunc[], data: Tensor2D, c: Tensor2D[], h: Tensor2D[]): [Tensor2D[], Tensor2D[]];\r\n    static basicLSTMCell(forgetBias: Scalar, lstmKernel: Tensor2D, lstmBias: Tensor1D, data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D];\r\n}\r\n"}}
