{"code":"var MatMulProgram = (function () {\r\n    function MatMulProgram(aShape, bShape, transposeA, transposeB) {\r\n        if (transposeA === void 0) { transposeA = false; }\r\n        if (transposeB === void 0) { transposeB = false; }\r\n        this.variableNames = ['matrixA', 'matrixB'];\r\n        var outerShapeA = transposeA ? aShape[1] : aShape[0];\r\n        var outerShapeB = transposeB ? bShape[0] : bShape[1];\r\n        var sharedDim = transposeA ? aShape[0] : aShape[1];\r\n        this.outputShape = [outerShapeA, outerShapeB];\r\n        var aSnippetFromOffset = function (vec4Offset, indexVar) {\r\n            return transposeA ? indexVar + \" + \" + vec4Offset + \", aRow\" :\r\n                \"aRow, \" + indexVar + \" + \" + vec4Offset;\r\n        };\r\n        var bSnippetFromOffset = function (vec4Offset, indexVar) {\r\n            return transposeB ? \"bCol, \" + indexVar + \" + \" + vec4Offset :\r\n                indexVar + \" + \" + vec4Offset + \", bCol\";\r\n        };\r\n        var sharedDimNearestVec4 = Math.floor(sharedDim / 4) * 4;\r\n        var sharedDimVec4Remainder = sharedDim % 4;\r\n        this.userCode = \" float dotARowBCol(int aRow, int bCol) {\\n      float result = 0.0;\\n      for (int i = 0; i < \" + sharedDimNearestVec4 + \"; i += 4) {\\n        vec4 a = vec4(\\n          getMatrixA(\" + aSnippetFromOffset(0, 'i') + \"),\\n          getMatrixA(\" + aSnippetFromOffset(1, 'i') + \"),\\n          getMatrixA(\" + aSnippetFromOffset(2, 'i') + \"),\\n          getMatrixA(\" + aSnippetFromOffset(3, 'i') + \")\\n        );\\n        vec4 b = vec4(\\n          getMatrixB(\" + bSnippetFromOffset(0, 'i') + \"),\\n          getMatrixB(\" + bSnippetFromOffset(1, 'i') + \"),\\n          getMatrixB(\" + bSnippetFromOffset(2, 'i') + \"),\\n          getMatrixB(\" + bSnippetFromOffset(3, 'i') + \")\\n        );\\n\\n        result += dot(a, b);\\n      }\\n\\n      if (\" + (sharedDimVec4Remainder === 1) + \") {\\n        result += getMatrixA(\" + aSnippetFromOffset(0, sharedDimNearestVec4) + \") *\\n          getMatrixB(\" + bSnippetFromOffset(0, sharedDimNearestVec4) + \");\\n      } else if (\" + (sharedDimVec4Remainder === 2) + \") {\\n        vec2 a = vec2(\\n          getMatrixA(\" + aSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixA(\" + aSnippetFromOffset(1, sharedDimNearestVec4) + \")\\n        );\\n        vec2 b = vec2(\\n          getMatrixB(\" + bSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixB(\" + bSnippetFromOffset(1, sharedDimNearestVec4) + \")\\n        );\\n        result += dot(a, b);\\n      } else if (\" + (sharedDimVec4Remainder === 3) + \") {\\n        vec3 a = vec3(\\n          getMatrixA(\" + aSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixA(\" + aSnippetFromOffset(1, sharedDimNearestVec4) + \"),\\n          getMatrixA(\" + aSnippetFromOffset(2, sharedDimNearestVec4) + \")\\n        );\\n        vec3 b = vec3(\\n          getMatrixB(\" + bSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixB(\" + bSnippetFromOffset(1, sharedDimNearestVec4) + \"),\\n          getMatrixB(\" + bSnippetFromOffset(2, sharedDimNearestVec4) + \")\\n        );\\n        result += dot(a, b);\\n      }\\n\\n      return result;\\n    }\\n\\n    void main() {\\n      ivec2 resRC = getOutputCoords();\\n      setOutput(dotARowBCol(resRC.x, resRC.y));\\n    }\\n    \";\r\n    }\r\n    return MatMulProgram;\r\n}());\r\nexport { MatMulProgram };\r\n//# sourceMappingURL=mulmat_gpu.js.map","map":"{\"version\":3,\"file\":\"mulmat_gpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/mulmat_gpu.ts\"],\"names\":[],\"mappings\":\"AAmBA;IAKE,uBACI,MAAwB,EAAE,MAAwB,EAAE,UAAkB,EACtE,UAAkB;QADkC,2BAAA,EAAA,kBAAkB;QACtE,2BAAA,EAAA,kBAAkB;QANtB,kBAAa,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAOrC,IAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACvD,IAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACvD,IAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,WAAW,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAE9C,IAAM,kBAAkB,GAAG,UAAC,UAAkB,EAAE,QAAuB;YACnE,OAAA,UAAU,CAAC,CAAC,CAAI,QAAQ,WAAM,UAAU,WAAQ,CAAC,CAAC;gBACrC,WAAS,QAAQ,WAAM,UAAY;QADhD,CACgD,CAAC;QACrD,IAAM,kBAAkB,GAAG,UAAC,UAAkB,EAAE,QAAuB;YACnE,OAAA,UAAU,CAAC,CAAC,CAAC,WAAS,QAAQ,WAAM,UAAY,CAAC,CAAC;gBAClC,QAAQ,WAAM,UAAU,WAAQ;QADhD,CACgD,CAAC;QAErD,IAAM,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3D,IAAM,sBAAsB,GAAG,SAAS,GAAG,CAAC,CAAC;QAE7C,IAAI,CAAC,QAAQ,GAAG,oGAEQ,oBAAoB,kEAEzB,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,iCAC1B,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,iCAC1B,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,iCAC1B,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,oEAG1B,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,iCAC1B,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,iCAC1B,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,iCAC1B,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,6EAMrC,sBAAsB,KAAK,CAAC,2CACT,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,kCACnD,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,8BAC/C,sBAAsB,KAAK,CAAC,2DAExB,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,iCAC3C,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,oEAG3C,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,iCAC3C,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,uEAG/C,sBAAsB,KAAK,CAAC,2DAExB,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,iCAC3C,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,iCAC3C,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,oEAG3C,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,iCAC3C,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,iCAC3C,kBAAkB,CAAC,CAAC,EAAE,oBAAoB,CAAC,mNAY7D,CAAC;IACJ,CAAC;IACH,oBAAC;AAAD,CAAC,AA9ED,IA8EC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/mulmat_gpu.d.ts","text":"import { GPGPUProgram } from './gpgpu_math';\r\nexport declare class MatMulProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    outputShape: number[];\r\n    userCode: string;\r\n    constructor(aShape: [number, number], bShape: [number, number], transposeA?: boolean, transposeB?: boolean);\r\n}\r\n"}}
