{"code":"export var DType;\r\n(function (DType) {\r\n    DType[\"float32\"] = \"float32\";\r\n    DType[\"int32\"] = \"int32\";\r\n    DType[\"bool\"] = \"bool\";\r\n})(DType || (DType = {}));\r\nexport var Rank;\r\n(function (Rank) {\r\n    Rank[\"R0\"] = \"R0\";\r\n    Rank[\"R1\"] = \"R1\";\r\n    Rank[\"R2\"] = \"R2\";\r\n    Rank[\"R3\"] = \"R3\";\r\n    Rank[\"R4\"] = \"R4\";\r\n})(Rank || (Rank = {}));\r\nvar UpcastInt32AndMap;\r\n(function (UpcastInt32AndMap) {\r\n    UpcastInt32AndMap[\"float32\"] = \"float32\";\r\n    UpcastInt32AndMap[\"int32\"] = \"int32\";\r\n    UpcastInt32AndMap[\"bool\"] = \"int32\";\r\n})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));\r\nvar UpcastBoolAndMap;\r\n(function (UpcastBoolAndMap) {\r\n    UpcastBoolAndMap[\"float32\"] = \"float32\";\r\n    UpcastBoolAndMap[\"int32\"] = \"int32\";\r\n    UpcastBoolAndMap[\"bool\"] = \"bool\";\r\n})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));\r\nvar UpcastFloat32AndMap;\r\n(function (UpcastFloat32AndMap) {\r\n    UpcastFloat32AndMap[\"float32\"] = \"float32\";\r\n    UpcastFloat32AndMap[\"int32\"] = \"float32\";\r\n    UpcastFloat32AndMap[\"bool\"] = \"float32\";\r\n})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));\r\nvar upcastTypeMap = {\r\n    float32: UpcastFloat32AndMap,\r\n    int32: UpcastInt32AndMap,\r\n    bool: UpcastBoolAndMap\r\n};\r\nexport function upcastType(typeA, typeB) {\r\n    return upcastTypeMap[typeA][typeB];\r\n}\r\nexport function sumOutType(type) {\r\n    return upcastType(type, 'int32');\r\n}\r\n//# sourceMappingURL=types.js.map","map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"src/types.ts\"],\"names\":[],\"mappings\":\"AAmBA,MAAM,CAAN,IAAY,KAIX;AAJD,WAAY,KAAK;IACf,4BAAmB,CAAA;IACnB,wBAAe,CAAA;IACf,sBAAa,CAAA;AACf,CAAC,EAJW,KAAK,KAAL,KAAK,QAIhB;AAqBD,MAAM,CAAN,IAAY,IAMX;AAND,WAAY,IAAI;IACd,iBAAS,CAAA;IACT,iBAAS,CAAA;IACT,iBAAS,CAAA;IACT,iBAAS,CAAA;IACT,iBAAS,CAAA;AACX,CAAC,EANW,IAAI,KAAJ,IAAI,QAMf;AAoCD,IAAK,iBAIJ;AAJD,WAAK,iBAAiB;IACpB,wCAAmB,CAAA;IACnB,oCAAe,CAAA;IACf,mCAAc,CAAA;AAChB,CAAC,EAJI,iBAAiB,KAAjB,iBAAiB,QAIrB;AAED,IAAK,gBAIJ;AAJD,WAAK,gBAAgB;IACnB,uCAAmB,CAAA;IACnB,mCAAe,CAAA;IACf,iCAAa,CAAA;AACf,CAAC,EAJI,gBAAgB,KAAhB,gBAAgB,QAIpB;AAED,IAAK,mBAIJ;AAJD,WAAK,mBAAmB;IACtB,0CAAmB,CAAA;IACnB,wCAAiB,CAAA;IACjB,uCAAgB,CAAA;AAClB,CAAC,EAJI,mBAAmB,KAAnB,mBAAmB,QAIvB;AAED,IAAM,aAAa,GAAG;IACpB,OAAO,EAAE,mBAAmB;IAC5B,KAAK,EAAE,iBAAiB;IACxB,IAAI,EAAE,gBAAgB;CACvB,CAAC;AAEF,MAAM,qBAAqB,KAAe,EAAE,KAAe;IACzD,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;AACrC,CAAC;AAGD,MAAM,qBAAqB,IAAc;IACvC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACnC,CAAC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/types.d.ts","text":"import { Tensor, Variable } from './tensor';\r\nexport declare enum DType {\r\n    float32 = \"float32\",\r\n    int32 = \"int32\",\r\n    bool = \"bool\",\r\n}\r\nexport interface ShapeMap {\r\n    R0: number[];\r\n    R1: [number];\r\n    R2: [number, number];\r\n    R3: [number, number, number];\r\n    R4: [number, number, number, number];\r\n}\r\nexport interface DataTypeMap {\r\n    float32: Float32Array;\r\n    int32: Int32Array;\r\n    bool: Uint8Array;\r\n}\r\nexport declare type DataType = keyof DataTypeMap;\r\nexport declare type TypedArray = DataTypeMap[DataType];\r\nexport declare enum Rank {\r\n    R0 = \"R0\",\r\n    R1 = \"R1\",\r\n    R2 = \"R2\",\r\n    R3 = \"R3\",\r\n    R4 = \"R4\",\r\n}\r\nexport declare type TensorLike = TypedArray | number | boolean | number[] | number[][] | number[][][] | number[][][][] | boolean[] | boolean[][] | boolean[][][] | boolean[][][][];\r\nexport declare type TensorLike1D = TypedArray | number[] | boolean[];\r\nexport declare type TensorLike2D = TypedArray | number[] | number[][] | boolean[] | boolean[][];\r\nexport declare type TensorLike3D = TypedArray | number[] | number[][][] | boolean[] | boolean[][][];\r\nexport declare type TensorLike4D = TypedArray | number[] | number[][][][] | boolean[] | boolean[][][][];\r\nexport declare type FlatVector = boolean[] | number[] | TypedArray;\r\nexport declare type RegularArray<T> = T[] | T[][] | T[][][] | T[][][][];\r\nexport declare type ArrayData<D extends DataType> = DataTypeMap[D] | RegularArray<number> | RegularArray<boolean>;\r\nexport interface RecursiveArray<T extends any> {\r\n    [index: number]: T | RecursiveArray<T>;\r\n}\r\nexport declare type NamedTensorMap = {\r\n    [name: string]: Tensor;\r\n};\r\nexport declare type NamedVariableMap = {\r\n    [name: string]: Variable;\r\n};\r\nexport declare function upcastType(typeA: DataType, typeB: DataType): DataType;\r\nexport declare function sumOutType(type: DataType): \"float32\" | \"int32\" | \"bool\";\r\nexport declare type TensorContainer = void | Tensor | string | number | boolean | TensorContainerObject | TensorContainerArray;\r\nexport interface TensorContainerObject {\r\n    [x: string]: TensorContainer;\r\n}\r\nexport interface TensorContainerArray extends Array<TensorContainer> {\r\n}\r\n"}}
