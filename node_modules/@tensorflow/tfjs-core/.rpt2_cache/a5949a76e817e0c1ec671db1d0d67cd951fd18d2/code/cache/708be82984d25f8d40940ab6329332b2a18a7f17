{"code":"import * as tslib_1 from \"tslib\";\r\nimport { ENV } from '../environment';\r\nimport { keep, tidy } from '../globals';\r\nimport { scalar, zerosLike } from '../ops/ops';\r\nimport { SerializationMap } from '../serialization';\r\nimport { Optimizer } from './optimizer';\r\nvar AdamOptimizer = (function (_super) {\r\n    tslib_1.__extends(AdamOptimizer, _super);\r\n    function AdamOptimizer(learningRate, beta1, beta2, epsilon) {\r\n        if (epsilon === void 0) { epsilon = 1e-8; }\r\n        var _this = _super.call(this) || this;\r\n        _this.learningRate = learningRate;\r\n        _this.beta1 = beta1;\r\n        _this.beta2 = beta2;\r\n        _this.epsilon = epsilon;\r\n        _this.accumulatedFirstMoment = {};\r\n        _this.accumulatedSecondMoment = {};\r\n        _this.c = keep(scalar(-learningRate));\r\n        _this.epsScalar = keep(scalar(epsilon));\r\n        _this.beta1Scalar = keep(scalar(beta1));\r\n        _this.beta2Scalar = keep(scalar(beta2));\r\n        tidy(function () {\r\n            _this.accBeta1 = scalar(beta1).variable();\r\n            _this.accBeta2 = scalar(beta2).variable();\r\n        });\r\n        _this.oneMinusBeta1 = keep(scalar(1 - beta1));\r\n        _this.oneMinusBeta2 = keep(scalar(1 - beta2));\r\n        _this.one = keep(scalar(1));\r\n        return _this;\r\n    }\r\n    AdamOptimizer.prototype.applyGradients = function (variableGradients) {\r\n        var _this = this;\r\n        tidy(function () {\r\n            var oneMinusAccBeta1 = _this.one.sub(_this.accBeta1);\r\n            var oneMinusAccBeta2 = _this.one.sub(_this.accBeta2);\r\n            for (var variableName in variableGradients) {\r\n                var value = ENV.engine.registeredVariables[variableName];\r\n                if (_this.accumulatedFirstMoment[variableName] == null) {\r\n                    var trainable = false;\r\n                    _this.accumulatedFirstMoment[variableName] =\r\n                        zerosLike(value).variable(trainable);\r\n                }\r\n                if (_this.accumulatedSecondMoment[variableName] == null) {\r\n                    var trainable = false;\r\n                    _this.accumulatedSecondMoment[variableName] =\r\n                        zerosLike(value).variable(trainable);\r\n                }\r\n                var gradient = variableGradients[variableName];\r\n                var firstMoment = _this.accumulatedFirstMoment[variableName];\r\n                var secondMoment = _this.accumulatedSecondMoment[variableName];\r\n                var newFirstMoment = _this.beta1Scalar.mul(firstMoment)\r\n                    .add(_this.oneMinusBeta1.mul(gradient));\r\n                var newSecondMoment = _this.beta2Scalar.mul(secondMoment)\r\n                    .add(_this.oneMinusBeta2.mul(gradient.square()));\r\n                var biasCorrectedFirstMoment = newFirstMoment.div(oneMinusAccBeta1);\r\n                var biasCorrectedSecondMoment = newSecondMoment.div(oneMinusAccBeta2);\r\n                _this.accumulatedFirstMoment[variableName].assign(newFirstMoment);\r\n                _this.accumulatedSecondMoment[variableName].assign(newSecondMoment);\r\n                var newValue = _this.c\r\n                    .mul(biasCorrectedFirstMoment.div(_this.epsScalar.add(biasCorrectedSecondMoment.sqrt())))\r\n                    .add(value);\r\n                value.assign(newValue);\r\n            }\r\n            _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1Scalar));\r\n            _this.accBeta2.assign(_this.accBeta2.mul(_this.beta2Scalar));\r\n        });\r\n    };\r\n    AdamOptimizer.prototype.dispose = function () {\r\n        var _this = this;\r\n        this.c.dispose();\r\n        this.epsScalar.dispose();\r\n        this.beta1Scalar.dispose();\r\n        this.beta2Scalar.dispose();\r\n        this.accBeta1.dispose();\r\n        this.accBeta2.dispose();\r\n        this.oneMinusBeta1.dispose();\r\n        this.oneMinusBeta2.dispose();\r\n        this.one.dispose();\r\n        if (this.accumulatedFirstMoment != null) {\r\n            Object.keys(this.accumulatedFirstMoment)\r\n                .forEach(function (name) { return _this.accumulatedFirstMoment[name].dispose(); });\r\n        }\r\n        if (this.accumulatedSecondMoment != null) {\r\n            Object.keys(this.accumulatedSecondMoment)\r\n                .forEach(function (name) { return _this.accumulatedSecondMoment[name].dispose(); });\r\n        }\r\n    };\r\n    AdamOptimizer.prototype.getConfig = function () {\r\n        return {\r\n            learningRate: this.learningRate,\r\n            beta1: this.beta1,\r\n            beta2: this.beta2,\r\n            epsilon: this.epsilon,\r\n        };\r\n    };\r\n    AdamOptimizer.fromConfig = function (cls, config) {\r\n        return new cls(config.learningRate, config.beta1, config.beta2, config.epsilon);\r\n    };\r\n    AdamOptimizer.className = 'AdamOptimizer';\r\n    return AdamOptimizer;\r\n}(Optimizer));\r\nexport { AdamOptimizer };\r\nSerializationMap.register(AdamOptimizer);\r\n//# sourceMappingURL=adam_optimizer.js.map","map":"{\"version\":3,\"file\":\"adam_optimizer.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/optimizers/adam_optimizer.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/optimizers/adam_optimizer.d.ts","text":"import { ConfigDict, Serializable, SerializableConstructor } from '../serialization';\r\nimport { NamedVariableMap } from '../types';\r\nimport { Optimizer } from './optimizer';\r\nexport declare class AdamOptimizer extends Optimizer {\r\n    protected learningRate: number;\r\n    protected beta1: number;\r\n    protected beta2: number;\r\n    protected epsilon: number;\r\n    static className: string;\r\n    private c;\r\n    private epsScalar;\r\n    private beta1Scalar;\r\n    private beta2Scalar;\r\n    private accBeta1;\r\n    private accBeta2;\r\n    private oneMinusBeta1;\r\n    private oneMinusBeta2;\r\n    private one;\r\n    private accumulatedFirstMoment;\r\n    private accumulatedSecondMoment;\r\n    constructor(learningRate: number, beta1: number, beta2: number, epsilon?: number);\r\n    applyGradients(variableGradients: NamedVariableMap): void;\r\n    dispose(): void;\r\n    getConfig(): ConfigDict;\r\n    static fromConfig<T extends Serializable>(cls: SerializableConstructor<T>, config: ConfigDict): T;\r\n}\r\n"}}
