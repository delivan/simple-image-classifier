{"code":"var MaxPool2DBackpropProgram = (function () {\r\n    function MaxPool2DBackpropProgram(convInfo) {\r\n        this.variableNames = ['dy', 'maxPos'];\r\n        this.outputShape = convInfo.inShape;\r\n        var filterHeight = convInfo.filterHeight;\r\n        var filterWidth = convInfo.filterWidth;\r\n        var strideHeight = convInfo.strideHeight;\r\n        var strideWidth = convInfo.strideWidth;\r\n        var padTop = filterHeight - 1 - convInfo.padInfo.top;\r\n        var padLeft = filterWidth - 1 - convInfo.padInfo.left;\r\n        var lastIndex = filterHeight * filterWidth - 1;\r\n        this.userCode = \"\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + filterHeight + \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \" + strideHeight + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + convInfo.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \" + filterWidth + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + strideWidth + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + convInfo.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = \" + lastIndex + \" - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * \" + filterWidth + \" + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\r\n    }\r\n    return MaxPool2DBackpropProgram;\r\n}());\r\nexport { MaxPool2DBackpropProgram };\r\n//# sourceMappingURL=max_pool_backprop_gpu.js.map","map":"{\"version\":3,\"file\":\"max_pool_backprop_gpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/max_pool_backprop_gpu.ts\"],\"names\":[],\"mappings\":\"AAqBA;IAKE,kCAAY,QAAoB;QAJhC,kBAAa,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAK/B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC;QACpC,IAAM,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;QAC3C,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACzC,IAAM,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;QAC3C,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QAEzC,IAAM,MAAM,GAAG,YAAY,GAAG,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC;QACvD,IAAM,OAAO,GAAG,WAAW,GAAG,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;QAExD,IAAM,SAAS,GAAG,YAAY,GAAG,WAAW,GAAG,CAAC,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,sCACa,MAAM,UAAK,OAAO,sdAcnB,YAAY,iEACI,YAAY,iDAExB,QAAQ,CAAC,SAAS,yIAKpB,WAAW,mEACK,WAAW,mDAEvB,QAAQ,CAAC,QAAQ,oNAOvB,SAAS,+LAIJ,WAAW,kMAQ3C,CAAC;IACJ,CAAC;IACH,+BAAC;AAAD,CAAC,AA/DD,IA+DC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/max_pool_backprop_gpu.d.ts","text":"import { Conv2DInfo } from '../../ops/conv_util';\r\nimport { GPGPUProgram } from './gpgpu_math';\r\nexport declare class MaxPool2DBackpropProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    outputShape: number[];\r\n    userCode: string;\r\n    constructor(convInfo: Conv2DInfo);\r\n}\r\n"}}
