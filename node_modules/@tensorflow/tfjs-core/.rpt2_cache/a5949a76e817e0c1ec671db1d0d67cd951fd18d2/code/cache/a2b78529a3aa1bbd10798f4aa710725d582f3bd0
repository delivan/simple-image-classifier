{"code":"import { getCoordsDataType } from './shader_compiler';\r\nvar ReverseProgram = (function () {\r\n    function ReverseProgram(xShape, axis) {\r\n        this.variableNames = ['x'];\r\n        var rank = xShape.length;\r\n        if (rank > 4) {\r\n            throw new Error(\"WebGL backend: Reverse of rank-\" + rank + \" tensor is not yet supported\");\r\n        }\r\n        this.outputShape = xShape;\r\n        if (rank === 1) {\r\n            this.userCode = \"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\" + xShape[0] + \" - coord - 1));\\n        }\\n      \";\r\n            return;\r\n        }\r\n        var getInCoord = function (i) {\r\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\r\n                return xShape[i] + \" - coords[\" + i + \"] - 1\";\r\n            }\r\n            return \"coords[\" + i + \"]\";\r\n        };\r\n        var inCoords = xShape.map(function (_, i) { return getInCoord(i); }).join(',');\r\n        var type = getCoordsDataType(rank);\r\n        this.userCode = \"\\n      void main() {\\n        \" + type + \" coords = getOutputCoords();\\n        setOutput(getX(\" + inCoords + \"));\\n      }\\n    \";\r\n    }\r\n    return ReverseProgram;\r\n}());\r\nexport { ReverseProgram };\r\n//# sourceMappingURL=reverse_gpu.js.map","map":"{\"version\":3,\"file\":\"reverse_gpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/reverse_gpu.ts\"],\"names\":[],\"mappings\":\"AAkBA,OAAO,EAAC,iBAAiB,EAAC,MAAM,mBAAmB,CAAC;AAEpD;IAKE,wBAAY,MAAgB,EAAE,IAAc;QAJ5C,kBAAa,GAAG,CAAC,GAAG,CAAC,CAAC;QAKpB,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;QAC3B,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YACb,MAAM,IAAI,KAAK,CACX,oCAAkC,IAAI,iCAA8B,CAAC,CAAC;QAC5E,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;QAE1B,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,QAAQ,GAAG,iGAGK,MAAM,CAAC,CAAC,CAAC,uCAE7B,CAAC;YACF,MAAM,CAAC;QACT,CAAC;QACD,IAAM,UAAU,GAAG,UAAC,CAAS;YAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAI,MAAM,CAAC,CAAC,CAAC,kBAAa,CAAC,UAAO,CAAC;YAC3C,CAAC;YACD,MAAM,CAAC,YAAU,CAAC,MAAG,CAAC;QACxB,CAAC,CAAC;QACF,IAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,UAAU,CAAC,CAAC,CAAC,EAAb,CAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/D,IAAM,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAErC,IAAI,CAAC,QAAQ,GAAG,oCAEV,IAAI,6DACW,QAAQ,uBAE5B,CAAC;IACJ,CAAC;IACH,qBAAC;AAAD,CAAC,AAtCD,IAsCC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/reverse_gpu.d.ts","text":"import { GPGPUProgram } from './gpgpu_math';\r\nexport declare class ReverseProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    outputShape: number[];\r\n    userCode: string;\r\n    constructor(xShape: number[], axis: number[]);\r\n}\r\n"}}
