{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as seedrandom from 'seedrandom';\r\nimport { ENV } from '../environment';\r\nimport * as axis_util from '../ops/axis_util';\r\nimport * as broadcast_util from '../ops/broadcast_util';\r\nimport * as concat_util from '../ops/concat_util';\r\nimport * as erf_util from '../ops/erf_util';\r\nimport * as ops from '../ops/ops';\r\nimport { buffer, tensor3d, tensor4d } from '../ops/ops';\r\nimport * as selu_util from '../ops/selu_util';\r\nimport { Tensor } from '../tensor';\r\nimport * as types from '../types';\r\nimport * as util from '../util';\r\nimport * as backend_util from './backend_util';\r\nvar MathBackendCPU = (function () {\r\n    function MathBackendCPU() {\r\n        this.data = new WeakMap();\r\n        if (typeof document !== 'undefined') {\r\n            this.canvas = document.createElement('canvas');\r\n        }\r\n    }\r\n    MathBackendCPU.prototype.register = function (dataId, shape, dtype) {\r\n        if (this.data.has(dataId)) {\r\n            throw new Error(\"Data buffer is already registered\");\r\n        }\r\n        this.data.set(dataId, null);\r\n    };\r\n    MathBackendCPU.prototype.write = function (dataId, values) {\r\n        if (values == null) {\r\n            throw new Error('MathBackendCPU.write(): values can not be null');\r\n        }\r\n        this.throwIfNoData(dataId);\r\n        this.data.set(dataId, values);\r\n    };\r\n    MathBackendCPU.prototype.fromPixels = function (pixels, numChannels) {\r\n        if (pixels == null) {\r\n            throw new Error('MathBackendCPU.writePixels(): pixels can not be null');\r\n        }\r\n        var vals;\r\n        if (pixels instanceof ImageData) {\r\n            vals = pixels.data;\r\n        }\r\n        else if (pixels instanceof HTMLCanvasElement) {\r\n            vals = pixels.getContext('2d')\r\n                .getImageData(0, 0, pixels.width, pixels.height)\r\n                .data;\r\n        }\r\n        else if (pixels instanceof HTMLImageElement ||\r\n            pixels instanceof HTMLVideoElement) {\r\n            if (this.canvas == null) {\r\n                throw new Error('Can\\'t read pixels from HTMLImageElement outside ' +\r\n                    'the browser.');\r\n            }\r\n            this.canvas.width = pixels.width;\r\n            this.canvas.height = pixels.height;\r\n            this.canvas.getContext('2d').drawImage(pixels, 0, 0, pixels.width, pixels.height);\r\n            vals = this.canvas.getContext('2d')\r\n                .getImageData(0, 0, pixels.width, pixels.height)\r\n                .data;\r\n        }\r\n        else {\r\n            throw new Error(\"pixels is of unknown type: \" + pixels.constructor.name);\r\n        }\r\n        var values;\r\n        if (numChannels === 4) {\r\n            values = new Int32Array(vals);\r\n        }\r\n        else {\r\n            var numPixels = pixels.width * pixels.height;\r\n            values = new Int32Array(numPixels * numChannels);\r\n            for (var i = 0; i < numPixels; i++) {\r\n                for (var channel = 0; channel < numChannels; ++channel) {\r\n                    values[i * numChannels + channel] = vals[i * 4 + channel];\r\n                }\r\n            }\r\n        }\r\n        var outShape = [pixels.height, pixels.width, numChannels];\r\n        return tensor3d(values, outShape, 'int32');\r\n    };\r\n    MathBackendCPU.prototype.read = function (dataId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                return [2, this.readSync(dataId)];\r\n            });\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.readSync = function (dataId) {\r\n        this.throwIfNoData(dataId);\r\n        return this.data.get(dataId);\r\n    };\r\n    MathBackendCPU.prototype.disposeData = function (dataId) {\r\n        if (this.data.has(dataId)) {\r\n            this.data.delete(dataId);\r\n        }\r\n    };\r\n    MathBackendCPU.prototype.time = function (f) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var start, kernelMs;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                start = performance.now();\r\n                f();\r\n                kernelMs = performance.now() - start;\r\n                return [2, { kernelMs: kernelMs }];\r\n            });\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.memory = function () {\r\n        return {\r\n            unreliable: true\r\n        };\r\n    };\r\n    MathBackendCPU.prototype.throwIfNoData = function (dataId) {\r\n        if (!this.data.has(dataId)) {\r\n            throw new Error(\"CPU backend: No data found for this tensor. \" +\r\n                \"Did you change your backend in the middle of the program? \" +\r\n                \"New backends can't use Tensors created with previous backends\");\r\n        }\r\n    };\r\n    MathBackendCPU.prototype.slice = function (x, begin, size) {\r\n        var buffer = ops.buffer(size, x.dtype);\r\n        for (var i = 0; i < buffer.size; ++i) {\r\n            var loc = buffer.indexToLoc(i);\r\n            var xLoc = loc.map(function (idx, j) { return idx + begin[j]; });\r\n            buffer.set.apply(buffer, [x.get.apply(x, xLoc)].concat(loc));\r\n        }\r\n        return buffer.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.reverse = function (x, axis) {\r\n        var buffer = ops.buffer(x.shape, x.dtype);\r\n        var xBuffer = x.buffer();\r\n        var _loop_1 = function (i) {\r\n            var outLoc = buffer.indexToLoc(i);\r\n            var inLoc = outLoc.slice();\r\n            axis.forEach(function (ax) { return inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]; });\r\n            buffer.set.apply(buffer, [xBuffer.get.apply(xBuffer, inLoc)].concat(outLoc));\r\n        };\r\n        for (var i = 0; i < buffer.size; i++) {\r\n            _loop_1(i);\r\n        }\r\n        return buffer.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.concat = function (a, b) {\r\n        var outShape = concat_util.computeOutShape(a.shape, b.shape, 1);\r\n        var buffer = ops.buffer(outShape, a.dtype);\r\n        if (a.shape[0] === 1 && b.shape[0] === 1) {\r\n            var aVals = a.dataSync();\r\n            var bVals = b.dataSync();\r\n            var vals = buffer.values;\r\n            vals.set(aVals, 0);\r\n            vals.set(bVals, a.size);\r\n            return buffer.toTensor();\r\n        }\r\n        for (var i = 0; i < outShape[0]; ++i) {\r\n            for (var j = 0; j < a.shape[1]; ++j) {\r\n                buffer.set(a.get(i, j), i, j);\r\n            }\r\n            for (var j = 0; j < b.shape[1]; ++j) {\r\n                buffer.set(b.get(i, j), i, j + a.shape[1]);\r\n            }\r\n        }\r\n        return buffer.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.neg = function (x) {\r\n        return this.multiply(ops.scalar(-1), x);\r\n    };\r\n    MathBackendCPU.prototype.add = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) { return aValue + bValue; });\r\n    };\r\n    MathBackendCPU.prototype.subtract = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) { return aValue - bValue; });\r\n    };\r\n    MathBackendCPU.prototype.pow = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, a.dtype, function (aValue, bValue) { return Math.pow(aValue, bValue); });\r\n    };\r\n    MathBackendCPU.prototype.matMul = function (a, b, transposeA, transposeB) {\r\n        var sharedDim = transposeA ? a.shape[0] : a.shape[1];\r\n        var leftDim = transposeA ? a.shape[1] : a.shape[0];\r\n        var rightDim = transposeB ? b.shape[0] : b.shape[1];\r\n        var aValues = a.dataSync();\r\n        var bValues = b.dataSync();\r\n        var _a = transposeA ? [1, a.strides[0]] : [a.strides[0], 1], aOuterStep = _a[0], aInnerStep = _a[1];\r\n        var _b = transposeB ? [b.strides[0], 1] : [1, b.strides[0]], bOuterStep = _b[0], bInnerStep = _b[1];\r\n        var aOuterEnd = leftDim * aOuterStep;\r\n        var bOuterEnd = rightDim * bOuterStep;\r\n        var result = new Float32Array(leftDim * rightDim);\r\n        var resultIndex = 0;\r\n        for (var aOuter = 0; aOuter < aOuterEnd; aOuter += aOuterStep) {\r\n            for (var bOuter = 0; bOuter < bOuterEnd; bOuter += bOuterStep) {\r\n                var aInner = aOuter;\r\n                var bInner = bOuter;\r\n                var sum = 0;\r\n                for (var k = 0; k < sharedDim; ++k) {\r\n                    sum += aValues[aInner] * bValues[bInner];\r\n                    aInner += aInnerStep;\r\n                    bInner += bInnerStep;\r\n                }\r\n                result[resultIndex++] = sum;\r\n            }\r\n        }\r\n        return ops.tensor2d(result, [leftDim, rightDim]);\r\n    };\r\n    MathBackendCPU.prototype.multiply = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) { return aValue * bValue; });\r\n    };\r\n    MathBackendCPU.prototype.divide = function (a, b) {\r\n        var op;\r\n        var outputDtype;\r\n        if (a.dtype === 'int32' && b.dtype === 'int32') {\r\n            outputDtype = 'int32';\r\n            op = function (a, b) { return Math.floor(a / b); };\r\n        }\r\n        else {\r\n            outputDtype = 'float32';\r\n            op = function (a, b) { return a / b; };\r\n        }\r\n        return this.broadcastedBinaryOp(a, b, outputDtype, op);\r\n    };\r\n    MathBackendCPU.prototype.sum = function (x, axes) {\r\n        axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\r\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];\r\n        var resultDtype = types.upcastType(x.dtype, 'int32');\r\n        var result = ops.zeros(outShape, resultDtype);\r\n        var reduceSize = util.sizeFromShape(reduceShape);\r\n        var vals = result.dataSync();\r\n        var aVals = x.dataSync();\r\n        for (var i = 0; i < vals.length; ++i) {\r\n            var offset = i * reduceSize;\r\n            var sum = 0;\r\n            for (var j = 0; j < reduceSize; ++j) {\r\n                sum += aVals[offset + j];\r\n            }\r\n            vals[i] = sum;\r\n        }\r\n        return result;\r\n    };\r\n    MathBackendCPU.prototype.argMin = function (x, axis) {\r\n        var axes = [axis];\r\n        axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\r\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];\r\n        var result = ops.zeros(outShape, 'int32');\r\n        var reduceSize = util.sizeFromShape(reduceShape);\r\n        var vals = result.dataSync();\r\n        var aVals = x.dataSync();\r\n        for (var i = 0; i < vals.length; ++i) {\r\n            var offset = i * reduceSize;\r\n            var min = aVals[offset];\r\n            var minIndex = 0;\r\n            for (var j = 0; j < reduceSize; ++j) {\r\n                var value = aVals[offset + j];\r\n                if (value < min) {\r\n                    min = value;\r\n                    minIndex = j;\r\n                }\r\n            }\r\n            vals[i] = minIndex;\r\n        }\r\n        return result;\r\n    };\r\n    MathBackendCPU.prototype.argMax = function (x, axis) {\r\n        var axes = [axis];\r\n        axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\r\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];\r\n        var result = ops.zeros(outShape, 'int32');\r\n        var reduceSize = util.sizeFromShape(reduceShape);\r\n        var vals = result.dataSync();\r\n        var aVals = x.dataSync();\r\n        for (var i = 0; i < vals.length; ++i) {\r\n            var offset = i * reduceSize;\r\n            var max = aVals[offset];\r\n            var maxIndex = 0;\r\n            for (var j = 0; j < reduceSize; ++j) {\r\n                var value = aVals[offset + j];\r\n                if (value > max) {\r\n                    max = value;\r\n                    maxIndex = j;\r\n                }\r\n            }\r\n            vals[i] = maxIndex;\r\n        }\r\n        return result;\r\n    };\r\n    MathBackendCPU.prototype.cumsum = function (x, axis, exclusive, reverse) {\r\n        var resultDtype = types.upcastType(x.dtype, 'int32');\r\n        var result = ops.zeros(x.shape, resultDtype);\r\n        var vals = result.dataSync();\r\n        var aVals = x.dataSync();\r\n        var finalDim = x.shape[x.rank - 1];\r\n        var indexAdjuster = reverse ?\r\n            function (i, j) { return i + finalDim - j - 1; } :\r\n            function (i, j) { return i + j; };\r\n        for (var i = 0; i < aVals.length; i += finalDim) {\r\n            for (var j = 0; j < finalDim; j++) {\r\n                var idx = indexAdjuster(i, j);\r\n                if (j === 0) {\r\n                    vals[idx] = exclusive ? 0 : aVals[idx];\r\n                }\r\n                else {\r\n                    var prevIdx = indexAdjuster(i, j - 1);\r\n                    vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\r\n                        aVals[idx] + vals[prevIdx];\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    MathBackendCPU.prototype.equal = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\r\n            return (aVal === bVal) ? 1 : 0;\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.notEqual = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\r\n            return (aVal !== bVal) ? 1 : 0;\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.less = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\r\n            return (aVal < bVal) ? 1 : 0;\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.lessEqual = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\r\n            return (aVal <= bVal) ? 1 : 0;\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.greater = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\r\n            return (aVal > bVal) ? 1 : 0;\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.greaterEqual = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\r\n            return (aVal >= bVal) ? 1 : 0;\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.logicalNot = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Int32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            newValues[i] = values[i] ? 0 : 1;\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues }, 'bool');\r\n    };\r\n    MathBackendCPU.prototype.logicalAnd = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\r\n            return aVal && bVal;\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.logicalOr = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\r\n            return aVal || bVal;\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.where = function (condition, a, b, dtype) {\r\n        var values = condition.dataSync();\r\n        var aValues = a.dataSync();\r\n        var bValues = b.dataSync();\r\n        var result = ops.zeros(a.shape, dtype);\r\n        var newValues = result.dataSync();\r\n        var index = 0;\r\n        var offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\r\n            1 :\r\n            a.shape[1];\r\n        for (var i = 0; i < values.length; i++) {\r\n            for (var j = 0; j < offset; j++) {\r\n                if (values[i] === 1) {\r\n                    newValues[index++] = aValues[i];\r\n                }\r\n                else {\r\n                    newValues[index++] = bValues[i];\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    MathBackendCPU.prototype.topKValues = function (x, k) {\r\n        return this.topK(x, k).values;\r\n    };\r\n    MathBackendCPU.prototype.topKIndices = function (x, k) {\r\n        return this.topK(x, k).indices;\r\n    };\r\n    MathBackendCPU.prototype.topK = function (x, k) {\r\n        var values = x.dataSync();\r\n        var valuesAndIndices = [];\r\n        for (var i = 0; i < values.length; i++) {\r\n            valuesAndIndices.push({ value: values[i], index: i });\r\n        }\r\n        valuesAndIndices.sort(function (a, b) {\r\n            return b.value - a.value;\r\n        });\r\n        var topkValues = util.getTypedArrayFromDType(x.dtype, k);\r\n        var topkIndices = new Int32Array(k);\r\n        for (var i = 0; i < k; i++) {\r\n            topkValues[i] = valuesAndIndices[i].value;\r\n            topkIndices[i] = valuesAndIndices[i].index;\r\n        }\r\n        return {\r\n            values: ops.tensor1d(topkValues, x.dtype),\r\n            indices: ops.tensor1d(topkIndices, 'int32')\r\n        };\r\n    };\r\n    MathBackendCPU.prototype.min = function (x, axes) {\r\n        axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);\r\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];\r\n        var result = ops.zeros(outShape, x.dtype);\r\n        var reduceSize = util.sizeFromShape(reduceShape);\r\n        var vals = result.dataSync();\r\n        var aVals = x.dataSync();\r\n        for (var i = 0; i < vals.length; ++i) {\r\n            var offset = i * reduceSize;\r\n            var min = aVals[0];\r\n            for (var j = 0; j < reduceSize; ++j) {\r\n                var value = aVals[offset + j];\r\n                if (value < min) {\r\n                    min = value;\r\n                }\r\n            }\r\n            vals[i] = min;\r\n        }\r\n        return result;\r\n    };\r\n    MathBackendCPU.prototype.minimum = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) { return Math.min(aVal, bVal); });\r\n    };\r\n    MathBackendCPU.prototype.mod = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {\r\n            var rem = aVal % bVal;\r\n            if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\r\n                return rem;\r\n            }\r\n            else {\r\n                return (rem + bVal) % bVal;\r\n            }\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.max = function (x, axes) {\r\n        axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);\r\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];\r\n        var result = ops.zeros(outShape, x.dtype);\r\n        var reduceSize = util.sizeFromShape(reduceShape);\r\n        var vals = result.dataSync();\r\n        var aVals = x.dataSync();\r\n        for (var i = 0; i < vals.length; ++i) {\r\n            var offset = i * reduceSize;\r\n            var max = aVals[offset];\r\n            for (var j = 0; j < reduceSize; ++j) {\r\n                var value = aVals[offset + j];\r\n                if (value > max) {\r\n                    max = value;\r\n                }\r\n            }\r\n            vals[i] = max;\r\n        }\r\n        return result;\r\n    };\r\n    MathBackendCPU.prototype.maximum = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) { return Math.max(aVal, bVal); });\r\n    };\r\n    MathBackendCPU.prototype.squaredDifference = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {\r\n            var diff = aVal - bVal;\r\n            return diff * diff;\r\n        });\r\n    };\r\n    MathBackendCPU.prototype.ceil = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            newValues[i] = Math.ceil(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.floor = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            newValues[i] = Math.floor(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.sign = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            if (values[i] < 0) {\r\n                newValues[i] = -1;\r\n            }\r\n            else if (values[i] > 0) {\r\n                newValues[i] = 1;\r\n            }\r\n            else {\r\n                newValues[i] = 0;\r\n            }\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.round = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var base = Math.floor(values[i]);\r\n            if (values[i] - base < 0.5) {\r\n                newValues[i] = Math.floor(values[i]);\r\n            }\r\n            else if (values[i] - base > 0.5) {\r\n                newValues[i] = Math.ceil(values[i]);\r\n            }\r\n            else {\r\n                if (base % 2.0 === 0.0) {\r\n                    newValues[i] = base;\r\n                }\r\n                else {\r\n                    newValues[i] = base + 1.0;\r\n                }\r\n            }\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.exp = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            newValues[i] = Math.exp(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.expm1 = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            newValues[i] = Math.expm1(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.log = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var value = values[i];\r\n            newValues[i] = Math.log(value);\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.log1p = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var value = values[i];\r\n            newValues[i] = Math.log1p(value);\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.sqrt = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var value = values[i];\r\n            newValues[i] = Math.sqrt(value);\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.rsqrt = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var value = values[i];\r\n            newValues[i] = 1 / Math.sqrt(value);\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.square = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var value = values[i];\r\n            newValues[i] = value * value;\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.reciprocal = function (x) {\r\n        var values = x.dataSync();\r\n        var newValues = new Float32Array(values.length);\r\n        for (var i = 0; i < values.length; ++i) {\r\n            newValues[i] = 1 / values[i];\r\n        }\r\n        return Tensor.make(x.shape, { values: newValues });\r\n    };\r\n    MathBackendCPU.prototype.relu = function (x) {\r\n        var res = ops.zeros(x.shape, x.dtype);\r\n        var resVals = res.dataSync();\r\n        var inVals = x.dataSync();\r\n        for (var i = 0; i < inVals.length; ++i) {\r\n            resVals[i] = Math.max(0, inVals[i]);\r\n        }\r\n        return res;\r\n    };\r\n    MathBackendCPU.prototype.elu = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var v = values[i];\r\n            if (v >= 0) {\r\n                resultValues[i] = v;\r\n            }\r\n            else {\r\n                resultValues[i] = (Math.exp(v) - 1);\r\n            }\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.eluDer = function (dy, y) {\r\n        var resultValues = new Float32Array(y.size);\r\n        var values = y.dataSync();\r\n        var dyValues = dy.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var v = values[i];\r\n            if (v >= 1) {\r\n                resultValues[i] = dyValues[i];\r\n            }\r\n            else {\r\n                resultValues[i] = dyValues[i] * (v + 1);\r\n            }\r\n        }\r\n        return Tensor.make(y.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.selu = function (x) {\r\n        var scaleAlpha = selu_util.SELU_SCALEALPHA;\r\n        var scale = selu_util.SELU_SCALE;\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var v = values[i];\r\n            if (v >= 0) {\r\n                resultValues[i] = scale * v;\r\n            }\r\n            else {\r\n                resultValues[i] = scaleAlpha * (Math.exp(v) - 1);\r\n            }\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.clip = function (x, min, max) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.min(max, Math.max(min, values[i]));\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.abs = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.abs(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.int = function (x) {\r\n        var resultValues = new Int32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = values[i];\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues }, 'int32');\r\n    };\r\n    MathBackendCPU.prototype.sigmoid = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = 1 / (1 + Math.exp(-values[i]));\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.softplus = function (x) {\r\n        var epsilon = 1.1920928955078125e-7;\r\n        var threshold = Math.log(epsilon) + 2.0;\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var tooLarge = values[i] > -threshold;\r\n            var tooSmall = values[i] < threshold;\r\n            var expX = Math.exp(values[i]);\r\n            var result = void 0;\r\n            if (tooSmall) {\r\n                result = expX;\r\n            }\r\n            else if (tooLarge) {\r\n                result = values[i];\r\n            }\r\n            else {\r\n                result = Math.log(1.0 + expX);\r\n            }\r\n            resultValues[i] = result;\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.sin = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.sin(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.cos = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.cos(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.tan = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.tan(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.asin = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.asin(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.acos = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.acos(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.atan = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.atan(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.atan2 = function (a, b) {\r\n        return this.broadcastedBinaryOp(a, b, a.dtype, function (aValue, bValue) { return Math.atan2(aValue, bValue); });\r\n    };\r\n    MathBackendCPU.prototype.sinh = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.sinh(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.cosh = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.cosh(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.tanh = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = util.tanh(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.asinh = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.asinh(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.acosh = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.acosh(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.atanh = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            resultValues[i] = Math.atanh(values[i]);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.erf = function (x) {\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        var p = erf_util.ERF_P;\r\n        var a1 = erf_util.ERF_A1;\r\n        var a2 = erf_util.ERF_A2;\r\n        var a3 = erf_util.ERF_A3;\r\n        var a4 = erf_util.ERF_A4;\r\n        var a5 = erf_util.ERF_A5;\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var v = values[i];\r\n            var t = 1.0 / (1.0 + p * v);\r\n            resultValues[i] = 1.0 -\r\n                (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\r\n                    Math.exp(-v * v);\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.step = function (x, alpha) {\r\n        if (alpha === void 0) { alpha = 0; }\r\n        var resultValues = new Float32Array(x.size);\r\n        var values = x.dataSync();\r\n        for (var i = 0; i < values.length; ++i) {\r\n            var value = values[i];\r\n            if (isNaN(value)) {\r\n                resultValues[i] = NaN;\r\n            }\r\n            else {\r\n                resultValues[i] = value > 0 ? 1 : alpha;\r\n            }\r\n        }\r\n        return Tensor.make(x.shape, { values: resultValues });\r\n    };\r\n    MathBackendCPU.prototype.conv2d = function (x, filter, convInfo) {\r\n        var filterHeight = convInfo.filterHeight;\r\n        var filterWidth = convInfo.filterWidth;\r\n        var dilationHeight = convInfo.dilationHeight;\r\n        var dilationWidth = convInfo.dilationWidth;\r\n        var padLeft = convInfo.padInfo.left;\r\n        var padTop = convInfo.padInfo.top;\r\n        var y = ops.buffer(convInfo.outShape, x.dtype);\r\n        for (var b = 0; b < convInfo.batchSize; ++b) {\r\n            for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\r\n                for (var yR = 0; yR < convInfo.outHeight; ++yR) {\r\n                    var xRCorner = yR * convInfo.strideHeight - padLeft;\r\n                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {\r\n                        var xCCorner = yC * convInfo.strideWidth - padTop;\r\n                        var dotProd = 0;\r\n                        for (var wR = 0; wR < filterHeight; wR++) {\r\n                            var xR = xRCorner + wR * dilationHeight;\r\n                            if (xR < 0 || xR >= convInfo.inHeight) {\r\n                                continue;\r\n                            }\r\n                            for (var wC = 0; wC < filterWidth; wC++) {\r\n                                var xC = xCCorner + wC * dilationWidth;\r\n                                if (xC < 0 || xC >= convInfo.inWidth) {\r\n                                    continue;\r\n                                }\r\n                                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\r\n                                    var pixel = x.get(b, xR, xC, d1);\r\n                                    var weight = filter.get(wR, wC, d1, d2);\r\n                                    dotProd += pixel * weight;\r\n                                }\r\n                            }\r\n                        }\r\n                        y.set(dotProd, b, yR, yC, d2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return y.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.conv2dDerInput = function (dy, filter, convInfo) {\r\n        var dx = ops.buffer(convInfo.inShape, 'float32');\r\n        var dxValues = dx.values;\r\n        var _a = dx.strides, dxS0 = _a[0], dxS1 = _a[1], dxS2 = _a[2];\r\n        var dyValues = dy.dataSync();\r\n        var _b = dy.strides, dyS0 = _b[0], dyS1 = _b[1], dyS2 = _b[2];\r\n        var fltValues = filter.dataSync();\r\n        var _c = filter.strides, fltS0 = _c[0], fltS1 = _c[1], fltS2 = _c[2];\r\n        var batchSize = convInfo.batchSize, filterHeight = convInfo.filterHeight, filterWidth = convInfo.filterWidth, inChannels = convInfo.inChannels, inHeight = convInfo.inHeight, inWidth = convInfo.inWidth, outChannels = convInfo.outChannels, outHeight = convInfo.outHeight, outWidth = convInfo.outWidth, strideHeight = convInfo.strideHeight, strideWidth = convInfo.strideWidth;\r\n        var topPad = filterHeight - 1 - convInfo.padInfo.top;\r\n        var leftPad = filterWidth - 1 - convInfo.padInfo.left;\r\n        for (var b = 0; b < batchSize; ++b) {\r\n            for (var d1 = 0; d1 < inChannels; ++d1) {\r\n                for (var xR = 0; xR < inHeight; ++xR) {\r\n                    var xRCorner = xR - topPad;\r\n                    var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\r\n                    var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\r\n                    for (var xC = 0; xC < inWidth; ++xC) {\r\n                        var xCCorner = xC - leftPad;\r\n                        var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\r\n                        var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\r\n                        var dotProd = 0;\r\n                        for (var yR = xRMin; yR < yRMax; ++yR) {\r\n                            var wR = yR * strideHeight - xRCorner;\r\n                            for (var yC = xCMin; yC < yCMax; ++yC) {\r\n                                var wC = yC * strideWidth - xCCorner;\r\n                                var dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\r\n                                var fltOffset = fltS0 * (filterHeight - 1 - wR) +\r\n                                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\r\n                                for (var d2 = 0; d2 < outChannels; ++d2) {\r\n                                    var pixel = dyValues[dyOffset + d2];\r\n                                    var weight = fltValues[fltOffset + d2];\r\n                                    dotProd += pixel * weight;\r\n                                }\r\n                            }\r\n                        }\r\n                        dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dx.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.conv2dDerFilter = function (x, dy, convInfo) {\r\n        var strideHeight = convInfo.strideHeight;\r\n        var strideWidth = convInfo.strideWidth;\r\n        var filterHeight = convInfo.filterHeight;\r\n        var filterWidth = convInfo.filterWidth;\r\n        var dW = ops.buffer(convInfo.filterShape, 'float32');\r\n        var leftPad = convInfo.padInfo.left;\r\n        var topPad = convInfo.padInfo.top;\r\n        for (var wR = 0; wR < filterHeight; ++wR) {\r\n            var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\r\n            var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\r\n            for (var wC = 0; wC < filterWidth; ++wC) {\r\n                var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\r\n                var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\r\n                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\r\n                    for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\r\n                        var dotProd = 0;\r\n                        for (var b = 0; b < convInfo.batchSize; ++b) {\r\n                            for (var yR = yRMin; yR < yRMax; ++yR) {\r\n                                var xR = wR + yR * strideHeight - topPad;\r\n                                for (var yC = yCMin; yC < yCMax; ++yC) {\r\n                                    var xC = wC + yC * strideWidth - leftPad;\r\n                                    dotProd += x.get(b, xR, xC, d1) * dy.get(b, yR, yC, d2);\r\n                                }\r\n                            }\r\n                        }\r\n                        dW.set(dotProd, wR, wC, d1, d2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dW.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.depthwiseConv2D = function (x, filter, convInfo) {\r\n        var filterHeight = convInfo.filterHeight;\r\n        var filterWidth = convInfo.filterWidth;\r\n        var dilationHeight = convInfo.dilationHeight;\r\n        var dilationWidth = convInfo.dilationWidth;\r\n        var padLeft = convInfo.padInfo.left;\r\n        var padTop = convInfo.padInfo.top;\r\n        var chMul = convInfo.outChannels / convInfo.inChannels;\r\n        var y = ops.buffer(convInfo.outShape, x.dtype);\r\n        for (var b = 0; b < convInfo.batchSize; ++b) {\r\n            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\r\n                for (var yR = 0; yR < convInfo.outHeight; ++yR) {\r\n                    var xRCorner = yR * convInfo.strideHeight - padLeft;\r\n                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {\r\n                        var xCCorner = yC * convInfo.strideWidth - padTop;\r\n                        for (var q = 0; q < chMul; ++q) {\r\n                            var dotProd = 0;\r\n                            for (var wR = 0; wR < filterHeight; ++wR) {\r\n                                var xR = xRCorner + wR * dilationHeight;\r\n                                if (xR < 0 || xR >= convInfo.inHeight) {\r\n                                    continue;\r\n                                }\r\n                                for (var wC = 0; wC < filterWidth; ++wC) {\r\n                                    var xC = xCCorner + wC * dilationWidth;\r\n                                    if (xC < 0 || xC >= convInfo.inWidth) {\r\n                                        continue;\r\n                                    }\r\n                                    var pixel = x.get(b, xR, xC, d1);\r\n                                    var weight = filter.get(wR, wC, d1, q);\r\n                                    dotProd += pixel * weight;\r\n                                }\r\n                            }\r\n                            y.set(dotProd, b, yR, yC, d1 * chMul + q);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return y.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.tile = function (x, reps) {\r\n        var newShape = new Array(x.rank);\r\n        for (var i = 0; i < newShape.length; i++) {\r\n            newShape[i] = x.shape[i] * reps[i];\r\n        }\r\n        var result = ops.buffer(newShape, x.dtype);\r\n        var xBuf = x.buffer();\r\n        for (var i = 0; i < result.values.length; ++i) {\r\n            var newLoc = result.indexToLoc(i);\r\n            var originalLoc = new Array(x.rank);\r\n            for (var i_1 = 0; i_1 < originalLoc.length; i_1++) {\r\n                originalLoc[i_1] = newLoc[i_1] % x.shape[i_1];\r\n            }\r\n            var originalIndex = xBuf.locToIndex(originalLoc);\r\n            result.values[i] = xBuf.values[originalIndex];\r\n        }\r\n        return result.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.pad = function (x, paddings, constantValue) {\r\n        var outShape = paddings.map(function (p, i) { return p[0] + x.shape[i] + p[1]; });\r\n        var start = paddings.map(function (p) { return p[0]; });\r\n        var xBuffer = x.buffer();\r\n        var buffer = ops.buffer(outShape, x.dtype);\r\n        if (constantValue !== 0) {\r\n            buffer.values.fill(constantValue);\r\n        }\r\n        for (var i = 0; i < x.size; i++) {\r\n            var coords = xBuffer.indexToLoc(i);\r\n            var outCoords = coords.map(function (c, i) { return c + start[i]; });\r\n            buffer.set.apply(buffer, [x.get.apply(x, coords)].concat(outCoords));\r\n        }\r\n        return buffer.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.transpose = function (x, perm) {\r\n        var newShape = new Array(x.rank);\r\n        for (var i = 0; i < newShape.length; i++) {\r\n            newShape[i] = x.shape[perm[i]];\r\n        }\r\n        var values = x.dataSync();\r\n        var result = buffer(newShape, x.dtype);\r\n        var xBuf = x.buffer();\r\n        for (var i = 0; i < x.size; ++i) {\r\n            var loc = xBuf.indexToLoc(i);\r\n            var newLoc = new Array(loc.length);\r\n            for (var i_2 = 0; i_2 < newLoc.length; i_2++) {\r\n                newLoc[i_2] = loc[perm[i_2]];\r\n            }\r\n            var newIndex = result.locToIndex(newLoc);\r\n            result.values[newIndex] = values[i];\r\n        }\r\n        return result.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.gather = function (x, indices, axis) {\r\n        var newShape = x.shape.slice();\r\n        var indicesValues = indices.dataSync();\r\n        newShape[axis] = indicesValues.length;\r\n        var result = buffer(newShape, x.dtype);\r\n        var xBuf = x.buffer();\r\n        for (var i = 0; i < result.size; ++i) {\r\n            var newLoc = result.indexToLoc(i);\r\n            var originalLoc = newLoc.slice();\r\n            originalLoc[axis] = indicesValues[newLoc[axis]];\r\n            var originalIndex = xBuf.locToIndex(originalLoc);\r\n            result.values[i] = xBuf.values[originalIndex];\r\n        }\r\n        return result.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.pool = function (x, convInfo, poolType) {\r\n        var strideHeight = convInfo.strideHeight;\r\n        var strideWidth = convInfo.strideWidth;\r\n        var filterHeight = convInfo.filterHeight;\r\n        var filterWidth = convInfo.filterWidth;\r\n        var y = ops.buffer(convInfo.outShape, 'float32');\r\n        var padTop = convInfo.padInfo.top;\r\n        var padLeft = convInfo.padInfo.left;\r\n        for (var b = 0; b < convInfo.batchSize; ++b) {\r\n            for (var d = 0; d < convInfo.inChannels; ++d) {\r\n                for (var yR = 0; yR < convInfo.outHeight; ++yR) {\r\n                    var xRCorner = yR * strideHeight - padTop;\r\n                    var xRMin = Math.max(0, xRCorner);\r\n                    var xRMax = Math.min(convInfo.inHeight, filterHeight + xRCorner);\r\n                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {\r\n                        var xCCorner = yC * strideWidth - padLeft;\r\n                        var xCMin = Math.max(0, xCCorner);\r\n                        var xCMax = Math.min(convInfo.inWidth, filterWidth + xCCorner);\r\n                        var minMaxValue = (poolType === 'max' ? Number.NEGATIVE_INFINITY :\r\n                            Number.POSITIVE_INFINITY);\r\n                        var avgValue = 0;\r\n                        var count = 0;\r\n                        for (var xR = xRMin; xR < xRMax; ++xR) {\r\n                            for (var xC = xCMin; xC < xCMax; ++xC) {\r\n                                var pixel = x.get(b, xR, xC, d);\r\n                                if ((poolType === 'max' && pixel > minMaxValue)) {\r\n                                    minMaxValue = pixel;\r\n                                }\r\n                                else if (poolType === 'avg') {\r\n                                    avgValue += pixel;\r\n                                    count++;\r\n                                }\r\n                            }\r\n                            if (isNaN(minMaxValue)) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        y.set(poolType === 'avg' ? avgValue / count : minMaxValue, b, yR, yC, d);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return y.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.maxPool = function (x, convInfo) {\r\n        return this.pool(x, convInfo, 'max');\r\n    };\r\n    MathBackendCPU.prototype.maxPoolPositions = function (x, convInfo) {\r\n        var maxPositions = ops.buffer(convInfo.outShape, 'int32');\r\n        var strideHeight = convInfo.strideHeight;\r\n        var strideWidth = convInfo.strideWidth;\r\n        var filterHeight = convInfo.filterHeight;\r\n        var filterWidth = convInfo.filterWidth;\r\n        var padTop = convInfo.padInfo.top;\r\n        var padLeft = convInfo.padInfo.left;\r\n        for (var b = 0; b < convInfo.batchSize; ++b) {\r\n            for (var d = 0; d < convInfo.inChannels; ++d) {\r\n                for (var yR = 0; yR < convInfo.outHeight; ++yR) {\r\n                    var xRCorner = yR * strideHeight - padTop;\r\n                    var xRMin = Math.max(0, xRCorner);\r\n                    var xRMax = Math.min(convInfo.inHeight, filterHeight + xRCorner);\r\n                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {\r\n                        var xCCorner = yC * strideWidth - padLeft;\r\n                        var xCMin = Math.max(0, xCCorner);\r\n                        var xCMax = Math.min(convInfo.inWidth, filterWidth + xCCorner);\r\n                        var maxValue = Number.NEGATIVE_INFINITY;\r\n                        var maxPosition = -1;\r\n                        for (var xR = xRMin; xR < xRMax; ++xR) {\r\n                            var wR = xR - xRCorner;\r\n                            for (var xC = xCMin; xC < xCMax; ++xC) {\r\n                                var wC = xC - xCCorner;\r\n                                var pixel = x.get(b, xR, xC, d);\r\n                                if (pixel > maxValue) {\r\n                                    maxValue = pixel;\r\n                                    maxPosition = wR * filterWidth + wC;\r\n                                }\r\n                            }\r\n                        }\r\n                        maxPositions.set(maxPosition, b, yR, yC, d);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return maxPositions.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {\r\n        var maxPositions = this.maxPoolPositions(x, convInfo);\r\n        var strideHeight = convInfo.strideHeight;\r\n        var strideWidth = convInfo.strideWidth;\r\n        var filterHeight = convInfo.filterHeight;\r\n        var filterWidth = convInfo.filterWidth;\r\n        var padLeft = filterWidth - 1 - convInfo.padInfo.left;\r\n        var padTop = filterHeight - 1 - convInfo.padInfo.top;\r\n        var dx = ops.buffer(x.shape, 'float32');\r\n        for (var b = 0; b < convInfo.batchSize; ++b) {\r\n            for (var d = 0; d < convInfo.inChannels; ++d) {\r\n                for (var dxR = 0; dxR < convInfo.inHeight; ++dxR) {\r\n                    for (var dxC = 0; dxC < convInfo.inWidth; ++dxC) {\r\n                        var dyRCorner = dxR - padTop;\r\n                        var dyCCorner = dxC - padLeft;\r\n                        var dotProd = 0;\r\n                        for (var wR = 0; wR < filterHeight; ++wR) {\r\n                            var dyR = (dyRCorner + wR) / strideHeight;\r\n                            if (dyR < 0 || dyR >= convInfo.outHeight ||\r\n                                Math.floor(dyR) !== dyR) {\r\n                                continue;\r\n                            }\r\n                            for (var wC = 0; wC < filterWidth; ++wC) {\r\n                                var dyC = (dyCCorner + wC) / strideWidth;\r\n                                if (dyC < 0 || dyC >= convInfo.outWidth ||\r\n                                    Math.floor(dyC) !== dyC) {\r\n                                    continue;\r\n                                }\r\n                                var maxPos = filterHeight * filterWidth - 1 -\r\n                                    maxPositions.get(b, dyR, dyC, d);\r\n                                var curPos = wR * filterWidth + wC;\r\n                                var mask = maxPos === curPos ? 1 : 0;\r\n                                if (mask === 0) {\r\n                                    continue;\r\n                                }\r\n                                var pixel = dy.get(b, dyR, dyC, d);\r\n                                dotProd += pixel * mask;\r\n                            }\r\n                        }\r\n                        dx.set(dotProd, b, dxR, dxC, d);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dx.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.avgPoolBackprop = function (dy, x, convInfo) {\r\n        var strideHeight = convInfo.strideHeight;\r\n        var strideWidth = convInfo.strideWidth;\r\n        var filterHeight = convInfo.filterHeight;\r\n        var filterWidth = convInfo.filterWidth;\r\n        var padLeft = filterWidth - 1 - convInfo.padInfo.left;\r\n        var padTop = filterHeight - 1 - convInfo.padInfo.top;\r\n        var dx = ops.buffer(x.shape, 'float32');\r\n        var avgMultiplier = 1 / (filterHeight * filterWidth);\r\n        for (var b = 0; b < convInfo.batchSize; ++b) {\r\n            for (var d = 0; d < convInfo.inChannels; ++d) {\r\n                for (var dxR = 0; dxR < convInfo.inHeight; ++dxR) {\r\n                    for (var dxC = 0; dxC < convInfo.inWidth; ++dxC) {\r\n                        var dyRCorner = dxR - padTop;\r\n                        var dyCCorner = dxC - padLeft;\r\n                        var dotProd = 0;\r\n                        for (var wR = 0; wR < filterHeight; ++wR) {\r\n                            var dyR = (dyRCorner + wR) / strideHeight;\r\n                            if (dyR < 0 || dyR >= convInfo.outHeight ||\r\n                                Math.floor(dyR) !== dyR) {\r\n                                continue;\r\n                            }\r\n                            for (var wC = 0; wC < filterWidth; ++wC) {\r\n                                var dyC = (dyCCorner + wC) / strideWidth;\r\n                                if (dyC < 0 || dyC >= convInfo.outWidth ||\r\n                                    Math.floor(dyC) !== dyC) {\r\n                                    continue;\r\n                                }\r\n                                var pixel = dy.get(b, dyR, dyC, d);\r\n                                dotProd += pixel;\r\n                            }\r\n                        }\r\n                        dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dx.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.cast = function (x, dtype) {\r\n        return backend_util.castTensor(x, dtype, this);\r\n    };\r\n    MathBackendCPU.prototype.reshape = function (x, shape) {\r\n        return backend_util.reshapeTensor(x, shape);\r\n    };\r\n    MathBackendCPU.prototype.avgPool = function (x, convInfo) {\r\n        return this.pool(x, convInfo, 'avg').toFloat();\r\n    };\r\n    MathBackendCPU.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {\r\n        var _a = x.shape, batch = _a[0], oldHeight = _a[1], oldWidth = _a[2], numChannels = _a[3];\r\n        var output = ops.buffer([batch, newHeight, newWidth, numChannels], x.dtype);\r\n        var effectiveInputSize = [\r\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\r\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\r\n        ];\r\n        var effectiveOutputSize = [\r\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\r\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\r\n        ];\r\n        for (var b = 0; b < batch; b++) {\r\n            for (var r = 0; r < newHeight; r++) {\r\n                for (var c = 0; c < newWidth; c++) {\r\n                    for (var d = 0; d < numChannels; d++) {\r\n                        var sourceFracRow = (effectiveInputSize[0]) * r / (effectiveOutputSize[0]);\r\n                        var sourceFracCol = (effectiveInputSize[1]) * c / (effectiveOutputSize[1]);\r\n                        var sourceRowFloor = Math.floor(sourceFracRow);\r\n                        var sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\r\n                        var sourceColFloor = Math.floor(sourceFracCol);\r\n                        var sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\r\n                        var topLeft = x.get(b, sourceRowFloor, sourceColFloor, d);\r\n                        var bottomLeft = x.get(b, sourceRowCeil, sourceColFloor, d);\r\n                        var topRight = x.get(b, sourceRowFloor, sourceColCeil, d);\r\n                        var bottomRight = x.get(b, sourceRowCeil, sourceColCeil, d);\r\n                        var rowFrac = sourceFracRow - sourceRowFloor;\r\n                        var colFrac = sourceFracCol - sourceColFloor;\r\n                        var top_1 = topLeft + (topRight - topLeft) * colFrac;\r\n                        var bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\r\n                        var newValue = top_1 + (bottom - top_1) * rowFrac;\r\n                        output.set(newValue, b, r, c, d);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return output.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {\r\n        var _a = x.shape, batch = _a[0], xHeight = _a[1], xWidth = _a[2], depth = _a[3];\r\n        var _b = dy.shape, yHeight = _b[1], yWidth = _b[2];\r\n        var output = ops.buffer([batch, xHeight, xWidth, depth], x.dtype);\r\n        var effectiveXSize = [\r\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\r\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\r\n        ];\r\n        var effectiveYSize = [\r\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\r\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\r\n        ];\r\n        var heightScale = effectiveXSize[0] / effectiveYSize[0];\r\n        var widthScale = effectiveXSize[1] / effectiveYSize[1];\r\n        for (var b = 0; b < batch; b++) {\r\n            for (var r = 0; r < yHeight; r++) {\r\n                var dxR = r * heightScale;\r\n                var topDxRIndex = Math.floor(dxR);\r\n                var bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\r\n                var dxRLerp = dxR - topDxRIndex;\r\n                var inverseDxRLerp = 1.0 - dxRLerp;\r\n                for (var c = 0; c < yWidth; c++) {\r\n                    var dxC = c * widthScale;\r\n                    var leftDxCIndex = Math.floor(dxC);\r\n                    var rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\r\n                    var dxCLerp = dxC - leftDxCIndex;\r\n                    var inverseDxCLerp = 1.0 - dxCLerp;\r\n                    for (var d = 0; d < depth; d++) {\r\n                        var dyVal = dy.get(b, r, c, d);\r\n                        var topLeft = output.get(b, topDxRIndex, leftDxCIndex, d);\r\n                        topLeft += dyVal * inverseDxRLerp * inverseDxCLerp;\r\n                        output.set(topLeft, b, topDxRIndex, leftDxCIndex, d);\r\n                        var topRight = output.get(b, topDxRIndex, rightDxCIndex, d);\r\n                        topRight += dyVal * inverseDxRLerp * dxCLerp;\r\n                        output.set(topRight, b, topDxRIndex, rightDxCIndex, d);\r\n                        var bottomLeft = output.get(b, bottomDxRIndex, leftDxCIndex, d);\r\n                        bottomLeft += dyVal * dxRLerp * inverseDxCLerp;\r\n                        output.set(bottomLeft, b, bottomDxRIndex, leftDxCIndex, d);\r\n                        var bottomRight = output.get(b, bottomDxRIndex, rightDxCIndex, d);\r\n                        bottomRight += dyVal * dxRLerp * dxCLerp;\r\n                        output.set(bottomRight, b, bottomDxRIndex, rightDxCIndex, d);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return output.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {\r\n        var _a = x.shape, batch = _a[0], oldHeight = _a[1], oldWidth = _a[2], numChannels = _a[3];\r\n        var output = ops.buffer([batch, newHeight, newWidth, numChannels], x.dtype);\r\n        var effectiveInputSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];\r\n        var effectiveOutputSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];\r\n        for (var b = 0; b < batch; b++) {\r\n            for (var r = 0; r < newHeight; r++) {\r\n                for (var c = 0; c < newWidth; c++) {\r\n                    for (var d = 0; d < numChannels; d++) {\r\n                        var sourceFracRow = (effectiveInputSize[0]) * r / (effectiveOutputSize[0]);\r\n                        var sourceFracCol = (effectiveInputSize[1]) * c / (effectiveOutputSize[1]);\r\n                        var sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) :\r\n                            Math.floor(sourceFracRow));\r\n                        var sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) :\r\n                            Math.floor(sourceFracCol));\r\n                        var newValue = x.get(b, sourceNearestRow, sourceNearestCol, d);\r\n                        output.set(newValue, b, r, c, d);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return output.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {\r\n        var xValues = x.dataSync();\r\n        var meanValues = mean.dataSync();\r\n        var varianceValues = variance.dataSync();\r\n        var scaleValues = scale ? scale.dataSync() : new Float32Array([1]);\r\n        var offsetValues = offset ? offset.dataSync() : new Float32Array([0]);\r\n        var outValues = new Float32Array(xValues.length);\r\n        for (var i = 0; i < xValues.length; i++) {\r\n            outValues[i] = offsetValues[i % offsetValues.length] +\r\n                (xValues[i] - meanValues[i % meanValues.length]) *\r\n                    scaleValues[i % scaleValues.length] /\r\n                    Math.sqrt(varianceValues[i % varianceValues.length] + varianceEpsilon);\r\n        }\r\n        return tensor4d(outValues, x.shape);\r\n    };\r\n    MathBackendCPU.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {\r\n        var output = ops.buffer(x.shape, 'float32');\r\n        var rad = radius;\r\n        var maxD = output.shape[3] - 1;\r\n        function sumAcrossChannels(b, r, c, d) {\r\n            var sum = 0.0;\r\n            for (var j = Math.max(0, d - rad); j <= Math.min(d + rad, maxD); j++) {\r\n                var z = x.get(b, r, c, j);\r\n                sum += z * z;\r\n            }\r\n            return sum;\r\n        }\r\n        for (var b = 0; b < output.shape[0]; b++) {\r\n            for (var r = 0; r <= output.shape[1]; r++) {\r\n                for (var c = 0; c < output.shape[2]; c++) {\r\n                    for (var d = 0; d < output.shape[3]; d++) {\r\n                        var sum = sumAcrossChannels(b, r, c, d);\r\n                        var val = x.get(b, r, c, d) * Math.pow(bias + alpha * sum, -beta);\r\n                        output.set(val, b, r, c, d);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return output.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.multinomial = function (logits, normalized, numSamples, seed) {\r\n        var probabilities = normalized ? logits : ops.softmax(logits);\r\n        var batchSize = probabilities.shape[0];\r\n        var numEvents = probabilities.shape[1];\r\n        var res = ops.zeros([batchSize, numSamples], 'int32');\r\n        var resVals = res.dataSync();\r\n        var probVals = probabilities.dataSync();\r\n        for (var b = 0; b < batchSize; ++b) {\r\n            var offset = b * numEvents;\r\n            var cdf = new Float32Array(numEvents - 1);\r\n            cdf[0] = probVals[offset];\r\n            for (var event_1 = 1; event_1 < cdf.length; ++event_1) {\r\n                cdf[event_1] = cdf[event_1 - 1] + probVals[offset + event_1];\r\n            }\r\n            var random = seedrandom.alea(seed.toString());\r\n            var outOffset = b * numSamples;\r\n            for (var sampleId = 0; sampleId < numSamples; ++sampleId) {\r\n                var r = random();\r\n                resVals[outOffset + sampleId] = cdf.length;\r\n                for (var event_2 = 0; event_2 < cdf.length; event_2++) {\r\n                    if (r < cdf[event_2]) {\r\n                        resVals[outOffset + sampleId] = event_2;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    MathBackendCPU.prototype.oneHot = function (indices, depth, onValue, offValue) {\r\n        var res = new Float32Array(indices.size * depth);\r\n        res.fill(offValue);\r\n        for (var event_3 = 0; event_3 < indices.size; ++event_3) {\r\n            res[event_3 * depth + indices.get(event_3)] = onValue;\r\n        }\r\n        return ops.tensor2d(res, [indices.size, depth]);\r\n    };\r\n    MathBackendCPU.prototype.broadcastedBinaryOp = function (a, b, dtype, op) {\r\n        var newShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\r\n        var result = ops.buffer(newShape, dtype);\r\n        var aValues = a.dataSync();\r\n        var bValues = b.dataSync();\r\n        var aBroadcastDims = broadcast_util.getBroadcastDims(a.shape, newShape);\r\n        var bBroadcastDims = broadcast_util.getBroadcastDims(b.shape, newShape);\r\n        var aBuf = a.buffer();\r\n        var bBuf = b.buffer();\r\n        var _loop_2 = function (i) {\r\n            var loc = result.indexToLoc(i);\r\n            var aLoc = loc.slice(-a.rank);\r\n            aBroadcastDims.forEach(function (d) { return aLoc[d] = 0; });\r\n            var aIndex = aBuf.locToIndex(aLoc);\r\n            var bLoc = loc.slice(-b.rank);\r\n            bBroadcastDims.forEach(function (d) { return bLoc[d] = 0; });\r\n            var bIndex = bBuf.locToIndex(bLoc);\r\n            result.values[i] = op(aValues[aIndex], bValues[bIndex]);\r\n        };\r\n        for (var i = 0; i < result.values.length; ++i) {\r\n            _loop_2(i);\r\n        }\r\n        return result.toTensor();\r\n    };\r\n    MathBackendCPU.prototype.dispose = function () { };\r\n    return MathBackendCPU;\r\n}());\r\nexport { MathBackendCPU };\r\nENV.registerBackend('cpu', function () { return new MathBackendCPU(); }, 1);\r\n//# sourceMappingURL=backend_cpu.js.map","map":"{\"version\":3,\"file\":\"backend_cpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/kernels/backend_cpu.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/backend_cpu.d.ts","text":"import { Conv2DInfo } from '../ops/conv_util';\r\nimport { DataId, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D } from '../tensor';\r\nimport * as types from '../types';\r\nimport { DataType, TypedArray } from '../types';\r\nimport { BackendTimingInfo, KernelBackend } from './backend';\r\nexport declare class MathBackendCPU implements KernelBackend {\r\n    private data;\r\n    private canvas;\r\n    constructor();\r\n    register(dataId: DataId, shape: number[], dtype: DataType): void;\r\n    write(dataId: DataId, values: TypedArray): void;\r\n    fromPixels(pixels: ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, numChannels: number): Tensor3D;\r\n    read(dataId: DataId): Promise<TypedArray>;\r\n    readSync(dataId: DataId): TypedArray;\r\n    disposeData(dataId: DataId): void;\r\n    time(f: () => void): Promise<BackendTimingInfo>;\r\n    memory(): {\r\n        unreliable: boolean;\r\n    };\r\n    private throwIfNoData(dataId);\r\n    slice<T extends Tensor>(x: T, begin: number[], size: number[]): T;\r\n    reverse<T extends Tensor>(x: T, axis: number[]): T;\r\n    concat(a: Tensor2D, b: Tensor2D): Tensor2D;\r\n    neg<T extends Tensor>(x: T): T;\r\n    add(a: Tensor, b: Tensor): Tensor;\r\n    subtract(a: Tensor, b: Tensor): Tensor;\r\n    pow<T extends Tensor>(a: T, b: Tensor): T;\r\n    matMul(a: Tensor2D, b: Tensor2D, transposeA: boolean, transposeB: boolean): Tensor2D;\r\n    multiply(a: Tensor, b: Tensor): Tensor;\r\n    divide(a: Tensor, b: Tensor): Tensor;\r\n    sum(x: Tensor, axes: number[]): Tensor;\r\n    argMin(x: Tensor, axis: number): Tensor;\r\n    argMax(x: Tensor, axis: number): Tensor;\r\n    cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean): Tensor;\r\n    equal(a: Tensor, b: Tensor): Tensor;\r\n    notEqual(a: Tensor, b: Tensor): Tensor;\r\n    less(a: Tensor, b: Tensor): Tensor;\r\n    lessEqual(a: Tensor, b: Tensor): Tensor;\r\n    greater(a: Tensor, b: Tensor): Tensor;\r\n    greaterEqual(a: Tensor, b: Tensor): Tensor;\r\n    logicalNot<T extends Tensor>(x: T): T;\r\n    logicalAnd(a: Tensor, b: Tensor): Tensor;\r\n    logicalOr(a: Tensor, b: Tensor): Tensor;\r\n    where(condition: Tensor, a: Tensor, b: Tensor, dtype: DataType): Tensor;\r\n    topKValues<T extends Tensor>(x: T, k: number): Tensor1D;\r\n    topKIndices(x: Tensor, k: number): Tensor1D;\r\n    private topK<T>(x, k);\r\n    min(x: Tensor, axes: number[]): Tensor;\r\n    minimum(a: Tensor, b: Tensor): Tensor;\r\n    mod(a: Tensor, b: Tensor): Tensor;\r\n    max(x: Tensor, axes: number[]): Tensor;\r\n    maximum(a: Tensor, b: Tensor): Tensor;\r\n    squaredDifference(a: Tensor, b: Tensor): Tensor;\r\n    ceil<T extends Tensor>(x: T): T;\r\n    floor<T extends Tensor>(x: T): T;\r\n    sign<T extends Tensor>(x: T): T;\r\n    round<T extends Tensor>(x: T): T;\r\n    exp<T extends Tensor>(x: T): T;\r\n    expm1<T extends Tensor>(x: T): T;\r\n    log<T extends Tensor>(x: T): T;\r\n    log1p<T extends Tensor>(x: T): T;\r\n    sqrt<T extends Tensor>(x: T): T;\r\n    rsqrt<T extends Tensor>(x: T): T;\r\n    square<T extends Tensor>(x: T): T;\r\n    reciprocal<T extends Tensor>(x: T): T;\r\n    relu<T extends Tensor>(x: T): T;\r\n    elu<T extends Tensor>(x: T): T;\r\n    eluDer<T extends Tensor>(dy: T, y: T): T;\r\n    selu<T extends Tensor>(x: T): T;\r\n    clip<T extends Tensor>(x: T, min: number, max: number): T;\r\n    abs<T extends Tensor>(x: T): T;\r\n    int<T extends Tensor>(x: T): T;\r\n    sigmoid<T extends Tensor>(x: T): T;\r\n    softplus<T extends Tensor>(x: T): T;\r\n    sin<T extends Tensor>(x: T): T;\r\n    cos<T extends Tensor>(x: T): T;\r\n    tan<T extends Tensor>(x: T): T;\r\n    asin<T extends Tensor>(x: T): T;\r\n    acos<T extends Tensor>(x: T): T;\r\n    atan<T extends Tensor>(x: T): T;\r\n    atan2<T extends Tensor>(a: T, b: T): T;\r\n    sinh<T extends Tensor>(x: T): T;\r\n    cosh<T extends Tensor>(x: T): T;\r\n    tanh<T extends Tensor>(x: T): T;\r\n    asinh<T extends Tensor>(x: T): T;\r\n    acosh<T extends Tensor>(x: T): T;\r\n    atanh<T extends Tensor>(x: T): T;\r\n    erf<T extends Tensor>(x: T): T;\r\n    step<T extends Tensor>(x: T, alpha?: number): T;\r\n    conv2d(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo): Tensor4D;\r\n    conv2dDerInput(dy: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo): Tensor4D;\r\n    conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: Conv2DInfo): Tensor4D;\r\n    depthwiseConv2D(x: Tensor4D, filter: Tensor4D, convInfo: Conv2DInfo): Tensor4D;\r\n    tile<T extends Tensor>(x: T, reps: number[]): T;\r\n    pad<T extends Tensor>(x: T, paddings: Array<[number, number]>, constantValue: number): T;\r\n    transpose<T extends Tensor>(x: T, perm: number[]): T;\r\n    gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T;\r\n    private pool(x, convInfo, poolType);\r\n    maxPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D;\r\n    private maxPoolPositions(x, convInfo);\r\n    maxPoolBackprop(dy: Tensor4D, x: Tensor4D, y: Tensor4D, convInfo: Conv2DInfo): Tensor4D;\r\n    avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: Conv2DInfo): Tensor4D;\r\n    cast<T extends Tensor<types.Rank>>(x: T, dtype: DataType): T;\r\n    reshape<T extends Tensor<types.Rank>, R extends types.Rank>(x: T, shape: types.ShapeMap[R]): Tensor<R>;\r\n    avgPool(x: Tensor4D, convInfo: Conv2DInfo): Tensor4D;\r\n    resizeBilinear(x: Tensor4D, newHeight: number, newWidth: number, alignCorners: boolean): Tensor4D;\r\n    resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean): Tensor<types.Rank.R4>;\r\n    resizeNearestNeighbor(x: Tensor4D, newHeight: number, newWidth: number, alignCorners: boolean): Tensor4D;\r\n    batchNormalization(x: Tensor4D, mean: Tensor4D | Tensor1D, variance: Tensor4D | Tensor1D, varianceEpsilon: number, scale?: Tensor4D | Tensor1D, offset?: Tensor4D | Tensor1D): Tensor4D;\r\n    localResponseNormalization4D(x: Tensor4D, radius: number, bias: number, alpha: number, beta: number): Tensor4D;\r\n    multinomial(logits: Tensor2D, normalized: boolean, numSamples: number, seed: number): Tensor2D;\r\n    oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number): Tensor2D;\r\n    private broadcastedBinaryOp(a, b, dtype, op);\r\n    dispose(): void;\r\n}\r\n"}}
