{"code":"import * as tslib_1 from \"tslib\";\r\nimport { doc } from '../doc';\r\nimport { ENV } from '../environment';\r\nimport * as util from '../util';\r\nimport { operation } from './operation';\r\nvar LRNOps = (function () {\r\n    function LRNOps() {\r\n    }\r\n    LRNOps.localResponseNormalization = function (x, radius, bias, alpha, beta) {\r\n        if (radius === void 0) { radius = 5; }\r\n        if (bias === void 0) { bias = 1; }\r\n        if (alpha === void 0) { alpha = 1; }\r\n        if (beta === void 0) { beta = 0.5; }\r\n        util.assertArgumentsAreTensors({ x: x }, 'localResponseNormalization');\r\n        util.assert(x.rank === 4 || x.rank === 3, \"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \" + x.rank + \".\");\r\n        util.assert(util.isInt(radius), \"Error in localResponseNormalization3D: radius must be an integer\\n                     but got radius \" + radius + \".\");\r\n        var x4D = x;\r\n        var reshapedTo4D = false;\r\n        if (x.rank === 3) {\r\n            reshapedTo4D = true;\r\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\r\n        }\r\n        var res = ENV.engine.runKernel(function (backend) { return backend.localResponseNormalization4D(x4D, radius, bias, alpha, beta); }, { x4D: x4D });\r\n        if (reshapedTo4D) {\r\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\r\n        }\r\n        else {\r\n            return res;\r\n        }\r\n    };\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Operations', subheading: 'Normalization' }),\r\n        operation\r\n    ], LRNOps, \"localResponseNormalization\", null);\r\n    return LRNOps;\r\n}());\r\nexport { LRNOps };\r\n//# sourceMappingURL=lrn.js.map","map":"{\"version\":3,\"file\":\"lrn.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/ops/lrn.ts\"],\"names\":[],\"mappings\":\";AAiBA,OAAO,EAAC,GAAG,EAAC,MAAM,QAAQ,CAAC;AAC3B,OAAO,EAAC,GAAG,EAAC,MAAM,gBAAgB,CAAC;AAEnC,OAAO,KAAK,IAAI,MAAM,SAAS,CAAC;AAChC,OAAO,EAAC,SAAS,EAAC,MAAM,aAAa,CAAC;AAEtC;IAAA;IA6CA,CAAC;IA5BQ,iCAA0B,GAAjC,UACI,CAAI,EAAE,MAAU,EAAE,IAAQ,EAAE,KAAS,EAAE,IAAU;QAA3C,uBAAA,EAAA,UAAU;QAAE,qBAAA,EAAA,QAAQ;QAAE,sBAAA,EAAA,SAAS;QAAE,qBAAA,EAAA,UAAU;QACnD,IAAI,CAAC,yBAAyB,CAAC,EAAC,CAAC,GAAA,EAAC,EAAE,4BAA4B,CAAC,CAAC;QAClE,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,EAC5B,6FACc,CAAC,CAAC,IAAI,MAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,MAAM,CACP,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAClB,2GAC8B,MAAM,MAAG,CAAC,CAAC;QAE7C,IAAI,GAAG,GAAG,CAAa,CAAC;QACxB,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,YAAY,GAAG,IAAI,CAAC;YACpB,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC;QACD,IAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAC5B,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,4BAA4B,CAC3C,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,EADxB,CACwB,EACnC,EAAC,GAAG,KAAA,EAAC,CAAC,CAAC;QACX,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAM,CAAC;QACjE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,GAAQ,CAAC;QAClB,CAAC;IACH,CAAC;IA3BD;QAFC,GAAG,CAAC,EAAC,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,eAAe,EAAC,CAAC;QACzD,SAAS;kDA4BT;IACH,aAAC;CAAA,AA7CD,IA6CC;SA7CY,MAAM\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/ops/lrn.d.ts","text":"import { Tensor3D, Tensor4D } from '../tensor';\r\nexport declare class LRNOps {\r\n    static localResponseNormalization<T extends Tensor3D | Tensor4D>(x: T, radius?: number, bias?: number, alpha?: number, beta?: number): T;\r\n}\r\n"}}
