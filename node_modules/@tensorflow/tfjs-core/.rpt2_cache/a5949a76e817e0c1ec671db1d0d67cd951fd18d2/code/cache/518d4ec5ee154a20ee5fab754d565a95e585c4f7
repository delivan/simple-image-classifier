{"code":"import * as util from './util';\r\nvar FORMAT_LIMIT_NUM_VALS = 20;\r\nvar FORMAT_NUM_FIRST_LAST_VALS = 3;\r\nvar FORMAT_NUM_SIG_DIGITS = 7;\r\nexport function tensorToString(t, verbose) {\r\n    var vals = t.dataSync();\r\n    var padPerCol = computeMaxSizePerColumn(t);\r\n    var valsLines = subTensorToString(vals, t.shape, t.strides, padPerCol);\r\n    var lines = ['Tensor'];\r\n    if (verbose) {\r\n        lines.push(\"  dtype: \" + t.dtype);\r\n        lines.push(\"  rank: \" + t.rank);\r\n        lines.push(\"  shape: [\" + t.shape + \"]\");\r\n        lines.push(\"  values:\");\r\n    }\r\n    lines.push(valsLines.map(function (l) { return '    ' + l; }).join('\\n'));\r\n    return lines.join('\\n');\r\n}\r\nfunction computeMaxSizePerColumn(t) {\r\n    var vals = t.dataSync();\r\n    var n = t.size;\r\n    var numCols = t.strides[t.strides.length - 1];\r\n    var padPerCol = new Array(numCols).fill(0);\r\n    if (t.rank > 1) {\r\n        for (var row = 0; row < n / numCols; row++) {\r\n            var offset = row * numCols;\r\n            for (var j = 0; j < numCols; j++) {\r\n                padPerCol[j] =\r\n                    Math.max(padPerCol[j], valToString(vals[offset + j], 0).length);\r\n            }\r\n        }\r\n    }\r\n    return padPerCol;\r\n}\r\nfunction valToString(val, pad) {\r\n    return util.rightPad(parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(), pad);\r\n}\r\nfunction subTensorToString(vals, shape, strides, padPerCol, isLast) {\r\n    if (isLast === void 0) { isLast = true; }\r\n    var size = shape[0];\r\n    var rank = shape.length;\r\n    if (rank === 0) {\r\n        return [vals[0].toString()];\r\n    }\r\n    if (rank === 1) {\r\n        if (size > FORMAT_LIMIT_NUM_VALS) {\r\n            var firstVals = Array.from(vals.subarray(0, FORMAT_NUM_FIRST_LAST_VALS));\r\n            var lastVals = Array.from(vals.subarray(size - FORMAT_NUM_FIRST_LAST_VALS, size));\r\n            return [\r\n                '[' + firstVals.map(function (x, i) { return valToString(x, padPerCol[i]); }).join(', ') +\r\n                    ', ..., ' +\r\n                    lastVals\r\n                        .map(function (x, i) { return valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i]); })\r\n                        .join(', ') +\r\n                    ']'\r\n            ];\r\n        }\r\n        return [\r\n            '[' +\r\n                Array.from(vals).map(function (x, i) { return valToString(x, padPerCol[i]); }).join(', ') +\r\n                ']'\r\n        ];\r\n    }\r\n    var subshape = shape.slice(1);\r\n    var substrides = strides.slice(1);\r\n    var stride = strides[0];\r\n    var lines = [];\r\n    if (size > FORMAT_LIMIT_NUM_VALS) {\r\n        for (var i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\r\n            var start = i * stride;\r\n            var end = start + stride;\r\n            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, false));\r\n        }\r\n        lines.push('...');\r\n        for (var i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\r\n            var start = i * stride;\r\n            var end = start + stride;\r\n            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, i === size - 1));\r\n        }\r\n    }\r\n    else {\r\n        for (var i = 0; i < size; i++) {\r\n            var start = i * stride;\r\n            var end = start + stride;\r\n            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, i === size - 1));\r\n        }\r\n    }\r\n    var sep = rank === 2 ? ',' : '';\r\n    lines[0] = '[' + lines[0] + sep;\r\n    for (var i = 1; i < lines.length - 1; i++) {\r\n        lines[i] = ' ' + lines[i] + sep;\r\n    }\r\n    var newLineSep = ',\\n';\r\n    for (var i = 2; i < rank; i++) {\r\n        newLineSep += '\\n';\r\n    }\r\n    lines[lines.length - 1] =\r\n        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\r\n    return lines;\r\n}\r\n//# sourceMappingURL=tensor_util.js.map","map":"{\"version\":3,\"file\":\"tensor_util.js\",\"sourceRoot\":\"\",\"sources\":[\"src/tensor_util.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/tensor_util.d.ts","text":"import { Tensor } from './tensor';\r\nexport declare function tensorToString(t: Tensor, verbose: boolean): string;\r\n"}}
