{"code":"var ResizeNearestNeighborProgram = (function () {\r\n    function ResizeNearestNeighborProgram(inputShape, newHeight, newWidth, alignCorners) {\r\n        this.variableNames = ['A'];\r\n        this.outputShape = [];\r\n        var batch = inputShape[0], oldHeight = inputShape[1], oldWidth = inputShape[2], depth = inputShape[3];\r\n        this.outputShape = [batch, newHeight, newWidth, depth];\r\n        var effectiveInSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];\r\n        var effectiveOutSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];\r\n        var roundBase = alignCorners ? '0.5' : '0.0';\r\n        this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \" + effectiveInSize[0] / effectiveOutSize[0] + \",\\n          \" + effectiveInSize[1] / effectiveOutSize[1] + \");\\n      const vec2 inputShapeRC = vec2(\" + oldHeight + \".0, \" + oldWidth + \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + \" + roundBase + \")));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \";\r\n    }\r\n    return ResizeNearestNeighborProgram;\r\n}());\r\nexport { ResizeNearestNeighborProgram };\r\n//# sourceMappingURL=resize_nearest_neighbor_gpu.js.map","map":"{\"version\":3,\"file\":\"resize_nearest_neighbor_gpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/resize_nearest_neighbor_gpu.ts\"],\"names\":[],\"mappings\":\"AAmBA;IAKE,sCACI,UAA4C,EAAE,SAAiB,EAC/D,QAAgB,EAAE,YAAqB;QAN3C,kBAAa,GAAG,CAAC,GAAG,CAAC,CAAC;QACtB,gBAAW,GAAa,EAAE,CAAC;QAMlB,IAAA,qBAAK,EAAE,yBAAS,EAAE,wBAAQ,EAAE,qBAAK,CAAe;QACvD,IAAI,CAAC,WAAW,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAEvD,IAAM,eAAe,GACjB,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAEzE,IAAM,gBAAgB,GAClB,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAGzE,IAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;QAE/C,IAAI,CAAC,QAAQ,GAAG,2EAER,eAAe,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,qBACxC,eAAe,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,iDACb,SAAS,YAAO,QAAQ,ocAaD,SAAS,sIAMlE,CAAC;IACJ,CAAC;IACH,mCAAC;AAAD,CAAC,AA7CD,IA6CC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/resize_nearest_neighbor_gpu.d.ts","text":"import { GPGPUProgram } from './gpgpu_math';\r\nexport declare class ResizeNearestNeighborProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    outputShape: number[];\r\n    userCode: string;\r\n    constructor(inputShape: [number, number, number, number], newHeight: number, newWidth: number, alignCorners: boolean);\r\n}\r\n"}}
