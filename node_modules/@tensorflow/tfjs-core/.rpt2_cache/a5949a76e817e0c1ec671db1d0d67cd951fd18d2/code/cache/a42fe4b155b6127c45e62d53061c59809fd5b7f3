{"code":"import * as tslib_1 from \"tslib\";\r\nimport { doc } from '../doc';\r\nimport { ENV } from '../environment';\r\nimport * as util from '../util';\r\nimport { ArrayOps } from './array_ops';\r\nimport { getReductionAxes } from './broadcast_util';\r\nimport { operation } from './operation';\r\nimport { rsqrt } from './ops';\r\nvar BatchNormOps = (function () {\r\n    function BatchNormOps() {\r\n    }\r\n    BatchNormOps.batchNormalization2d = function (x, mean, variance, varianceEpsilon, scale, offset) {\r\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\r\n        util.assert(x.rank === 2, \"Error in batchNormalization3D: x must be rank 3 but got rank \" +\r\n            (x.rank + \".\"));\r\n        util.assert(mean.rank === 2 || mean.rank === 1, \"Error in batchNormalization2D: mean must be rank 2 or rank 1 but \" +\r\n            (\"got rank \" + mean.rank + \".\"));\r\n        util.assert(variance.rank === 2 || variance.rank === 1, \"Error in batchNormalization2D: variance must be rank 2 or rank 1 \" +\r\n            (\"but got rank \" + variance.rank + \".\"));\r\n        if (scale != null) {\r\n            util.assert(scale.rank === 2 || scale.rank === 1, \"Error in batchNormalization2D: scale must be rank 2 or rank 1 \" +\r\n                (\"but got rank \" + scale.rank + \".\"));\r\n        }\r\n        if (offset != null) {\r\n            util.assert(offset.rank === 2 || offset.rank === 1, \"Error in batchNormalization2D: offset must be rank 2 or rank 1 \" +\r\n                (\"but got rank \" + offset.rank + \".\"));\r\n        }\r\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\r\n    };\r\n    BatchNormOps.batchNormalization3d = function (x, mean, variance, varianceEpsilon, scale, offset) {\r\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\r\n        util.assert(x.rank === 3, \"Error in batchNormalization3D: x must be rank 3 but got rank \" +\r\n            (x.rank + \".\"));\r\n        util.assert(mean.rank === 3 || mean.rank === 1, \"Error in batchNormalization3D: mean must be rank 3 or rank 1 but \" +\r\n            (\"got rank \" + mean.rank + \".\"));\r\n        util.assert(variance.rank === 3 || variance.rank === 1, \"Error in batchNormalization3D: variance must be rank 3 or rank 1 \" +\r\n            (\"but got rank \" + variance.rank + \".\"));\r\n        if (scale != null) {\r\n            util.assert(scale.rank === 3 || scale.rank === 1, \"Error in batchNormalization3D: scale must be rank 3 or rank 1 \" +\r\n                (\"but got rank \" + scale.rank + \".\"));\r\n        }\r\n        if (offset != null) {\r\n            util.assert(offset.rank === 3 || offset.rank === 1, \"Error in batchNormalization3D: offset must be rank 3 or rank 1 \" +\r\n                (\"but got rank \" + offset.rank + \".\"));\r\n        }\r\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\r\n    };\r\n    BatchNormOps.batchNormalization4d = function (x, mean, variance, varianceEpsilon, scale, offset) {\r\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\r\n        util.assert(x.rank === 4, \"Error in batchNormalization4D: x must be rank 4 but got rank \" +\r\n            (x.rank + \".\"));\r\n        util.assert(mean.rank === 4 || mean.rank === 1, \"Error in batchNormalization4D: mean must be rank 4 or rank 1 but \" +\r\n            (\"got rank \" + mean.rank + \".\"));\r\n        util.assert(variance.rank === 4 || variance.rank === 1, \"Error in batchNormalization4D: variance must be rank 4 or rank 1 \" +\r\n            (\"but got rank \" + variance.rank + \".\"));\r\n        if (scale != null) {\r\n            util.assert(scale.rank === 4 || scale.rank === 1, \"Error in batchNormalization4D: scale must be rank 4 or rank 1 \" +\r\n                (\"but got rank \" + scale.rank + \".\"));\r\n        }\r\n        if (offset != null) {\r\n            util.assert(offset.rank === 4 || offset.rank === 1, \"Error in batchNormalization4D: offset must be rank 4 or rank 1 \" +\r\n                (\"but got rank \" + offset.rank + \".\"));\r\n        }\r\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\r\n    };\r\n    BatchNormOps.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {\r\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\r\n        util.assertArgumentsAreTensors({ x: x, mean: mean, variance: variance }, 'batchNormalization');\r\n        if (scale != null) {\r\n            util.assertArgumentsAreTensors({ scale: scale }, 'batchNormalization');\r\n        }\r\n        if (offset != null) {\r\n            util.assertArgumentsAreTensors({ offset: offset }, 'batchNormalization');\r\n        }\r\n        util.assert(mean.rank === variance.rank, 'Batch normalization gradient requires mean and variance to have ' +\r\n            'equal ranks.');\r\n        util.assert(offset == null || mean.rank === offset.rank, 'Batch normalization gradient requires mean and offset to have ' +\r\n            'equal ranks.');\r\n        util.assert(scale == null || mean.rank === scale.rank, 'Batch normalization gradient requires mean and scale to have ' +\r\n            'equal ranks.');\r\n        var x4D;\r\n        if (x.rank === 0 || x.rank === 1) {\r\n            x4D = x.as4D(1, 1, 1, x.size);\r\n        }\r\n        else if (x.rank === 2) {\r\n            x4D = x.as4D(1, 1, x.shape[0], x.shape[1]);\r\n        }\r\n        else if (x.rank === 3) {\r\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\r\n        }\r\n        else {\r\n            x4D = x;\r\n        }\r\n        var der = function (dy) {\r\n            var scaleValue = scale == null ? ArrayOps.scalar(1) : scale;\r\n            var reductionAxes = getReductionAxes(mean.shape, x4D.shape);\r\n            var tileShape = [];\r\n            if (mean.rank === 1) {\r\n                for (var i = 0; i < x4D.shape.length - 1; ++i) {\r\n                    tileShape.push(x4D.shape[i]);\r\n                }\r\n                tileShape.push(1);\r\n            }\r\n            var xMinusMean = x.sub(mean);\r\n            var dyTimesScaleValue = dy.mul(scaleValue);\r\n            var oneOverSqrtVariance = rsqrt(variance.add(ArrayOps.scalar(varianceEpsilon)));\r\n            var minusHalfRCube = oneOverSqrtVariance.mul(oneOverSqrtVariance)\r\n                .mul(oneOverSqrtVariance)\r\n                .mul(ArrayOps.scalar(-0.5));\r\n            var derX = function () {\r\n                if (mean.rank === 1) {\r\n                    return dy\r\n                        .mul(ArrayOps.tile(oneOverSqrtVariance.as4D(1, 1, 1, mean.shape[0]), tileShape))\r\n                        .mul(scaleValue)\r\n                        .reshape(x.shape);\r\n                }\r\n                else {\r\n                    return dy.mul(oneOverSqrtVariance).mul(scaleValue).reshape(x.shape);\r\n                }\r\n            };\r\n            var derMean = function () {\r\n                var meanDer = oneOverSqrtVariance.mul(ArrayOps.scalar(-1)).mul(dyTimesScaleValue);\r\n                if (mean.rank === 1) {\r\n                    meanDer = meanDer.sum(reductionAxes);\r\n                }\r\n                return meanDer.reshape(mean.shape);\r\n            };\r\n            var derVariance = function () {\r\n                var varianceDer = minusHalfRCube.mul(xMinusMean).mul(dyTimesScaleValue);\r\n                if (mean.rank === 1) {\r\n                    varianceDer = varianceDer.sum(reductionAxes);\r\n                }\r\n                return varianceDer.reshape(mean.shape);\r\n            };\r\n            var derScale = function () {\r\n                var xMinusMean2TimesRsqrt = xMinusMean.mul(oneOverSqrtVariance);\r\n                var scaleDer = dy.mul(xMinusMean2TimesRsqrt);\r\n                if (mean.rank === 1) {\r\n                    scaleDer = scaleDer.sum(reductionAxes);\r\n                }\r\n                return scaleDer.reshape(mean.shape);\r\n            };\r\n            var derOffset = function () {\r\n                var offsetDer = dy;\r\n                if (mean.rank === 1) {\r\n                    offsetDer = offsetDer.sum(reductionAxes);\r\n                }\r\n                return offsetDer.reshape(mean.shape);\r\n            };\r\n            return {\r\n                x: derX,\r\n                mean: derMean,\r\n                variance: derVariance,\r\n                scale: derScale,\r\n                offset: derOffset\r\n            };\r\n        };\r\n        var res = ENV.engine.runKernel(function (backend) { return backend.batchNormalization(x4D, batchnormReshape4D(mean), batchnormReshape4D(variance), varianceEpsilon, batchnormReshape4D(scale), batchnormReshape4D(offset)); }, { x: x, mean: mean, variance: variance, scale: scale, offset: offset }, der);\r\n        return res.reshape(x.shape);\r\n    };\r\n    tslib_1.__decorate([\r\n        operation\r\n    ], BatchNormOps, \"batchNormalization2d\", null);\r\n    tslib_1.__decorate([\r\n        operation\r\n    ], BatchNormOps, \"batchNormalization3d\", null);\r\n    tslib_1.__decorate([\r\n        operation\r\n    ], BatchNormOps, \"batchNormalization4d\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Operations', subheading: 'Normalization' })\r\n    ], BatchNormOps, \"batchNormalization\", null);\r\n    return BatchNormOps;\r\n}());\r\nexport { BatchNormOps };\r\nfunction batchnormReshape4D(x) {\r\n    if (x == null) {\r\n        return null;\r\n    }\r\n    if (x.rank === 0) {\r\n        return x.as1D();\r\n    }\r\n    else if (x.rank === 1) {\r\n        return x;\r\n    }\r\n    else if (x.rank === 2) {\r\n        return x.as4D(1, 1, x.shape[0], x.shape[1]);\r\n    }\r\n    else if (x.rank === 3) {\r\n        return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\r\n    }\r\n    return x;\r\n}\r\n//# sourceMappingURL=batchnorm.js.map","map":"{\"version\":3,\"file\":\"batchnorm.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/ops/batchnorm.ts\"],\"names\":[],\"mappings\":\";AAiBA,OAAO,EAAC,GAAG,EAAC,MAAM,QAAQ,CAAC;AAC3B,OAAO,EAAC,GAAG,EAAC,MAAM,gBAAgB,CAAC;AAGnC,OAAO,KAAK,IAAI,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAC,QAAQ,EAAC,MAAM,aAAa,CAAC;AACrC,OAAO,EAAC,gBAAgB,EAAC,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAC,SAAS,EAAC,MAAM,aAAa,CAAC;AACtC,OAAO,EAAC,KAAK,EAAC,MAAM,OAAO,CAAC;AAE5B;IAAA;IA2QA,CAAC;IA9PQ,iCAAoB,GAA3B,UACI,CAAW,EAAE,IAAuB,EAAE,QAA2B,EACjE,eAAsB,EAAE,KAAyB,EACjD,MAA0B;QAD1B,gCAAA,EAAA,sBAAsB;QAExB,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,IAAI,KAAK,CAAC,EACZ,+DAA+D;aACxD,CAAC,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QACtB,IAAI,CAAC,MAAM,CACP,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAClC,mEAAmE;aAC/D,cAAY,IAAI,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,IAAI,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAC1C,mEAAmE;aAC/D,kBAAgB,QAAQ,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,MAAM,CACP,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,EACpC,gEAAgE;iBAC5D,kBAAgB,KAAK,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QACzC,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,CACP,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,EACtC,iEAAiE;iBAC7D,kBAAgB,MAAM,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAClC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACzD,CAAC;IAcM,iCAAoB,GAA3B,UACI,CAAW,EAAE,IAAuB,EAAE,QAA2B,EACjE,eAAsB,EAAE,KAAyB,EACjD,MAA0B;QAD1B,gCAAA,EAAA,sBAAsB;QAExB,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,IAAI,KAAK,CAAC,EACZ,+DAA+D;aACxD,CAAC,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QACtB,IAAI,CAAC,MAAM,CACP,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAClC,mEAAmE;aAC/D,cAAY,IAAI,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,IAAI,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAC1C,mEAAmE;aAC/D,kBAAgB,QAAQ,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,MAAM,CACP,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,EACpC,gEAAgE;iBAC5D,kBAAgB,KAAK,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QACzC,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,CACP,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,EACtC,iEAAiE;iBAC7D,kBAAgB,MAAM,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAClC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACzD,CAAC;IAcM,iCAAoB,GAA3B,UACI,CAAW,EAAE,IAAuB,EAAE,QAA2B,EACjE,eAAsB,EAAE,KAAyB,EACjD,MAA0B;QAD1B,gCAAA,EAAA,sBAAsB;QAExB,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,IAAI,KAAK,CAAC,EACZ,+DAA+D;aACxD,CAAC,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QACtB,IAAI,CAAC,MAAM,CACP,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAClC,mEAAmE;aAC/D,cAAY,IAAI,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,IAAI,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAC1C,mEAAmE;aAC/D,kBAAgB,QAAQ,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,MAAM,CACP,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,EACpC,gEAAgE;iBAC5D,kBAAgB,KAAK,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QACzC,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,CACP,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,EACtC,iEAAiE;iBAC7D,kBAAgB,MAAM,CAAC,IAAI,MAAG,CAAA,CAAC,CAAC;QAC1C,CAAC;QACD,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAClC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACzD,CAAC;IAsBM,+BAAkB,GAAzB,UACI,CAAY,EAAE,IAAwB,EAAE,QAA4B,EACpE,eAAsB,EAAE,KAA0B,EAClD,MAA2B;QAD3B,gCAAA,EAAA,sBAAsB;QAExB,IAAI,CAAC,yBAAyB,CAAC,EAAC,CAAC,GAAA,EAAE,IAAI,MAAA,EAAE,QAAQ,UAAA,EAAC,EAAE,oBAAoB,CAAC,CAAC;QAC1E,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,yBAAyB,CAAC,EAAC,KAAK,OAAA,EAAC,EAAE,oBAAoB,CAAC,CAAC;QAChE,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,yBAAyB,CAAC,EAAC,MAAM,QAAA,EAAC,EAAE,oBAAoB,CAAC,CAAC;QACjE,CAAC;QAED,IAAI,CAAC,MAAM,CACP,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,EAC3B,kEAAkE;YAC9D,cAAc,CAAC,CAAC;QACxB,IAAI,CAAC,MAAM,CACP,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAC3C,gEAAgE;YAC5D,cAAc,CAAC,CAAC;QACxB,IAAI,CAAC,MAAM,CACP,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EACzC,+DAA+D;YAC3D,cAAc,CAAC,CAAC;QAExB,IAAI,GAAa,CAAC;QAClB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACjC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACxB,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACxB,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAa,CAAC;QAClE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,GAAG,GAAG,CAAa,CAAC;QACtB,CAAC;QAED,IAAM,GAAG,GAAG,UAAC,EAAU;YACrB,IAAM,UAAU,GAAG,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAC9D,IAAM,aAAa,GAAG,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;YAC9D,IAAM,SAAS,GAAa,EAAE,CAAC;YAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;oBAC9C,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/B,CAAC;gBACD,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,CAAC;YAED,IAAM,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAM,iBAAiB,GAAG,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC7C,IAAM,mBAAmB,GACrB,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAM,cAAc,GAAG,mBAAmB,CAAC,GAAG,CAAC,mBAAmB,CAAC;iBACvC,GAAG,CAAC,mBAAmB,CAAC;iBACxB,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACvD,IAAM,IAAI,GAAG;gBACX,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,EAAE;yBACJ,GAAG,CAAC,QAAQ,CAAC,IAAI,CACd,mBAAmB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;yBAChE,GAAG,CAAC,UAAU,CAAC;yBACf,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBACxB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBACtE,CAAC;YACH,CAAC,CAAC;YACF,IAAM,OAAO,GAAG;gBACd,IAAI,OAAO,GACP,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBACvC,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC,CAAC;YACF,IAAM,WAAW,GAAG;gBAClB,IAAI,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBAC/C,CAAC;gBACD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,CAAC,CAAC;YACF,IAAM,QAAQ,GAAG;gBACf,IAAM,qBAAqB,GAAG,UAAU,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;gBAClE,IAAI,QAAQ,GAAG,EAAE,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;gBAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBACzC,CAAC;gBACD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtC,CAAC,CAAC;YACF,IAAM,SAAS,GAAG;gBAChB,IAAI,SAAS,GAAG,EAAE,CAAC;gBACnB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBAC3C,CAAC;gBACD,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC;YACF,MAAM,CAAC;gBACL,CAAC,EAAE,IAAI;gBACP,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,WAAW;gBACrB,KAAK,EAAE,QAAQ;gBACf,MAAM,EAAE,SAAS;aAClB,CAAC;QACJ,CAAC,CAAC;QAEF,IAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAC5B,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,kBAAkB,CACjC,GAAG,EAAE,kBAAkB,CAAC,IAAI,CAAC,EAAE,kBAAkB,CAAC,QAAQ,CAAC,EAC3D,eAAe,EAAE,kBAAkB,CAAC,KAAK,CAAC,EAC1C,kBAAkB,CAAC,MAAM,CAAC,CAAC,EAHpB,CAGoB,EAC/B,EAAC,CAAC,GAAA,EAAE,IAAI,MAAA,EAAE,QAAQ,UAAA,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAC,EAAE,GAAG,CAAC,CAAC;QAC7C,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IA7PD;QADC,SAAS;kDAgCT;IAcD;QADC,SAAS;kDAgCT;IAcD;QADC,SAAS;kDA+BT;IAsBD;QADC,GAAG,CAAC,EAAC,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,eAAe,EAAC,CAAC;gDAgHzD;IACH,mBAAC;CAAA,AA3QD,IA2QC;SA3QY,YAAY;AA6QzB,4BAA4B,CAAS;IACnC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;QACd,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QACjB,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAClB,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,CAAa,CAAC;IACvB,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC;IACD,MAAM,CAAC,CAAa,CAAC;AACvB,CAAC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/ops/batchnorm.d.ts","text":"import { Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D } from '../tensor';\r\nimport { Rank } from '../types';\r\nexport declare class BatchNormOps {\r\n    static batchNormalization2d(x: Tensor2D, mean: Tensor2D | Tensor1D, variance: Tensor2D | Tensor1D, varianceEpsilon?: number, scale?: Tensor2D | Tensor1D, offset?: Tensor2D | Tensor1D): Tensor2D;\r\n    static batchNormalization3d(x: Tensor3D, mean: Tensor3D | Tensor1D, variance: Tensor3D | Tensor1D, varianceEpsilon?: number, scale?: Tensor3D | Tensor1D, offset?: Tensor3D | Tensor1D): Tensor3D;\r\n    static batchNormalization4d(x: Tensor4D, mean: Tensor4D | Tensor1D, variance: Tensor4D | Tensor1D, varianceEpsilon?: number, scale?: Tensor4D | Tensor1D, offset?: Tensor4D | Tensor1D): Tensor4D;\r\n    static batchNormalization<R extends Rank>(x: Tensor<R>, mean: Tensor<R> | Tensor1D, variance: Tensor<R> | Tensor1D, varianceEpsilon?: number, scale?: Tensor<R> | Tensor1D, offset?: Tensor<R> | Tensor1D): Tensor<R>;\r\n}\r\n"}}
