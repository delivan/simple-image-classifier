{"code":"import * as broadcast_util from '../../ops/broadcast_util';\r\nvar BatchNormProgram = (function () {\r\n    function BatchNormProgram(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\r\n        this.outputShape = [];\r\n        this.supportsBroadcasting = true;\r\n        this.variableNames = ['x', 'mean', 'variance'];\r\n        broadcast_util.assertAndGetBroadcastShape(xShape, meanShape);\r\n        broadcast_util.assertAndGetBroadcastShape(xShape, varianceShape);\r\n        var offsetSnippet = '0.0';\r\n        if (offsetShape != null) {\r\n            broadcast_util.assertAndGetBroadcastShape(xShape, offsetShape);\r\n            this.variableNames.push('offset');\r\n            offsetSnippet = 'getOffsetAtOutCoords()';\r\n        }\r\n        var scaleSnippet = '1.0';\r\n        if (scaleShape != null) {\r\n            broadcast_util.assertAndGetBroadcastShape(xShape, scaleShape);\r\n            this.variableNames.push('scale');\r\n            scaleSnippet = 'getScaleAtOutCoords()';\r\n        }\r\n        this.outputShape = xShape;\r\n        this.userCode = \"\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = \" + offsetSnippet + \";\\n        float scale = \" + scaleSnippet + \";\\n        float inv = scale * inversesqrt(variance + float(\" + varianceEpsilon + \"));\\n        setOutput((x - mean) * inv + offset);\\n      }\\n    \";\r\n    }\r\n    return BatchNormProgram;\r\n}());\r\nexport { BatchNormProgram };\r\n//# sourceMappingURL=batchnorm_gpu.js.map","map":"{\"version\":3,\"file\":\"batchnorm_gpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/batchnorm_gpu.ts\"],\"names\":[],\"mappings\":\"AAiBA,OAAO,KAAK,cAAc,MAAM,0BAA0B,CAAC;AAG3D;IAME,0BACI,MAAgB,EAAE,SAAmB,EAAE,aAAuB,EAC9D,WAA0B,EAAE,UAAyB,EACrD,eAAuB;QAP3B,gBAAW,GAAa,EAAE,CAAC;QAE3B,yBAAoB,GAAG,IAAI,CAAC;QAM1B,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QAC/C,cAAc,CAAC,0BAA0B,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAC7D,cAAc,CAAC,0BAA0B,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAEjE,IAAI,aAAa,GAAG,KAAK,CAAC;QAC1B,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,cAAc,CAAC,0BAA0B,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YAC/D,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAClC,aAAa,GAAG,wBAAwB,CAAC;QAC3C,CAAC;QAED,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;YACvB,cAAc,CAAC,0BAA0B,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YAC9D,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACjC,YAAY,GAAG,uBAAuB,CAAC;QACzC,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,yLAKK,aAAa,iCACd,YAAY,oEACuB,eAAe,sEAGrE,CAAC;IACJ,CAAC;IACH,uBAAC;AAAD,CAAC,AAzCD,IAyCC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/batchnorm_gpu.d.ts","text":"import { GPGPUProgram } from './gpgpu_math';\r\nexport declare class BatchNormProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    outputShape: number[];\r\n    userCode: string;\r\n    supportsBroadcasting: boolean;\r\n    constructor(xShape: number[], meanShape: number[], varianceShape: number[], offsetShape: number[] | null, scaleShape: number[] | null, varianceEpsilon: number);\r\n}\r\n"}}
