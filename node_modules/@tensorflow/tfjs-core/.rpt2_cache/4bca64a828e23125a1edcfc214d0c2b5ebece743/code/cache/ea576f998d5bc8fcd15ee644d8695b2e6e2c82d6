{"code":"import * as tslib_1 from \"tslib\";\r\nimport { ENV } from '../environment';\r\nimport { keep, tidy } from '../globals';\r\nimport { fill, scalar } from '../ops/ops';\r\nimport { SerializationMap } from '../serialization';\r\nimport { Optimizer } from './optimizer';\r\nvar AdagradOptimizer = (function (_super) {\r\n    tslib_1.__extends(AdagradOptimizer, _super);\r\n    function AdagradOptimizer(learningRate, initialAccumulatorValue) {\r\n        if (initialAccumulatorValue === void 0) { initialAccumulatorValue = 0.1; }\r\n        var _this = _super.call(this) || this;\r\n        _this.learningRate = learningRate;\r\n        _this.initialAccumulatorValue = initialAccumulatorValue;\r\n        _this.accumulatedGrads = {};\r\n        _this.c = keep(scalar(-learningRate));\r\n        _this.epsilon = keep(scalar(1e-8));\r\n        return _this;\r\n    }\r\n    AdagradOptimizer.prototype.applyGradients = function (variableGradients) {\r\n        var _this = this;\r\n        var _loop_1 = function (variableName) {\r\n            var value = ENV.engine.registeredVariables[variableName];\r\n            if (this_1.accumulatedGrads[variableName] == null) {\r\n                var trainable_1 = false;\r\n                tidy(function () {\r\n                    _this.accumulatedGrads[variableName] =\r\n                        fill(value.shape, _this.initialAccumulatorValue)\r\n                            .variable(trainable_1);\r\n                });\r\n            }\r\n            var gradient = variableGradients[variableName];\r\n            var accumulatedGrad = this_1.accumulatedGrads[variableName];\r\n            tidy(function () {\r\n                var newAccumulatedGrad = accumulatedGrad.add(gradient.square());\r\n                _this.accumulatedGrads[variableName].assign(newAccumulatedGrad);\r\n                var newValue = _this.c\r\n                    .mul(gradient.div(newAccumulatedGrad.add(_this.epsilon).sqrt()))\r\n                    .add(value);\r\n                value.assign(newValue);\r\n            });\r\n        };\r\n        var this_1 = this;\r\n        for (var variableName in variableGradients) {\r\n            _loop_1(variableName);\r\n        }\r\n    };\r\n    AdagradOptimizer.prototype.dispose = function () {\r\n        var _this = this;\r\n        this.epsilon.dispose();\r\n        this.c.dispose();\r\n        if (this.accumulatedGrads != null) {\r\n            Object.keys(this.accumulatedGrads)\r\n                .forEach(function (name) { return _this.accumulatedGrads[name].dispose(); });\r\n        }\r\n    };\r\n    AdagradOptimizer.prototype.getConfig = function () {\r\n        return {\r\n            learningRate: this.learningRate,\r\n            initialAccumulatorValue: this.initialAccumulatorValue,\r\n        };\r\n    };\r\n    AdagradOptimizer.fromConfig = function (cls, config) {\r\n        return new cls(config.learningRate, config.initialAccumulatorValue);\r\n    };\r\n    AdagradOptimizer.className = 'AdagradOptimizer';\r\n    return AdagradOptimizer;\r\n}(Optimizer));\r\nexport { AdagradOptimizer };\r\nSerializationMap.register(AdagradOptimizer);\r\n//# sourceMappingURL=adagrad_optimizer.js.map","map":"{\"version\":3,\"file\":\"adagrad_optimizer.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/optimizers/adagrad_optimizer.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/optimizers/adagrad_optimizer.d.ts","text":"import { ConfigDict, Serializable, SerializableConstructor } from '../serialization';\r\nimport { NamedVariableMap } from '../types';\r\nimport { Optimizer } from './optimizer';\r\nexport declare class AdagradOptimizer extends Optimizer {\r\n    protected learningRate: number;\r\n    private initialAccumulatorValue;\r\n    static className: string;\r\n    private c;\r\n    private epsilon;\r\n    private accumulatedGrads;\r\n    constructor(learningRate: number, initialAccumulatorValue?: number);\r\n    applyGradients(variableGradients: NamedVariableMap): void;\r\n    dispose(): void;\r\n    getConfig(): ConfigDict;\r\n    static fromConfig<T extends Serializable>(cls: SerializableConstructor<T>, config: ConfigDict): T;\r\n}\r\n"}}
