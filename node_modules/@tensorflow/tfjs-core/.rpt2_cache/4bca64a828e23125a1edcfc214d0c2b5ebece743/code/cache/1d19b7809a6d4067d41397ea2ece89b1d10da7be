{"code":"import { ArrayOps } from './array_ops';\r\nimport { BatchNormOps } from './batchnorm';\r\nimport { BinaryOps } from './binary_ops';\r\nimport { CompareOps } from './compare';\r\nimport { ConcatOps } from './concat';\r\nimport { ConvOps } from './conv';\r\nimport { ImageOps } from './image_ops';\r\nimport { LinalgOps } from './linalg_ops';\r\nimport { LogicalOps } from './logical_ops';\r\nimport { LossOps, Reduction } from './loss_ops';\r\nimport { LRNOps } from './lrn';\r\nimport { LSTMOps } from './lstm';\r\nimport { MatmulOps } from './matmul';\r\nimport { MovingAverageOps } from './moving_average';\r\nimport { NormOps } from './norm';\r\nimport { PoolOps } from './pool';\r\nimport { ReductionOps } from './reduction_ops';\r\nimport { ReverseOps } from './reverse';\r\nimport { SliceOps } from './slice';\r\nimport { SoftmaxOps } from './softmax';\r\nimport { StridedSliceOps } from './strided_slice';\r\nimport { TransposeOps } from './transpose';\r\nimport { UnaryOps } from './unary_ops';\r\nexport var batchNormalization = BatchNormOps.batchNormalization;\r\nexport var batchNormalization2d = BatchNormOps.batchNormalization2d;\r\nexport var batchNormalization3d = BatchNormOps.batchNormalization3d;\r\nexport var batchNormalization4d = BatchNormOps.batchNormalization4d;\r\nexport var concat = ConcatOps.concat;\r\nexport var concat1d = ConcatOps.concat1d;\r\nexport var concat2d = ConcatOps.concat2d;\r\nexport var concat3d = ConcatOps.concat3d;\r\nexport var concat4d = ConcatOps.concat4d;\r\nexport var conv1d = ConvOps.conv1d;\r\nexport var conv2d = ConvOps.conv2d;\r\nexport var conv2dTranspose = ConvOps.conv2dTranspose;\r\nexport var depthwiseConv2d = ConvOps.depthwiseConv2d;\r\nexport var separableConv2d = ConvOps.separableConv2d;\r\nexport var matMul = MatmulOps.matMul;\r\nexport var matrixTimesVector = MatmulOps.matrixTimesVector;\r\nexport var outerProduct = MatmulOps.outerProduct;\r\nexport var vectorTimesMatrix = MatmulOps.vectorTimesMatrix;\r\nexport var avgPool = PoolOps.avgPool;\r\nexport var maxPool = PoolOps.maxPool;\r\nexport var transpose = TransposeOps.transpose;\r\nexport var reverse = ReverseOps.reverse;\r\nexport var reverse1d = ReverseOps.reverse1d;\r\nexport var reverse2d = ReverseOps.reverse2d;\r\nexport var reverse3d = ReverseOps.reverse3d;\r\nexport var reverse4d = ReverseOps.reverse4d;\r\nexport var slice = SliceOps.slice;\r\nexport var slice1d = SliceOps.slice1d;\r\nexport var slice2d = SliceOps.slice2d;\r\nexport var slice3d = SliceOps.slice3d;\r\nexport var slice4d = SliceOps.slice4d;\r\nexport var stridedSlice = StridedSliceOps.stridedSlice;\r\nexport var argMax = ReductionOps.argMax;\r\nexport var argMin = ReductionOps.argMin;\r\nexport var logSumExp = ReductionOps.logSumExp;\r\nexport var max = ReductionOps.max;\r\nexport var mean = ReductionOps.mean;\r\nexport var min = ReductionOps.min;\r\nexport var moments = ReductionOps.moments;\r\nexport var sum = ReductionOps.sum;\r\nexport var unsortedSegmentSum = ReductionOps.unsortedSegmentSum;\r\nexport var equal = CompareOps.equal;\r\nexport var equalStrict = CompareOps.equalStrict;\r\nexport var greater = CompareOps.greater;\r\nexport var greaterStrict = CompareOps.greaterStrict;\r\nexport var greaterEqual = CompareOps.greaterEqual;\r\nexport var greaterEqualStrict = CompareOps.greaterEqualStrict;\r\nexport var less = CompareOps.less;\r\nexport var lessStrict = CompareOps.lessStrict;\r\nexport var lessEqual = CompareOps.lessEqual;\r\nexport var lessEqualStrict = CompareOps.lessEqualStrict;\r\nexport var notEqual = CompareOps.notEqual;\r\nexport var notEqualStrict = CompareOps.notEqualStrict;\r\nexport var logicalNot = LogicalOps.logicalNot;\r\nexport var logicalAnd = LogicalOps.logicalAnd;\r\nexport var logicalOr = LogicalOps.logicalOr;\r\nexport var logicalXor = LogicalOps.logicalXor;\r\nexport var where = LogicalOps.where;\r\nexport var abs = UnaryOps.abs;\r\nexport var acos = UnaryOps.acos;\r\nexport var acosh = UnaryOps.acosh;\r\nexport var asin = UnaryOps.asin;\r\nexport var asinh = UnaryOps.asinh;\r\nexport var atan = UnaryOps.atan;\r\nexport var atanh = UnaryOps.atanh;\r\nexport var ceil = UnaryOps.ceil;\r\nexport var clipByValue = UnaryOps.clipByValue;\r\nexport var cos = UnaryOps.cos;\r\nexport var cosh = UnaryOps.cosh;\r\nexport var elu = UnaryOps.elu;\r\nexport var exp = UnaryOps.exp;\r\nexport var expm1 = UnaryOps.expm1;\r\nexport var floor = UnaryOps.floor;\r\nexport var sign = UnaryOps.sign;\r\nexport var leakyRelu = UnaryOps.leakyRelu;\r\nexport var log = UnaryOps.log;\r\nexport var log1p = UnaryOps.log1p;\r\nexport var logSigmoid = UnaryOps.logSigmoid;\r\nexport var neg = UnaryOps.neg;\r\nexport var prelu = UnaryOps.prelu;\r\nexport var relu = UnaryOps.relu;\r\nexport var reciprocal = UnaryOps.reciprocal;\r\nexport var round = UnaryOps.round;\r\nexport var selu = UnaryOps.selu;\r\nexport var sigmoid = UnaryOps.sigmoid;\r\nexport var sin = UnaryOps.sin;\r\nexport var sinh = UnaryOps.sinh;\r\nexport var softplus = UnaryOps.softplus;\r\nexport var sqrt = UnaryOps.sqrt;\r\nexport var rsqrt = UnaryOps.rsqrt;\r\nexport var square = UnaryOps.square;\r\nexport var step = UnaryOps.step;\r\nexport var tan = UnaryOps.tan;\r\nexport var tanh = UnaryOps.tanh;\r\nexport var erf = UnaryOps.erf;\r\nexport var add = BinaryOps.add;\r\nexport var addStrict = BinaryOps.addStrict;\r\nexport var atan2 = BinaryOps.atan2;\r\nexport var div = BinaryOps.div;\r\nexport var divStrict = BinaryOps.divStrict;\r\nexport var maximum = BinaryOps.maximum;\r\nexport var maximumStrict = BinaryOps.maximumStrict;\r\nexport var minimum = BinaryOps.minimum;\r\nexport var minimumStrict = BinaryOps.minimumStrict;\r\nexport var mod = BinaryOps.mod;\r\nexport var modStrict = BinaryOps.modStrict;\r\nexport var mul = BinaryOps.mul;\r\nexport var mulStrict = BinaryOps.mulStrict;\r\nexport var pow = BinaryOps.pow;\r\nexport var powStrict = BinaryOps.powStrict;\r\nexport var sub = BinaryOps.sub;\r\nexport var subStrict = BinaryOps.subStrict;\r\nexport var squaredDifference = BinaryOps.squaredDifference;\r\nexport var squaredDifferenceStrict = BinaryOps.squaredDifferenceStrict;\r\nexport var norm = NormOps.norm;\r\nexport var cast = ArrayOps.cast;\r\nexport var clone = ArrayOps.clone;\r\nexport var fromPixels = ArrayOps.fromPixels;\r\nexport var toPixels = ArrayOps.toPixels;\r\nexport var ones = ArrayOps.ones;\r\nexport var onesLike = ArrayOps.onesLike;\r\nexport var zeros = ArrayOps.zeros;\r\nexport var zerosLike = ArrayOps.zerosLike;\r\nexport var eye = ArrayOps.eye;\r\nexport var rand = ArrayOps.rand;\r\nexport var randomNormal = ArrayOps.randomNormal;\r\nexport var truncatedNormal = ArrayOps.truncatedNormal;\r\nexport var randomUniform = ArrayOps.randomUniform;\r\nexport var multinomial = ArrayOps.multinomial;\r\nexport var reshape = ArrayOps.reshape;\r\nexport var squeeze = ArrayOps.squeeze;\r\nexport var tile = ArrayOps.tile;\r\nexport var gather = ArrayOps.gather;\r\nexport var oneHot = ArrayOps.oneHot;\r\nexport var linspace = ArrayOps.linspace;\r\nexport var range = ArrayOps.range;\r\nexport var buffer = ArrayOps.buffer;\r\nexport var fill = ArrayOps.fill;\r\nexport var tensor = ArrayOps.tensor;\r\nexport var scalar = ArrayOps.scalar;\r\nexport var tensor1d = ArrayOps.tensor1d;\r\nexport var tensor2d = ArrayOps.tensor2d;\r\nexport var tensor3d = ArrayOps.tensor3d;\r\nexport var tensor4d = ArrayOps.tensor4d;\r\nexport var print = ArrayOps.print;\r\nexport var expandDims = ArrayOps.expandDims;\r\nexport var stack = ArrayOps.stack;\r\nexport var unstack = ArrayOps.unstack;\r\nexport var split = ArrayOps.split;\r\nexport var cumsum = ArrayOps.cumsum;\r\nexport var pad = ArrayOps.pad;\r\nexport var pad1d = ArrayOps.pad1d;\r\nexport var pad2d = ArrayOps.pad2d;\r\nexport var pad3d = ArrayOps.pad3d;\r\nexport var pad4d = ArrayOps.pad4d;\r\nexport var movingAverage = MovingAverageOps.movingAverage;\r\nexport var basicLSTMCell = LSTMOps.basicLSTMCell;\r\nexport var multiRNNCell = LSTMOps.multiRNNCell;\r\nexport var softmax = SoftmaxOps.softmax;\r\nexport var localResponseNormalization = LRNOps.localResponseNormalization;\r\nexport var linalg = LinalgOps;\r\nexport { operation } from './operation';\r\nimport { Tensor } from '../tensor';\r\nimport { Rank } from '../types';\r\n[Tensor, Rank];\r\n[Reduction];\r\nexport var losses = {\r\n    absoluteDifference: LossOps.absoluteDifference,\r\n    computeWeightedLoss: LossOps.computeWeightedLoss,\r\n    cosineDistance: LossOps.cosineDistance,\r\n    hingeLoss: LossOps.hingeLoss,\r\n    logLoss: LossOps.logLoss,\r\n    meanSquaredError: LossOps.meanSquaredError,\r\n    softmaxCrossEntropy: SoftmaxOps.softmaxCrossEntropy\r\n};\r\nexport var image = {\r\n    resizeBilinear: ImageOps.resizeBilinear,\r\n    resizeNearestNeighbor: ImageOps.resizeNearestNeighbor,\r\n};\r\n//# sourceMappingURL=ops.js.map","map":"{\"version\":3,\"file\":\"ops.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/ops/ops.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/ops/ops.d.ts","text":"import { ArrayOps } from './array_ops';\r\nimport { BatchNormOps } from './batchnorm';\r\nimport { BinaryOps } from './binary_ops';\r\nimport { CompareOps } from './compare';\r\nimport { ConcatOps } from './concat';\r\nimport { ConvOps } from './conv';\r\nimport { ImageOps } from './image_ops';\r\nimport { LinalgOps } from './linalg_ops';\r\nimport { LogicalOps } from './logical_ops';\r\nimport { LossOps } from './loss_ops';\r\nimport { LRNOps } from './lrn';\r\nimport { LSTMOps } from './lstm';\r\nimport { MatmulOps } from './matmul';\r\nimport { MovingAverageOps } from './moving_average';\r\nimport { NormOps } from './norm';\r\nimport { PoolOps } from './pool';\r\nimport { ReductionOps } from './reduction_ops';\r\nimport { ReverseOps } from './reverse';\r\nimport { SliceOps } from './slice';\r\nimport { SoftmaxOps } from './softmax';\r\nimport { StridedSliceOps } from './strided_slice';\r\nimport { TransposeOps } from './transpose';\r\nimport { UnaryOps } from './unary_ops';\r\nexport declare const batchNormalization: typeof BatchNormOps.batchNormalization;\r\nexport declare const batchNormalization2d: typeof BatchNormOps.batchNormalization2d;\r\nexport declare const batchNormalization3d: typeof BatchNormOps.batchNormalization3d;\r\nexport declare const batchNormalization4d: typeof BatchNormOps.batchNormalization4d;\r\nexport declare const concat: typeof ConcatOps.concat;\r\nexport declare const concat1d: typeof ConcatOps.concat1d;\r\nexport declare const concat2d: typeof ConcatOps.concat2d;\r\nexport declare const concat3d: typeof ConcatOps.concat3d;\r\nexport declare const concat4d: typeof ConcatOps.concat4d;\r\nexport declare const conv1d: typeof ConvOps.conv1d;\r\nexport declare const conv2d: typeof ConvOps.conv2d;\r\nexport declare const conv2dTranspose: typeof ConvOps.conv2dTranspose;\r\nexport declare const depthwiseConv2d: typeof ConvOps.depthwiseConv2d;\r\nexport declare const separableConv2d: typeof ConvOps.separableConv2d;\r\nexport declare const matMul: typeof MatmulOps.matMul;\r\nexport declare const matrixTimesVector: typeof MatmulOps.matrixTimesVector;\r\nexport declare const outerProduct: typeof MatmulOps.outerProduct;\r\nexport declare const vectorTimesMatrix: typeof MatmulOps.vectorTimesMatrix;\r\nexport declare const avgPool: typeof PoolOps.avgPool;\r\nexport declare const maxPool: typeof PoolOps.maxPool;\r\nexport declare const transpose: typeof TransposeOps.transpose;\r\nexport declare const reverse: typeof ReverseOps.reverse;\r\nexport declare const reverse1d: typeof ReverseOps.reverse1d;\r\nexport declare const reverse2d: typeof ReverseOps.reverse2d;\r\nexport declare const reverse3d: typeof ReverseOps.reverse3d;\r\nexport declare const reverse4d: typeof ReverseOps.reverse4d;\r\nexport declare const slice: typeof SliceOps.slice;\r\nexport declare const slice1d: typeof SliceOps.slice1d;\r\nexport declare const slice2d: typeof SliceOps.slice2d;\r\nexport declare const slice3d: typeof SliceOps.slice3d;\r\nexport declare const slice4d: typeof SliceOps.slice4d;\r\nexport declare const stridedSlice: typeof StridedSliceOps.stridedSlice;\r\nexport declare const argMax: typeof ReductionOps.argMax;\r\nexport declare const argMin: typeof ReductionOps.argMin;\r\nexport declare const logSumExp: typeof ReductionOps.logSumExp;\r\nexport declare const max: typeof ReductionOps.max;\r\nexport declare const mean: typeof ReductionOps.mean;\r\nexport declare const min: typeof ReductionOps.min;\r\nexport declare const moments: typeof ReductionOps.moments;\r\nexport declare const sum: typeof ReductionOps.sum;\r\nexport declare const unsortedSegmentSum: typeof ReductionOps.unsortedSegmentSum;\r\nexport declare const equal: typeof CompareOps.equal;\r\nexport declare const equalStrict: typeof CompareOps.equalStrict;\r\nexport declare const greater: typeof CompareOps.greater;\r\nexport declare const greaterStrict: typeof CompareOps.greaterStrict;\r\nexport declare const greaterEqual: typeof CompareOps.greaterEqual;\r\nexport declare const greaterEqualStrict: typeof CompareOps.greaterEqualStrict;\r\nexport declare const less: typeof CompareOps.less;\r\nexport declare const lessStrict: typeof CompareOps.lessStrict;\r\nexport declare const lessEqual: typeof CompareOps.lessEqual;\r\nexport declare const lessEqualStrict: typeof CompareOps.lessEqualStrict;\r\nexport declare const notEqual: typeof CompareOps.notEqual;\r\nexport declare const notEqualStrict: typeof CompareOps.notEqualStrict;\r\nexport declare const logicalNot: typeof LogicalOps.logicalNot;\r\nexport declare const logicalAnd: typeof LogicalOps.logicalAnd;\r\nexport declare const logicalOr: typeof LogicalOps.logicalOr;\r\nexport declare const logicalXor: typeof LogicalOps.logicalXor;\r\nexport declare const where: typeof LogicalOps.where;\r\nexport declare const abs: typeof UnaryOps.abs;\r\nexport declare const acos: typeof UnaryOps.acos;\r\nexport declare const acosh: typeof UnaryOps.acosh;\r\nexport declare const asin: typeof UnaryOps.asin;\r\nexport declare const asinh: typeof UnaryOps.asinh;\r\nexport declare const atan: typeof UnaryOps.atan;\r\nexport declare const atanh: typeof UnaryOps.atanh;\r\nexport declare const ceil: typeof UnaryOps.ceil;\r\nexport declare const clipByValue: typeof UnaryOps.clipByValue;\r\nexport declare const cos: typeof UnaryOps.cos;\r\nexport declare const cosh: typeof UnaryOps.cosh;\r\nexport declare const elu: typeof UnaryOps.elu;\r\nexport declare const exp: typeof UnaryOps.exp;\r\nexport declare const expm1: typeof UnaryOps.expm1;\r\nexport declare const floor: typeof UnaryOps.floor;\r\nexport declare const sign: typeof UnaryOps.sign;\r\nexport declare const leakyRelu: typeof UnaryOps.leakyRelu;\r\nexport declare const log: typeof UnaryOps.log;\r\nexport declare const log1p: typeof UnaryOps.log1p;\r\nexport declare const logSigmoid: typeof UnaryOps.logSigmoid;\r\nexport declare const neg: typeof UnaryOps.neg;\r\nexport declare const prelu: typeof UnaryOps.prelu;\r\nexport declare const relu: typeof UnaryOps.relu;\r\nexport declare const reciprocal: typeof UnaryOps.reciprocal;\r\nexport declare const round: typeof UnaryOps.round;\r\nexport declare const selu: typeof UnaryOps.selu;\r\nexport declare const sigmoid: typeof UnaryOps.sigmoid;\r\nexport declare const sin: typeof UnaryOps.sin;\r\nexport declare const sinh: typeof UnaryOps.sinh;\r\nexport declare const softplus: typeof UnaryOps.softplus;\r\nexport declare const sqrt: typeof UnaryOps.sqrt;\r\nexport declare const rsqrt: typeof UnaryOps.rsqrt;\r\nexport declare const square: typeof UnaryOps.square;\r\nexport declare const step: typeof UnaryOps.step;\r\nexport declare const tan: typeof UnaryOps.tan;\r\nexport declare const tanh: typeof UnaryOps.tanh;\r\nexport declare const erf: typeof UnaryOps.erf;\r\nexport declare const add: typeof BinaryOps.add;\r\nexport declare const addStrict: typeof BinaryOps.addStrict;\r\nexport declare const atan2: typeof BinaryOps.atan2;\r\nexport declare const div: typeof BinaryOps.div;\r\nexport declare const divStrict: typeof BinaryOps.divStrict;\r\nexport declare const maximum: typeof BinaryOps.maximum;\r\nexport declare const maximumStrict: typeof BinaryOps.maximumStrict;\r\nexport declare const minimum: typeof BinaryOps.minimum;\r\nexport declare const minimumStrict: typeof BinaryOps.minimumStrict;\r\nexport declare const mod: typeof BinaryOps.mod;\r\nexport declare const modStrict: typeof BinaryOps.modStrict;\r\nexport declare const mul: typeof BinaryOps.mul;\r\nexport declare const mulStrict: typeof BinaryOps.mulStrict;\r\nexport declare const pow: typeof BinaryOps.pow;\r\nexport declare const powStrict: typeof BinaryOps.powStrict;\r\nexport declare const sub: typeof BinaryOps.sub;\r\nexport declare const subStrict: typeof BinaryOps.subStrict;\r\nexport declare const squaredDifference: typeof BinaryOps.squaredDifference;\r\nexport declare const squaredDifferenceStrict: typeof BinaryOps.squaredDifferenceStrict;\r\nexport declare const norm: typeof NormOps.norm;\r\nexport declare const cast: typeof ArrayOps.cast;\r\nexport declare const clone: typeof ArrayOps.clone;\r\nexport declare const fromPixels: typeof ArrayOps.fromPixels;\r\nexport declare const toPixels: typeof ArrayOps.toPixels;\r\nexport declare const ones: typeof ArrayOps.ones;\r\nexport declare const onesLike: typeof ArrayOps.onesLike;\r\nexport declare const zeros: typeof ArrayOps.zeros;\r\nexport declare const zerosLike: typeof ArrayOps.zerosLike;\r\nexport declare const eye: typeof ArrayOps.eye;\r\nexport declare const rand: typeof ArrayOps.rand;\r\nexport declare const randomNormal: typeof ArrayOps.randomNormal;\r\nexport declare const truncatedNormal: typeof ArrayOps.truncatedNormal;\r\nexport declare const randomUniform: typeof ArrayOps.randomUniform;\r\nexport declare const multinomial: typeof ArrayOps.multinomial;\r\nexport declare const reshape: typeof ArrayOps.reshape;\r\nexport declare const squeeze: typeof ArrayOps.squeeze;\r\nexport declare const tile: typeof ArrayOps.tile;\r\nexport declare const gather: typeof ArrayOps.gather;\r\nexport declare const oneHot: typeof ArrayOps.oneHot;\r\nexport declare const linspace: typeof ArrayOps.linspace;\r\nexport declare const range: typeof ArrayOps.range;\r\nexport declare const buffer: typeof ArrayOps.buffer;\r\nexport declare const fill: typeof ArrayOps.fill;\r\nexport declare const tensor: typeof ArrayOps.tensor;\r\nexport declare const scalar: typeof ArrayOps.scalar;\r\nexport declare const tensor1d: typeof ArrayOps.tensor1d;\r\nexport declare const tensor2d: typeof ArrayOps.tensor2d;\r\nexport declare const tensor3d: typeof ArrayOps.tensor3d;\r\nexport declare const tensor4d: typeof ArrayOps.tensor4d;\r\nexport declare const print: typeof ArrayOps.print;\r\nexport declare const expandDims: typeof ArrayOps.expandDims;\r\nexport declare const stack: typeof ArrayOps.stack;\r\nexport declare const unstack: typeof ArrayOps.unstack;\r\nexport declare const split: typeof ArrayOps.split;\r\nexport declare const cumsum: typeof ArrayOps.cumsum;\r\nexport declare const pad: typeof ArrayOps.pad;\r\nexport declare const pad1d: typeof ArrayOps.pad1d;\r\nexport declare const pad2d: typeof ArrayOps.pad2d;\r\nexport declare const pad3d: typeof ArrayOps.pad3d;\r\nexport declare const pad4d: typeof ArrayOps.pad4d;\r\nexport declare const movingAverage: typeof MovingAverageOps.movingAverage;\r\nexport declare const basicLSTMCell: typeof LSTMOps.basicLSTMCell;\r\nexport declare const multiRNNCell: typeof LSTMOps.multiRNNCell;\r\nexport declare const softmax: typeof SoftmaxOps.softmax;\r\nexport declare const localResponseNormalization: typeof LRNOps.localResponseNormalization;\r\nexport declare const linalg: typeof LinalgOps;\r\nexport { operation } from './operation';\r\nexport declare const losses: {\r\n    absoluteDifference: typeof LossOps.absoluteDifference;\r\n    computeWeightedLoss: typeof LossOps.computeWeightedLoss;\r\n    cosineDistance: typeof LossOps.cosineDistance;\r\n    hingeLoss: typeof LossOps.hingeLoss;\r\n    logLoss: typeof LossOps.logLoss;\r\n    meanSquaredError: typeof LossOps.meanSquaredError;\r\n    softmaxCrossEntropy: typeof SoftmaxOps.softmaxCrossEntropy;\r\n};\r\nexport declare const image: {\r\n    resizeBilinear: typeof ImageOps.resizeBilinear;\r\n    resizeNearestNeighbor: typeof ImageOps.resizeNearestNeighbor;\r\n};\r\n"}}
