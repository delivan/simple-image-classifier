{"code":"import { Tensor, util } from '..';\r\nimport { ArrayOps } from '../ops/array_ops';\r\nexport function castTensor(x, dtype, backend) {\r\n    if (!util.hasEncodingLoss(x.dtype, dtype)) {\r\n        return Tensor.make(x.shape, { dataId: x.dataId }, dtype);\r\n    }\r\n    if (dtype === 'int32') {\r\n        return backend.int(x);\r\n    }\r\n    else if (dtype === 'bool') {\r\n        return backend.notEqual(x, ArrayOps.scalar(0, x.dtype));\r\n    }\r\n    else {\r\n        throw new Error(\"Error in Cast: unknown dtype argument (\" + dtype + \")\");\r\n    }\r\n}\r\nexport function reshapeTensor(x, shape) {\r\n    return Tensor.make(shape, { dataId: x.dataId }, x.dtype);\r\n}\r\n//# sourceMappingURL=backend_util.js.map","map":"{\"version\":3,\"file\":\"backend_util.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/kernels/backend_util.ts\"],\"names\":[],\"mappings\":\"AAiBA,OAAO,EAAO,MAAM,EAAE,IAAI,EAAC,MAAM,IAAI,CAAC;AACtC,OAAO,EAAC,QAAQ,EAAC,MAAM,kBAAkB,CAAC;AAI1C,MAAM,qBACF,CAAI,EAAE,KAAe,EAAE,OAAsB;IAC/C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAG1C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAC,EAAE,KAAK,CAAM,CAAC;IAC9D,CAAC;IACD,EAAE,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAM,CAAC;IAC/D,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,4CAA0C,KAAK,MAAG,CAAC,CAAC;IACtE,CAAC;AACH,CAAC;AAED,MAAM,wBACF,CAAI,EAAE,KAAkB;IAC1B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;AACzD,CAAC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/backend_util.d.ts","text":"import { Rank, Tensor } from '..';\r\nimport { DataType, ShapeMap } from '../types';\r\nimport { KernelBackend } from './backend';\r\nexport declare function castTensor<T extends Tensor<Rank>>(x: T, dtype: DataType, backend: KernelBackend): T;\r\nexport declare function reshapeTensor<T extends Tensor<Rank>, R extends Rank>(x: T, shape: ShapeMap[R]): Tensor<R>;\r\n"}}
