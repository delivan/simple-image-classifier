{"code":"import { Tensor } from './tensor';\r\nimport * as util from './util';\r\nexport var WEBGL_ENVS = {\r\n    'BACKEND': 'test-webgl'\r\n};\r\nexport var CPU_ENVS = {\r\n    'BACKEND': 'test-cpu'\r\n};\r\nexport var ALL_ENVS = {};\r\nexport var TEST_EPSILON = 1e-3;\r\nexport function expectArraysClose(actual, expected, epsilon) {\r\n    if (epsilon === void 0) { epsilon = TEST_EPSILON; }\r\n    if (!(actual instanceof Tensor) && !(expected instanceof Tensor)) {\r\n        var aType = actual.constructor.name;\r\n        var bType = expected.constructor.name;\r\n        if (aType !== bType) {\r\n            throw new Error(\"Arrays are of different type actual: \" + aType + \" \" +\r\n                (\"vs expected: \" + bType));\r\n        }\r\n    }\r\n    else if (actual instanceof Tensor && expected instanceof Tensor) {\r\n        if (actual.dtype !== expected.dtype) {\r\n            throw new Error(\"Arrays are of different type actual: \" + actual.dtype + \" \" +\r\n                (\"vs expected: \" + expected.dtype + \".\"));\r\n        }\r\n        if (!util.arraysEqual(actual.shape, expected.shape)) {\r\n            throw new Error(\"Arrays are of different shape actual: \" + actual.shape + \" \" +\r\n                (\"vs expected: \" + expected.shape + \".\"));\r\n        }\r\n    }\r\n    var actualValues;\r\n    var expectedValues;\r\n    if (actual instanceof Tensor) {\r\n        actualValues = actual.dataSync();\r\n    }\r\n    else {\r\n        actualValues = actual;\r\n    }\r\n    if (expected instanceof Tensor) {\r\n        expectedValues = expected.dataSync();\r\n    }\r\n    else {\r\n        expectedValues = expected;\r\n    }\r\n    if (actualValues.length !== expectedValues.length) {\r\n        throw new Error(\"Arrays have different lengths actual: \" + actualValues.length + \" vs \" +\r\n            (\"expected: \" + expectedValues.length + \".\\n\") +\r\n            (\"Actual:   \" + actualValues + \".\\n\") +\r\n            (\"Expected: \" + expectedValues + \".\"));\r\n    }\r\n    for (var i = 0; i < expectedValues.length; ++i) {\r\n        var a = actualValues[i];\r\n        var e = expectedValues[i];\r\n        if (!areClose(a, Number(e), epsilon)) {\r\n            throw new Error(\"Arrays differ: actual[\" + i + \"] = \" + a + \", expected[\" + i + \"] = \" + e + \".\\n\" +\r\n                (\"Actual:   \" + actualValues + \".\\n\") +\r\n                (\"Expected: \" + expectedValues + \".\"));\r\n        }\r\n    }\r\n}\r\nexport function expectPromiseToFail(fn, done) {\r\n    fn().then(function () { return done.fail(); }, function () { return done(); });\r\n}\r\nexport function expectArraysEqual(actual, expected) {\r\n    return expectArraysClose(actual, expected, 0);\r\n}\r\nexport function expectNumbersClose(a, e, epsilon) {\r\n    if (epsilon === void 0) { epsilon = TEST_EPSILON; }\r\n    if (!areClose(a, e, epsilon)) {\r\n        throw new Error(\"Numbers differ: actual === \" + a + \", expected === \" + e);\r\n    }\r\n}\r\nfunction areClose(a, e, epsilon) {\r\n    if (isNaN(a) && isNaN(e)) {\r\n        return true;\r\n    }\r\n    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function expectValuesInRange(actual, low, high) {\r\n    var actualVals;\r\n    if (actual instanceof Tensor) {\r\n        actualVals = actual.dataSync();\r\n    }\r\n    else {\r\n        actualVals = actual;\r\n    }\r\n    for (var i = 0; i < actualVals.length; i++) {\r\n        if (actualVals[i] < low || actualVals[i] > high) {\r\n            throw new Error(\"Value out of range:\" + actualVals[i] + \" low: \" + low + \", high: \" + high);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=test_util.js.map","map":"{\"version\":3,\"file\":\"test_util.js\",\"sourceRoot\":\"\",\"sources\":[\"src/test_util.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/test_util.d.ts","text":"import { Features } from './environment';\r\nimport { Tensor } from './tensor';\r\nimport { TypedArray } from './types';\r\nexport declare const WEBGL_ENVS: Features;\r\nexport declare const CPU_ENVS: Features;\r\nexport declare const ALL_ENVS: {};\r\nexport declare const TEST_EPSILON = 0.001;\r\nexport declare function expectArraysClose(actual: Tensor | TypedArray | number[], expected: Tensor | TypedArray | number[] | boolean[], epsilon?: number): void;\r\nexport interface DoneFn {\r\n    (): void;\r\n    fail: (message?: Error | string) => void;\r\n}\r\nexport declare function expectPromiseToFail(fn: () => Promise<{}>, done: DoneFn): void;\r\nexport declare function expectArraysEqual(actual: Tensor | TypedArray | number[], expected: Tensor | TypedArray | number[] | boolean[]): void;\r\nexport declare function expectNumbersClose(a: number, e: number, epsilon?: number): void;\r\nexport declare function expectValuesInRange(actual: Tensor | TypedArray | number[], low: number, high: number): void;\r\n"}}
