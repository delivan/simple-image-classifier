{"code":"import * as seedrandom from 'seedrandom';\r\nvar MPRandGauss = (function () {\r\n    function MPRandGauss(mean, stdDeviation, dtype, truncated, seed) {\r\n        this.mean = mean;\r\n        this.stdDev = stdDeviation;\r\n        this.dtype = dtype;\r\n        this.nextVal = NaN;\r\n        this.truncated = truncated;\r\n        if (this.truncated) {\r\n            this.upper = this.mean + this.stdDev * 2;\r\n            this.lower = this.mean - this.stdDev * 2;\r\n        }\r\n        var seedValue = seed ? seed : Math.random();\r\n        this.random = seedrandom.alea(seedValue.toString());\r\n    }\r\n    MPRandGauss.prototype.nextValue = function () {\r\n        if (!isNaN(this.nextVal)) {\r\n            var value = this.nextVal;\r\n            this.nextVal = NaN;\r\n            return value;\r\n        }\r\n        var resultX, resultY;\r\n        var isValid = false;\r\n        while (!isValid) {\r\n            var v1 = void 0, v2 = void 0, s = void 0;\r\n            do {\r\n                v1 = 2 * this.random() - 1;\r\n                v2 = 2 * this.random() - 1;\r\n                s = v1 * v1 + v2 * v2;\r\n            } while (s >= 1 || s === 0);\r\n            var mul = Math.sqrt(-2.0 * Math.log(s) / s);\r\n            resultX = this.mean + this.stdDev * v1 * mul;\r\n            resultY = this.mean + this.stdDev * v2 * mul;\r\n            if (!this.truncated || this.isValidTruncated(resultX)) {\r\n                isValid = true;\r\n            }\r\n        }\r\n        if (!this.truncated || this.isValidTruncated(resultY)) {\r\n            this.nextVal = this.convertValue(resultY);\r\n        }\r\n        return this.convertValue(resultX);\r\n    };\r\n    MPRandGauss.prototype.convertValue = function (value) {\r\n        if (this.dtype == null || this.dtype === 'float32') {\r\n            return value;\r\n        }\r\n        return Math.round(value);\r\n    };\r\n    MPRandGauss.prototype.isValidTruncated = function (value) {\r\n        return value <= this.upper && value >= this.lower;\r\n    };\r\n    return MPRandGauss;\r\n}());\r\nexport { MPRandGauss };\r\n//# sourceMappingURL=rand.js.map","map":"{\"version\":3,\"file\":\"rand.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/ops/rand.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/ops/rand.d.ts","text":"export interface RandGauss {\r\n    nextValue(): number;\r\n}\r\nexport interface RandNormalDataTypes {\r\n    float32: Float32Array;\r\n    int32: Int32Array;\r\n}\r\nexport declare class MPRandGauss implements RandGauss {\r\n    private mean;\r\n    private stdDev;\r\n    private nextVal;\r\n    private dtype?;\r\n    private truncated?;\r\n    private upper?;\r\n    private lower?;\r\n    private random;\r\n    constructor(mean: number, stdDeviation: number, dtype?: keyof RandNormalDataTypes, truncated?: boolean, seed?: number);\r\n    nextValue(): number;\r\n    private convertValue(value);\r\n    private isValidTruncated(value);\r\n}\r\n"}}
