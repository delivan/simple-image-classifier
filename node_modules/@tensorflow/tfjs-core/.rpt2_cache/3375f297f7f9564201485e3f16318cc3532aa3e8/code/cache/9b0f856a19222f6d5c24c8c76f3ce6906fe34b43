{"code":"import * as util from '../util';\r\nexport function computePool2DInfo(inShape, filterSize, strides, pad, roundingMode, dataFormat) {\r\n    if (dataFormat === void 0) { dataFormat = 'channelsLast'; }\r\n    var _a = parseTupleParam(filterSize), filterHeight = _a[0], filterWidth = _a[1];\r\n    var filterShape;\r\n    if (dataFormat === 'channelsLast') {\r\n        filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\r\n    }\r\n    else if (dataFormat === 'channelsFirst') {\r\n        filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\r\n    }\r\n    else {\r\n        throw new Error(\"Unknown dataFormat \" + dataFormat);\r\n    }\r\n    var dilations = 1;\r\n    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);\r\n}\r\nexport function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise, dataFormat) {\r\n    if (depthwise === void 0) { depthwise = false; }\r\n    if (dataFormat === void 0) { dataFormat = 'channelsLast'; }\r\n    var _a = [-1, -1, -1, -1], batchSize = _a[0], inHeight = _a[1], inWidth = _a[2], inChannels = _a[3];\r\n    if (dataFormat === 'channelsLast') {\r\n        batchSize = inShape[0], inHeight = inShape[1], inWidth = inShape[2], inChannels = inShape[3];\r\n    }\r\n    else if (dataFormat === 'channelsFirst') {\r\n        batchSize = inShape[0], inChannels = inShape[1], inHeight = inShape[2], inWidth = inShape[3];\r\n    }\r\n    else {\r\n        throw new Error(\"Unknown dataFormat \" + dataFormat);\r\n    }\r\n    var filterHeight = filterShape[0], filterWidth = filterShape[1], filterChannels = filterShape[3];\r\n    var _b = parseTupleParam(strides), strideHeight = _b[0], strideWidth = _b[1];\r\n    var _c = parseTupleParam(dilations), dilationHeight = _c[0], dilationWidth = _c[1];\r\n    var effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\r\n    var effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\r\n    var _d = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode), padInfo = _d.padInfo, outHeight = _d.outHeight, outWidth = _d.outWidth;\r\n    var outChannels = depthwise ? filterChannels * inChannels : filterChannels;\r\n    var outShape;\r\n    if (dataFormat === 'channelsFirst') {\r\n        outShape = [batchSize, outChannels, outHeight, outWidth];\r\n    }\r\n    else if (dataFormat === 'channelsLast') {\r\n        outShape = [batchSize, outHeight, outWidth, outChannels];\r\n    }\r\n    return {\r\n        batchSize: batchSize,\r\n        dataFormat: dataFormat,\r\n        inHeight: inHeight,\r\n        inWidth: inWidth,\r\n        inChannels: inChannels,\r\n        outHeight: outHeight,\r\n        outWidth: outWidth,\r\n        outChannels: outChannels,\r\n        padInfo: padInfo,\r\n        strideHeight: strideHeight,\r\n        strideWidth: strideWidth,\r\n        filterHeight: filterHeight,\r\n        filterWidth: filterWidth,\r\n        dilationHeight: dilationHeight,\r\n        dilationWidth: dilationWidth,\r\n        inShape: inShape,\r\n        outShape: outShape,\r\n        filterShape: filterShape\r\n    };\r\n}\r\nfunction computeOutputShape3D(inShape, fieldSize, outDepth, stride, zeroPad, roundingMode) {\r\n    if (zeroPad == null) {\r\n        zeroPad = computeDefaultPad(inShape, fieldSize, stride);\r\n    }\r\n    var inputRows = inShape[0];\r\n    var inputCols = inShape[1];\r\n    var outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\r\n    util.assert(util.isInt(outputRows), \"The output # of rows (\" + outputRows + \") must be an integer. Change the \" +\r\n        \"stride and/or zero pad parameters\");\r\n    var outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\r\n    util.assert(util.isInt(outputCols), \"The output # of columns (\" + outputCols + \") must be an integer. Change \" +\r\n        \"the stride and/or zero pad parameters\");\r\n    return [outputRows, outputCols, outDepth];\r\n}\r\nexport function computeDefaultPad(inputShape, fieldSize, stride, dilation) {\r\n    if (dilation === void 0) { dilation = 1; }\r\n    var effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\r\n    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\r\n}\r\nfunction parseTupleParam(param) {\r\n    return typeof param === 'number' ? [param, param] : param;\r\n}\r\nfunction getEffectiveFilterSize(filterSize, dilation) {\r\n    if (dilation <= 1) {\r\n        return filterSize;\r\n    }\r\n    return filterSize + (filterSize - 1) * (dilation - 1);\r\n}\r\nfunction getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode) {\r\n    var padInfo;\r\n    var outHeight;\r\n    var outWidth;\r\n    if (typeof pad === 'number') {\r\n        var padType = (pad === 0) ? 'VALID' : 'NUMBER';\r\n        padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };\r\n        var outShape = computeOutputShape3D([inHeight, inWidth, 1], filterHeight, 1, strideHeight, pad, roundingMode);\r\n        outHeight = outShape[0];\r\n        outWidth = outShape[1];\r\n    }\r\n    else if (pad === 'same') {\r\n        outHeight = Math.ceil(inHeight / strideHeight);\r\n        outWidth = Math.ceil(inWidth / strideWidth);\r\n        var padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\r\n        var padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\r\n        var top_1 = Math.floor(padAlongHeight / 2);\r\n        var bottom = padAlongHeight - top_1;\r\n        var left = Math.floor(padAlongWidth / 2);\r\n        var right = padAlongWidth - left;\r\n        padInfo = { top: top_1, bottom: bottom, left: left, right: right, type: 'SAME' };\r\n    }\r\n    else if (pad === 'valid') {\r\n        padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };\r\n        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\r\n        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\r\n    }\r\n    else {\r\n        throw Error(\"Unknown padding parameter: \" + pad);\r\n    }\r\n    return { padInfo: padInfo, outHeight: outHeight, outWidth: outWidth };\r\n}\r\nfunction conditionalRound(value, roundingMode) {\r\n    if (!roundingMode) {\r\n        return value;\r\n    }\r\n    switch (roundingMode) {\r\n        case 'round':\r\n            return Math.round(value);\r\n        case 'ceil':\r\n            return Math.ceil(value);\r\n        case 'floor':\r\n            return Math.floor(value);\r\n        default:\r\n            throw new Error(\"Unknown roundingMode \" + roundingMode);\r\n    }\r\n}\r\n//# sourceMappingURL=conv_util.js.map","map":"{\"version\":3,\"file\":\"conv_util.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/ops/conv_util.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/ops/conv_util.d.ts","text":"export declare type PadInfo = {\r\n    top: number;\r\n    left: number;\r\n    right: number;\r\n    bottom: number;\r\n    type: string;\r\n};\r\nexport declare type Conv2DInfo = {\r\n    batchSize: number;\r\n    inHeight: number;\r\n    inWidth: number;\r\n    inChannels: number;\r\n    outHeight: number;\r\n    outWidth: number;\r\n    outChannels: number;\r\n    dataFormat: 'channelsFirst' | 'channelsLast';\r\n    strideHeight: number;\r\n    strideWidth: number;\r\n    dilationHeight: number;\r\n    dilationWidth: number;\r\n    filterHeight: number;\r\n    filterWidth: number;\r\n    padInfo: PadInfo;\r\n    inShape: [number, number, number, number];\r\n    outShape: [number, number, number, number];\r\n    filterShape: [number, number, number, number];\r\n};\r\nexport declare function computePool2DInfo(inShape: [number, number, number, number], filterSize: [number, number] | number, strides: number | [number, number], pad: 'same' | 'valid' | number, roundingMode?: 'floor' | 'round' | 'ceil', dataFormat?: 'channelsFirst' | 'channelsLast'): Conv2DInfo;\r\nexport declare function computeConv2DInfo(inShape: [number, number, number, number], filterShape: [number, number, number, number], strides: number | [number, number], dilations: number | [number, number], pad: 'same' | 'valid' | number, roundingMode?: 'floor' | 'round' | 'ceil', depthwise?: boolean, dataFormat?: 'channelsFirst' | 'channelsLast'): Conv2DInfo;\r\nexport declare function computeDefaultPad(inputShape: [number, number, number], fieldSize: number, stride: number, dilation?: number): number;\r\n"}}
