{"code":"import * as tslib_1 from \"tslib\";\r\nimport { doc } from '../doc';\r\nimport { ENV } from '../environment';\r\nimport { Tensor, TensorBuffer } from '../tensor';\r\nimport * as tensor_util from '../tensor_util';\r\nimport * as util from '../util';\r\nimport { getAxesPermutation, parseAxisParam } from './axis_util';\r\nimport { ConcatOps } from './concat';\r\nimport { operation } from './operation';\r\nimport { MPRandGauss } from './rand';\r\nimport { ReductionOps } from './reduction_ops';\r\nvar ArrayOps = (function () {\r\n    function ArrayOps() {\r\n    }\r\n    ArrayOps.tensor = function (values, shape, dtype) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        var inferredShape = util.inferShape(values);\r\n        if (shape != null && inferredShape.length !== 1) {\r\n            util.assertShapesMatch(shape, inferredShape, \"Error creating a new Tensor. \" +\r\n                (\"Inferred shape (\" + inferredShape + \") does not match the \") +\r\n                (\"provided shape (\" + shape + \"). \"));\r\n        }\r\n        if (!util.isTypedArray(values) && !Array.isArray(values)) {\r\n            values = [values];\r\n        }\r\n        shape = shape || inferredShape;\r\n        return Tensor.make(shape, { values: toTypedArray(values, dtype) }, dtype);\r\n    };\r\n    ArrayOps.scalar = function (value, dtype) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        if (util.isTypedArray(value) || Array.isArray(value)) {\r\n            throw new Error('Error creating a new Scalar: value must be a primitive ' +\r\n                '(number|boolean)');\r\n        }\r\n        return ArrayOps.tensor(value, [], dtype);\r\n    };\r\n    ArrayOps.tensor1d = function (values, dtype) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        var inferredShape = util.inferShape(values);\r\n        if (inferredShape.length !== 1) {\r\n            throw new Error('tensor1d() requires values to be a flat/TypedArray');\r\n        }\r\n        return ArrayOps.tensor(values, inferredShape, dtype);\r\n    };\r\n    ArrayOps.tensor2d = function (values, shape, dtype) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        if (shape != null && shape.length !== 2) {\r\n            throw new Error('tensor2d() requires shape to have two numbers');\r\n        }\r\n        var inferredShape = util.inferShape(values);\r\n        if (inferredShape.length !== 2 && inferredShape.length !== 1) {\r\n            throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');\r\n        }\r\n        if (inferredShape.length === 1 && shape == null) {\r\n            throw new Error('tensor2d() requires shape to be provided when `values` ' +\r\n                'are a flat/TypedArray');\r\n        }\r\n        shape = shape || inferredShape;\r\n        return ArrayOps.tensor(values, shape, dtype);\r\n    };\r\n    ArrayOps.tensor3d = function (values, shape, dtype) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        if (shape != null && shape.length !== 3) {\r\n            throw new Error('tensor3d() requires shape to have three numbers');\r\n        }\r\n        var inferredShape = util.inferShape(values);\r\n        if (inferredShape.length !== 3 && inferredShape.length !== 1) {\r\n            throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');\r\n        }\r\n        if (inferredShape.length === 1 && shape == null) {\r\n            throw new Error('tensor3d() requires shape to be provided when `values` ' +\r\n                'are a flat array');\r\n        }\r\n        shape = shape || inferredShape;\r\n        return ArrayOps.tensor(values, shape, dtype);\r\n    };\r\n    ArrayOps.tensor4d = function (values, shape, dtype) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        if (shape != null && shape.length !== 4) {\r\n            throw new Error('tensor4d() requires shape to have four numbers');\r\n        }\r\n        var inferredShape = util.inferShape(values);\r\n        if (inferredShape.length !== 4 && inferredShape.length !== 1) {\r\n            throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');\r\n        }\r\n        if (inferredShape.length === 1 && shape == null) {\r\n            throw new Error('tensor4d() requires shape to be provided when `values` ' +\r\n                'are a flat array');\r\n        }\r\n        shape = shape || inferredShape;\r\n        return ArrayOps.tensor(values, shape, dtype);\r\n    };\r\n    ArrayOps.ones = function (shape, dtype) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        var values = makeOnesTypedArray(util.sizeFromShape(shape), dtype);\r\n        return Tensor.make(shape, { values: values }, dtype);\r\n    };\r\n    ArrayOps.zeros = function (shape, dtype) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        var values = makeZerosTypedArray(util.sizeFromShape(shape), dtype);\r\n        return Tensor.make(shape, { values: values }, dtype);\r\n    };\r\n    ArrayOps.fill = function (shape, value, dtype) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        var values = util.getTypedArrayFromDType(dtype, util.sizeFromShape(shape));\r\n        values.fill(value);\r\n        return Tensor.make(shape, { values: values }, dtype);\r\n    };\r\n    ArrayOps.onesLike = function (x) {\r\n        util.assertArgumentsAreTensors({ x: x }, 'onesLike');\r\n        return ArrayOps.ones(x.shape, x.dtype);\r\n    };\r\n    ArrayOps.zerosLike = function (x) {\r\n        util.assertArgumentsAreTensors({ x: x }, 'zerosLike');\r\n        return ArrayOps.zeros(x.shape, x.dtype);\r\n    };\r\n    ArrayOps.clone = function (x) {\r\n        util.assertArgumentsAreTensors({ x: x }, 'clone');\r\n        var der = function (dy) {\r\n            return { x: function () { return dy.toFloat(); } };\r\n        };\r\n        return ENV.engine.runKernel(function (backend) {\r\n            return Tensor.make(x.shape, { dataId: x.dataId }, x.dtype);\r\n        }, { x: x }, der);\r\n    };\r\n    ArrayOps.eye = function (numRows, numColumns, batchShape, dtype) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        if (numColumns == null) {\r\n            numColumns = numRows;\r\n        }\r\n        var buffer = ArrayOps.buffer([numRows, numColumns], dtype);\r\n        var n = numRows <= numColumns ? numRows : numColumns;\r\n        for (var i = 0; i < n; ++i) {\r\n            buffer.set(1, i, i);\r\n        }\r\n        var out = buffer.toTensor().as2D(numRows, numColumns);\r\n        if (batchShape == null) {\r\n            return out;\r\n        }\r\n        else {\r\n            if (batchShape.length === 1) {\r\n                return ArrayOps.tile(ArrayOps.expandDims(out, 0), [batchShape[0], 1, 1]);\r\n            }\r\n            else if (batchShape.length === 2) {\r\n                return ArrayOps.tile(ArrayOps.expandDims(ArrayOps.expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\r\n            }\r\n            else {\r\n                throw new Error(\"eye() currently supports only 1D and 2D \" +\r\n                    (\"batchShapes, but received \" + batchShape.length + \"D.\"));\r\n            }\r\n        }\r\n    };\r\n    ArrayOps.randomNormal = function (shape, mean, stdDev, dtype, seed) {\r\n        if (mean === void 0) { mean = 0; }\r\n        if (stdDev === void 0) { stdDev = 1; }\r\n        if (dtype != null && dtype === 'bool') {\r\n            throw new Error(\"Unsupported data type \" + dtype);\r\n        }\r\n        var randGauss = new MPRandGauss(mean, stdDev, dtype, false, seed);\r\n        var res = ArrayOps.buffer(shape, dtype);\r\n        for (var i = 0; i < res.values.length; i++) {\r\n            res.values[i] = randGauss.nextValue();\r\n        }\r\n        return res.toTensor();\r\n    };\r\n    ArrayOps.truncatedNormal = function (shape, mean, stdDev, dtype, seed) {\r\n        if (mean === void 0) { mean = 0; }\r\n        if (stdDev === void 0) { stdDev = 1; }\r\n        if (dtype != null && dtype === 'bool') {\r\n            throw new Error(\"Unsupported data type \" + dtype);\r\n        }\r\n        var randGauss = new MPRandGauss(mean, stdDev, dtype, true, seed);\r\n        var res = ArrayOps.buffer(shape, dtype);\r\n        for (var i = 0; i < res.values.length; i++) {\r\n            res.values[i] = randGauss.nextValue();\r\n        }\r\n        return res.toTensor();\r\n    };\r\n    ArrayOps.randomUniform = function (shape, minval, maxval, dtype) {\r\n        if (minval === void 0) { minval = 0; }\r\n        if (maxval === void 0) { maxval = 1; }\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        var res = ArrayOps.buffer(shape, dtype);\r\n        for (var i = 0; i < res.values.length; i++) {\r\n            res.values[i] = util.randUniform(minval, maxval);\r\n        }\r\n        return res.toTensor();\r\n    };\r\n    ArrayOps.rand = function (shape, randFunction, dtype) {\r\n        var size = util.sizeFromShape(shape);\r\n        var values = null;\r\n        if (dtype == null || dtype === 'float32') {\r\n            values = new Float32Array(size);\r\n        }\r\n        else if (dtype === 'int32') {\r\n            values = new Int32Array(size);\r\n        }\r\n        else if (dtype === 'bool') {\r\n            values = new Uint8Array(size);\r\n        }\r\n        else {\r\n            throw new Error(\"Unknown data type \" + dtype);\r\n        }\r\n        for (var i = 0; i < size; i++) {\r\n            values[i] = randFunction();\r\n        }\r\n        return Tensor.make(shape, { values: values }, dtype);\r\n    };\r\n    ArrayOps.multinomial = function (logits, numSamples, seed, normalized) {\r\n        if (normalized === void 0) { normalized = false; }\r\n        util.assertArgumentsAreTensors({ logits: logits }, 'multinomial');\r\n        var numOutcomes = logits.size;\r\n        var origRank = logits.rank;\r\n        if (numOutcomes < 2) {\r\n            throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \" +\r\n                (numOutcomes + \".\"));\r\n        }\r\n        if (origRank > 2) {\r\n            throw new Error(\"Rank of probabilities must be 1 or 2, but is \" + origRank);\r\n        }\r\n        seed = seed || Math.random();\r\n        var logits2D = origRank === 1 ? logits.as2D(1, -1) : logits;\r\n        var res = ENV.engine.runKernel(function (backend) { return backend.multinomial(logits2D, normalized, numSamples, seed); }, { logits2D: logits2D });\r\n        return origRank === 1 ? res.as1D() : res;\r\n    };\r\n    ArrayOps.oneHot = function (indices, depth, onValue, offValue) {\r\n        if (onValue === void 0) { onValue = 1; }\r\n        if (offValue === void 0) { offValue = 0; }\r\n        util.assert(indices.dtype === 'int32', 'Indices must be of dtype `int32`');\r\n        if (depth < 2) {\r\n            throw new Error(\"Error in oneHot: depth must be >=2, but it is \" + depth);\r\n        }\r\n        return ENV.engine.runKernel(function (backend) { return backend.oneHot(indices, depth, onValue, offValue); }, { indices: indices });\r\n    };\r\n    ArrayOps.fromPixels = function (pixels, numChannels) {\r\n        if (numChannels === void 0) { numChannels = 3; }\r\n        if (numChannels > 4) {\r\n            throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\r\n        }\r\n        return ENV.engine.fromPixels(pixels, numChannels);\r\n    };\r\n    ArrayOps.toPixels = function (img, canvas) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _a, height, width, depth, minTensor, maxTensor, min, max, data, multiplier, bytes, i, r, g, b, a, j, ctx, imageData;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        util.assertArgumentsAreTensors({ img: img }, 'toPixels');\r\n                        if (img.rank !== 2 && img.rank !== 3) {\r\n                            throw new Error(\"toPixels only supports rank 2 or 3 tensors, got rank \" + img.rank + \".\");\r\n                        }\r\n                        _a = img.shape.slice(0, 2), height = _a[0], width = _a[1];\r\n                        depth = img.rank === 2 ? 1 : img.shape[2];\r\n                        if (depth > 4 || depth === 2) {\r\n                            throw new Error(\"toPixels only supports depth of size \" +\r\n                                (\"1, 3 or 4 but got \" + depth));\r\n                        }\r\n                        minTensor = img.min();\r\n                        maxTensor = img.max();\r\n                        return [4, minTensor.data()];\r\n                    case 1:\r\n                        min = (_b.sent())[0];\r\n                        return [4, maxTensor.data()];\r\n                    case 2:\r\n                        max = (_b.sent())[0];\r\n                        minTensor.dispose();\r\n                        maxTensor.dispose();\r\n                        if (img.dtype === 'float32') {\r\n                            if (min < 0 || max > 1) {\r\n                                throw new Error(\"Tensor values for a float32 Tensor must be in the \" +\r\n                                    (\"range [0 - 1] but got range [\" + min + \" - \" + max + \"].\"));\r\n                            }\r\n                        }\r\n                        else if (img.dtype === 'int32') {\r\n                            if (min < 0 || max > 255) {\r\n                                throw new Error(\"Tensor values for a int32 Tensor must be in the \" +\r\n                                    (\"range [0 - 255] but got range [\" + min + \" - \" + max + \"].\"));\r\n                            }\r\n                        }\r\n                        else {\r\n                            throw new Error(\"Unsupported type for toPixels: \" + img.dtype + \".\" +\r\n                                \" Please use float32 or int32 tensors.\");\r\n                        }\r\n                        return [4, img.data()];\r\n                    case 3:\r\n                        data = _b.sent();\r\n                        multiplier = img.dtype === 'float32' ? 255 : 1;\r\n                        bytes = new Uint8ClampedArray(width * height * 4);\r\n                        for (i = 0; i < height * width; ++i) {\r\n                            r = void 0, g = void 0, b = void 0, a = void 0;\r\n                            if (depth === 1) {\r\n                                r = data[i] * multiplier;\r\n                                g = data[i] * multiplier;\r\n                                b = data[i] * multiplier;\r\n                                a = 255;\r\n                            }\r\n                            else if (depth === 3) {\r\n                                r = data[i * 3] * multiplier;\r\n                                g = data[i * 3 + 1] * multiplier;\r\n                                b = data[i * 3 + 2] * multiplier;\r\n                                a = 255;\r\n                            }\r\n                            else if (depth === 4) {\r\n                                r = data[i * 4] * multiplier;\r\n                                g = data[i * 4 + 1] * multiplier;\r\n                                b = data[i * 4 + 2] * multiplier;\r\n                                a = data[i * 4 + 3] * multiplier;\r\n                            }\r\n                            j = i * 4;\r\n                            bytes[j + 0] = Math.round(r);\r\n                            bytes[j + 1] = Math.round(g);\r\n                            bytes[j + 2] = Math.round(b);\r\n                            bytes[j + 3] = Math.round(a);\r\n                        }\r\n                        if (canvas != null) {\r\n                            canvas.width = width;\r\n                            canvas.height = height;\r\n                            ctx = canvas.getContext('2d');\r\n                            imageData = new ImageData(bytes, width, height);\r\n                            ctx.putImageData(imageData, 0, 0);\r\n                        }\r\n                        return [2, bytes];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ArrayOps.reshape = function (x, shape) {\r\n        util.assertArgumentsAreTensors({ x: x }, 'reshape');\r\n        shape = util.inferFromImplicitShape(shape, x.size);\r\n        util.assert(x.size === util.sizeFromShape(shape), 'new shape and old shape must have the same number of elements.');\r\n        var grad = function (dy) {\r\n            return { x: function () { return dy.reshape(x.shape); } };\r\n        };\r\n        return ENV.engine.runKernel(function (backend) { return backend.reshape(x, shape); }, { x: x }, grad);\r\n    };\r\n    ArrayOps.squeeze = function (x, axis) {\r\n        util.assertArgumentsAreTensors({ x: x }, 'squeeze');\r\n        return ArrayOps.reshape(x, util.squeezeShape(x.shape, axis).newShape);\r\n    };\r\n    ArrayOps.cast = function (x, dtype) {\r\n        util.assertArgumentsAreTensors({ x: x }, 'cast');\r\n        var grad = function (dy) {\r\n            return { x: function () { return dy.clone(); } };\r\n        };\r\n        return ENV.engine.runKernel(function (backend) { return backend.cast(x, dtype); }, { x: x }, grad);\r\n    };\r\n    ArrayOps.tile = function (x, reps) {\r\n        util.assertArgumentsAreTensors({ x: x }, 'tile');\r\n        util.assert(x.rank === reps.length, \"Error in transpose: rank of input \" + x.rank + \" \" +\r\n            (\"must match length of reps \" + reps + \".\"));\r\n        var grad = function (dy) {\r\n            var derX = function () {\r\n                var xGrad = ArrayOps.zerosLike(x);\r\n                if (x.rank === 1) {\r\n                    for (var i = 0; i < reps[0]; ++i) {\r\n                        xGrad = xGrad.add(dy.slice([i * x.shape[0]], [x.shape[0]]));\r\n                    }\r\n                }\r\n                else if (x.rank === 2) {\r\n                    for (var i = 0; i < reps[0]; ++i) {\r\n                        for (var j = 0; j < reps[1]; ++j) {\r\n                            xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1]], [x.shape[0], x.shape[1]]));\r\n                        }\r\n                    }\r\n                }\r\n                else if (x.rank === 3) {\r\n                    for (var i = 0; i < reps[0]; ++i) {\r\n                        for (var j = 0; j < reps[1]; ++j) {\r\n                            for (var k = 0; k < reps[2]; ++k) {\r\n                                xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if (x.rank === 4) {\r\n                    for (var i = 0; i < reps[0]; ++i) {\r\n                        for (var j = 0; j < reps[1]; ++j) {\r\n                            for (var k = 0; k < reps[2]; ++k) {\r\n                                for (var l = 0; l < reps[3]; ++l) {\r\n                                    xGrad = xGrad.add(dy.slice([\r\n                                        i * x.shape[0], j * x.shape[1], k * x.shape[2],\r\n                                        l * x.shape[3]\r\n                                    ], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error(\"Gradient for tile operation is not implemented for rank-\" +\r\n                        (x.rank + \" tensors yet.\"));\r\n                }\r\n                return xGrad;\r\n            };\r\n            return { x: derX };\r\n        };\r\n        return ENV.engine.runKernel(function (backend) { return backend.tile(x, reps); }, { x: x }, grad);\r\n    };\r\n    ArrayOps.gather = function (x, indices, axis) {\r\n        if (axis === void 0) { axis = 0; }\r\n        util.assertArgumentsAreTensors({ x: x, indices: indices }, 'gather');\r\n        util.assert(indices.dtype === 'int32', 'Indices must be of dtype `int32`');\r\n        axis = parseAxisParam(axis, x.shape)[0];\r\n        var grad = function (dy) {\r\n            var derX = function () {\r\n                return ReductionOps.unsortedSegmentSum(dy, indices, x.shape[axis], axis);\r\n            };\r\n            return { x: derX };\r\n        };\r\n        return ENV.engine.runKernel(function (backend) { return backend.gather(x, indices, axis); }, { x: x }, grad);\r\n    };\r\n    ArrayOps.pad1d = function (x, paddings, constantValue) {\r\n        if (constantValue === void 0) { constantValue = 0; }\r\n        util.assert(paddings.length === 2, 'Invalid number of paddings. Must be length of 2.');\r\n        return ArrayOps.pad(x, [paddings], constantValue);\r\n    };\r\n    ArrayOps.pad2d = function (x, paddings, constantValue) {\r\n        if (constantValue === void 0) { constantValue = 0; }\r\n        util.assert(paddings.length === 2 && paddings[0].length === 2 &&\r\n            paddings[1].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\r\n        return ArrayOps.pad(x, paddings, constantValue);\r\n    };\r\n    ArrayOps.pad3d = function (x, paddings, constantValue) {\r\n        if (constantValue === void 0) { constantValue = 0; }\r\n        util.assert(paddings.length === 3 && paddings[0].length === 2 &&\r\n            paddings[1].length === 2 && paddings[2].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\r\n        return ArrayOps.pad(x, paddings, constantValue);\r\n    };\r\n    ArrayOps.pad4d = function (x, paddings, constantValue) {\r\n        if (constantValue === void 0) { constantValue = 0; }\r\n        util.assert(paddings.length === 4 && paddings[0].length === 2 &&\r\n            paddings[1].length === 2 && paddings[2].length === 2 &&\r\n            paddings[3].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\r\n        return ArrayOps.pad(x, paddings, constantValue);\r\n    };\r\n    ArrayOps.pad = function (x, paddings, constantValue) {\r\n        if (constantValue === void 0) { constantValue = 0; }\r\n        util.assertArgumentsAreTensors({ x: x }, 'pad');\r\n        if (x.rank === 0) {\r\n            throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\r\n        }\r\n        var begin = paddings.map(function (p) { return p[0]; });\r\n        var grad = function (dy) {\r\n            return { x: function () { return dy.slice(begin, x.shape); } };\r\n        };\r\n        return ENV.engine.runKernel(function (backend) { return backend.pad(x, paddings, constantValue); }, { x: x }, grad);\r\n    };\r\n    ArrayOps.stack = function (tensors, axis) {\r\n        if (axis === void 0) { axis = 0; }\r\n        util.assertArgumentsAreTensors({ tensors: tensors }, 'stack');\r\n        util.assert(tensors.length >= 1, 'Pass at least one tensor to tf.stack');\r\n        if (tensors.length === 1) {\r\n            return tensors[0].expandDims(axis);\r\n        }\r\n        var rank = tensors[0].rank;\r\n        var shape = tensors[0].shape;\r\n        var dtype = tensors[0].dtype;\r\n        util.assert(axis <= rank, 'Axis must be <= rank of the tensor');\r\n        tensors.forEach(function (t) {\r\n            util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\r\n        });\r\n        tensors.forEach(function (t) {\r\n            util.assert(dtype === t.dtype, 'All tensors passed to stack must have matching dtypes');\r\n        });\r\n        var expandedTensors = tensors.map(function (t) { return t.expandDims(axis); });\r\n        return ConcatOps.concat(expandedTensors, axis);\r\n    };\r\n    ArrayOps.split = function (x, numOrSizeSplits, axis) {\r\n        if (axis === void 0) { axis = 0; }\r\n        util.assertArgumentsAreTensors({ x: x }, 'split');\r\n        axis = parseAxisParam(axis, x.shape)[0];\r\n        var splitSizes;\r\n        if (typeof (numOrSizeSplits) === 'number') {\r\n            util.assert(x.shape[axis] % numOrSizeSplits === 0, 'Number of splits must evenly divide the axis.');\r\n            splitSizes = Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\r\n        }\r\n        else {\r\n            util.assert(x.shape[axis] === numOrSizeSplits.reduce(function (a, b) { return a + b; }), 'The sum of sizes must match the size of the axis dimension.');\r\n            splitSizes = numOrSizeSplits;\r\n        }\r\n        var begin = Array(x.rank).fill(0);\r\n        var size = x.shape.slice();\r\n        return splitSizes.map(function (s) {\r\n            size[axis] = s;\r\n            var slice = x.slice(begin, size);\r\n            begin[axis] += s;\r\n            return slice;\r\n        });\r\n    };\r\n    ArrayOps.cumsum = function (x, axis, exclusive, reverse) {\r\n        if (axis === void 0) { axis = 0; }\r\n        if (exclusive === void 0) { exclusive = false; }\r\n        if (reverse === void 0) { reverse = false; }\r\n        util.assertArgumentsAreTensors({ x: x }, 'cumsum');\r\n        var permutation = getAxesPermutation([axis], x.rank);\r\n        var permutedX = x;\r\n        if (permutation != null) {\r\n            permutedX = x.transpose(permutation);\r\n        }\r\n        var grad = function (dy) {\r\n            return { permutedX: function () { return dy.cumsum(axis, exclusive, !reverse); } };\r\n        };\r\n        var value = ENV.engine.runKernel(function (backend) { return backend.cumsum(permutedX, axis, exclusive, reverse); }, { permutedX: permutedX }, grad);\r\n        if (permutation != null) {\r\n            value = value.transpose(permutation);\r\n        }\r\n        return value;\r\n    };\r\n    ArrayOps.expandDims = function (x, axis) {\r\n        if (axis === void 0) { axis = 0; }\r\n        util.assertArgumentsAreTensors({ x: x }, 'expandDims');\r\n        util.assert(axis <= x.rank, 'Axis must be <= rank of the tensor');\r\n        var newShape = x.shape.slice();\r\n        newShape.splice(axis, 0, 1);\r\n        return ArrayOps.reshape(x, newShape);\r\n    };\r\n    ArrayOps.linspace = function (start, stop, num) {\r\n        if (num === 0) {\r\n            throw new Error('Cannot request zero samples');\r\n        }\r\n        var step = (stop - start) / (num - 1);\r\n        var values = makeZerosTypedArray(num, 'float32');\r\n        values[0] = start;\r\n        for (var i = 1; i < values.length; i++) {\r\n            values[i] = values[i - 1] + step;\r\n        }\r\n        return ArrayOps.tensor1d(values, 'float32');\r\n    };\r\n    ArrayOps.range = function (start, stop, step, dtype) {\r\n        if (step === void 0) { step = 1; }\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        if (step === 0) {\r\n            throw new Error('Cannot have a step of zero');\r\n        }\r\n        var sameStartStop = start === stop;\r\n        var increasingRangeNegativeStep = start < stop && step < 0;\r\n        var decreasingRangePositiveStep = stop < start && step > 1;\r\n        if (sameStartStop || increasingRangeNegativeStep ||\r\n            decreasingRangePositiveStep) {\r\n            return ArrayOps.zeros([0], dtype);\r\n        }\r\n        var numElements = Math.abs(Math.ceil((stop - start) / step));\r\n        var values = makeZerosTypedArray(numElements, dtype);\r\n        if (stop < start && step === 1) {\r\n            step = -1;\r\n        }\r\n        values[0] = start;\r\n        for (var i = 1; i < values.length; i++) {\r\n            values[i] = values[i - 1] + step;\r\n        }\r\n        return ArrayOps.tensor1d(values, dtype);\r\n    };\r\n    ArrayOps.buffer = function (shape, dtype, values) {\r\n        if (dtype === void 0) { dtype = 'float32'; }\r\n        return new TensorBuffer(shape, dtype, values);\r\n    };\r\n    ArrayOps.print = function (x, verbose) {\r\n        if (verbose === void 0) { verbose = false; }\r\n        console.log(tensor_util.tensorToString(x, verbose));\r\n    };\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' })\r\n    ], ArrayOps, \"tensor\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' })\r\n    ], ArrayOps, \"scalar\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' })\r\n    ], ArrayOps, \"tensor1d\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' })\r\n    ], ArrayOps, \"tensor2d\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' })\r\n    ], ArrayOps, \"tensor3d\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' })\r\n    ], ArrayOps, \"tensor4d\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"ones\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"zeros\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"fill\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"onesLike\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"zerosLike\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"clone\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"eye\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"randomNormal\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"truncatedNormal\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"randomUniform\", null);\r\n    tslib_1.__decorate([\r\n        operation\r\n    ], ArrayOps, \"rand\", null);\r\n    tslib_1.__decorate([\r\n        operation\r\n    ], ArrayOps, \"multinomial\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"oneHot\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' }),\r\n        operation\r\n    ], ArrayOps, \"fromPixels\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Visualization' })\r\n    ], ArrayOps, \"toPixels\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Transformations' }),\r\n        operation\r\n    ], ArrayOps, \"reshape\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Transformations' })\r\n    ], ArrayOps, \"squeeze\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Transformations' }),\r\n        operation\r\n    ], ArrayOps, \"cast\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\r\n        operation\r\n    ], ArrayOps, \"tile\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\r\n        operation\r\n    ], ArrayOps, \"gather\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Transformations' }),\r\n        operation\r\n    ], ArrayOps, \"pad\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\r\n        operation\r\n    ], ArrayOps, \"stack\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }),\r\n        operation\r\n    ], ArrayOps, \"split\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Operations', subheading: 'Scan' })\r\n    ], ArrayOps, \"cumsum\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Transformations' }),\r\n        operation\r\n    ], ArrayOps, \"expandDims\", null);\r\n    tslib_1.__decorate([\r\n        operation,\r\n        doc({ heading: 'Tensors', subheading: 'Creation' })\r\n    ], ArrayOps, \"linspace\", null);\r\n    tslib_1.__decorate([\r\n        operation,\r\n        doc({ heading: 'Tensors', subheading: 'Creation' })\r\n    ], ArrayOps, \"range\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' })\r\n    ], ArrayOps, \"buffer\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Tensors', subheading: 'Creation' })\r\n    ], ArrayOps, \"print\", null);\r\n    return ArrayOps;\r\n}());\r\nexport { ArrayOps };\r\nfunction makeZerosTypedArray(size, dtype) {\r\n    if (dtype == null || dtype === 'float32') {\r\n        return new Float32Array(size);\r\n    }\r\n    else if (dtype === 'int32') {\r\n        return new Int32Array(size);\r\n    }\r\n    else if (dtype === 'bool') {\r\n        return new Uint8Array(size);\r\n    }\r\n    else {\r\n        throw new Error(\"Unknown data type $ {dtype}\");\r\n    }\r\n}\r\nfunction makeOnesTypedArray(size, dtype) {\r\n    var array = makeZerosTypedArray(size, dtype);\r\n    for (var i = 0; i < array.length; i++) {\r\n        array[i] = 1;\r\n    }\r\n    return array;\r\n}\r\nfunction toTypedArray(a, dtype) {\r\n    if (noConversionNeeded(a, dtype)) {\r\n        return a;\r\n    }\r\n    if (Array.isArray(a)) {\r\n        a = util.flatten(a);\r\n    }\r\n    return util.copyTypedArray(a, dtype);\r\n}\r\nfunction noConversionNeeded(a, dtype) {\r\n    return (a instanceof Float32Array && dtype === 'float32') ||\r\n        (a instanceof Int32Array && dtype === 'int32') ||\r\n        (a instanceof Uint8Array && dtype === 'bool');\r\n}\r\n//# sourceMappingURL=array_ops.js.map","map":"{\"version\":3,\"file\":\"array_ops.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/ops/array_ops.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/ops/array_ops.d.ts","text":"import { Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, TensorBuffer } from '../tensor';\r\nimport { DataType, Rank, ShapeMap, TensorLike, TensorLike1D, TensorLike2D, TensorLike3D, TensorLike4D, TypedArray } from '../types';\r\nexport declare class ArrayOps {\r\n    static tensor<R extends Rank>(values: TensorLike, shape?: ShapeMap[R], dtype?: DataType): Tensor<R>;\r\n    static scalar(value: number | boolean, dtype?: DataType): Scalar;\r\n    static tensor1d(values: TensorLike1D, dtype?: DataType): Tensor1D;\r\n    static tensor2d(values: TensorLike2D, shape?: [number, number], dtype?: DataType): Tensor2D;\r\n    static tensor3d(values: TensorLike3D, shape?: [number, number, number], dtype?: DataType): Tensor3D;\r\n    static tensor4d(values: TensorLike4D, shape?: [number, number, number, number], dtype?: DataType): Tensor4D;\r\n    static ones<R extends Rank>(shape: ShapeMap[R], dtype?: DataType): Tensor<R>;\r\n    static zeros<R extends Rank>(shape: ShapeMap[R], dtype?: DataType): Tensor<R>;\r\n    static fill<R extends Rank>(shape: ShapeMap[R], value: number, dtype?: DataType): Tensor<R>;\r\n    static onesLike<T extends Tensor>(x: T): T;\r\n    static zerosLike<T extends Tensor>(x: T): T;\r\n    static clone<T extends Tensor>(x: T): T;\r\n    static eye(numRows: number, numColumns?: number, batchShape?: [number] | [number, number], dtype?: DataType): Tensor2D;\r\n    static randomNormal<R extends Rank>(shape: ShapeMap[R], mean?: number, stdDev?: number, dtype?: 'float32' | 'int32', seed?: number): Tensor<R>;\r\n    static truncatedNormal<R extends Rank>(shape: ShapeMap[R], mean?: number, stdDev?: number, dtype?: 'float32' | 'int32', seed?: number): Tensor<R>;\r\n    static randomUniform<R extends Rank>(shape: ShapeMap[R], minval?: number, maxval?: number, dtype?: DataType): Tensor<R>;\r\n    static rand<R extends Rank>(shape: ShapeMap[R], randFunction: () => number, dtype?: DataType): Tensor<R>;\r\n    static multinomial(logits: Tensor1D | Tensor2D, numSamples: number, seed?: number, normalized?: boolean): Tensor1D | Tensor2D;\r\n    static oneHot(indices: Tensor1D, depth: number, onValue?: number, offValue?: number): Tensor2D;\r\n    static fromPixels(pixels: ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, numChannels?: number): Tensor3D;\r\n    static toPixels(img: Tensor2D | Tensor3D, canvas?: HTMLCanvasElement): Promise<Uint8ClampedArray>;\r\n    static reshape<R2 extends Rank>(x: Tensor, shape: ShapeMap[R2]): Tensor<R2>;\r\n    static squeeze<T extends Tensor>(x: Tensor, axis?: number[]): T;\r\n    static cast<T extends Tensor>(x: T, dtype: DataType): T;\r\n    static tile<T extends Tensor>(x: T, reps: number[]): T;\r\n    static gather<T extends Tensor>(x: T, indices: Tensor1D, axis?: number): T;\r\n    static pad1d(x: Tensor1D, paddings: [number, number], constantValue?: number): Tensor1D;\r\n    static pad2d(x: Tensor2D, paddings: [[number, number], [number, number]], constantValue?: number): Tensor2D;\r\n    static pad3d(x: Tensor3D, paddings: [[number, number], [number, number], [number, number]], constantValue?: number): Tensor3D;\r\n    static pad4d(x: Tensor4D, paddings: [[number, number], [number, number], [number, number], [number, number]], constantValue?: number): Tensor4D;\r\n    static pad<T extends Tensor>(x: T, paddings: Array<[number, number]>, constantValue?: number): T;\r\n    static stack<T extends Tensor>(tensors: T[], axis?: number): Tensor;\r\n    static split<T extends Tensor>(x: T, numOrSizeSplits: number[] | number, axis?: number): T[];\r\n    static cumsum<T extends Tensor>(x: Tensor, axis?: number, exclusive?: boolean, reverse?: boolean): T;\r\n    static expandDims<R2 extends Rank>(x: Tensor, axis?: number): Tensor<R2>;\r\n    static linspace(start: number, stop: number, num: number): Tensor1D;\r\n    static range(start: number, stop: number, step?: number, dtype?: 'float32' | 'int32'): Tensor1D;\r\n    static buffer<R extends Rank>(shape: ShapeMap[R], dtype?: DataType, values?: TypedArray): TensorBuffer<R>;\r\n    static print<T extends Tensor>(x: T, verbose?: boolean): void;\r\n}\r\n"}}
