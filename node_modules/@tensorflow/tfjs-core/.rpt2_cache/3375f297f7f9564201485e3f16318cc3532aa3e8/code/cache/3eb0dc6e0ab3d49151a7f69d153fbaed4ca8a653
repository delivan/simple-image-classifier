{"code":"import { TextureType } from './tex_util';\r\nvar TextureManager = (function () {\r\n    function TextureManager(gpgpu) {\r\n        this.gpgpu = gpgpu;\r\n        this.numUsedTextures = 0;\r\n        this.numFreeTextures = 0;\r\n        this.freeTextures = {};\r\n        this.logEnabled = false;\r\n        this.allocatedTextures = [];\r\n        this.usedTextureCount = {};\r\n    }\r\n    TextureManager.prototype.acquireTexture = function (shapeRC, texType) {\r\n        if (texType === void 0) { texType = TextureType.FLOAT; }\r\n        var shapeKey = getKeyFromTextureShape(shapeRC, texType);\r\n        if (!(shapeKey in this.freeTextures)) {\r\n            this.freeTextures[shapeKey] = [];\r\n        }\r\n        if (!(shapeKey in this.usedTextureCount)) {\r\n            this.usedTextureCount[shapeKey] = 0;\r\n        }\r\n        this.usedTextureCount[shapeKey]++;\r\n        if (this.freeTextures[shapeKey].length > 0) {\r\n            this.numFreeTextures--;\r\n            this.numUsedTextures++;\r\n            this.log();\r\n            return this.freeTextures[shapeKey].shift();\r\n        }\r\n        this.numUsedTextures++;\r\n        this.log();\r\n        var newTexture = this.gpgpu.createMatrixTexture(shapeRC[0], shapeRC[1]);\r\n        this.allocatedTextures.push(newTexture);\r\n        return newTexture;\r\n    };\r\n    TextureManager.prototype.releaseTexture = function (texture, shape, texType) {\r\n        if (texType === void 0) { texType = TextureType.FLOAT; }\r\n        var shapeKey = getKeyFromTextureShape(shape, texType);\r\n        if (!(shapeKey in this.freeTextures)) {\r\n            this.freeTextures[shapeKey] = [];\r\n        }\r\n        this.freeTextures[shapeKey].push(texture);\r\n        this.numFreeTextures++;\r\n        this.numUsedTextures--;\r\n        this.usedTextureCount[shapeKey]--;\r\n        this.log();\r\n    };\r\n    TextureManager.prototype.log = function () {\r\n        if (!this.logEnabled) {\r\n            return;\r\n        }\r\n        var total = this.numFreeTextures + this.numUsedTextures;\r\n        console.log('Free/Used', this.numFreeTextures + \" / \" + this.numUsedTextures, \"(\" + total + \")\");\r\n    };\r\n    TextureManager.prototype.getNumUsedTextures = function () {\r\n        return this.numUsedTextures;\r\n    };\r\n    TextureManager.prototype.getNumFreeTextures = function () {\r\n        return this.numFreeTextures;\r\n    };\r\n    TextureManager.prototype.dispose = function () {\r\n        var _this = this;\r\n        if (this.allocatedTextures == null) {\r\n            return;\r\n        }\r\n        this.allocatedTextures.forEach(function (texture) {\r\n            _this.gpgpu.deleteMatrixTexture(texture);\r\n        });\r\n        this.freeTextures = null;\r\n        this.allocatedTextures = null;\r\n        this.usedTextureCount = null;\r\n        this.numUsedTextures = 0;\r\n        this.numFreeTextures = 0;\r\n    };\r\n    return TextureManager;\r\n}());\r\nexport { TextureManager };\r\nfunction getKeyFromTextureShape(shapeRowsCol, texType) {\r\n    return shapeRowsCol[0] + \"_\" + shapeRowsCol[1] + \"_\" + texType;\r\n}\r\n//# sourceMappingURL=texture_manager.js.map","map":"{\"version\":3,\"file\":\"texture_manager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/texture_manager.ts\"],\"names\":[],\"mappings\":\"AAkBA,OAAO,EAAC,WAAW,EAAC,MAAM,YAAY,CAAC;AAEvC;IAQE,wBAAoB,KAAmB;QAAnB,UAAK,GAAL,KAAK,CAAc;QAP/B,oBAAe,GAAG,CAAC,CAAC;QACpB,oBAAe,GAAG,CAAC,CAAC;QACpB,iBAAY,GAAsC,EAAE,CAAC;QACrD,eAAU,GAAG,KAAK,CAAC;QACnB,sBAAiB,GAAmB,EAAE,CAAC;QACvC,qBAAgB,GAA8B,EAAE,CAAC;IAEf,CAAC;IAE3C,uCAAc,GAAd,UAAe,OAAyB,EAAE,OAA2B;QAA3B,wBAAA,EAAA,UAAU,WAAW,CAAC,KAAK;QAEnE,IAAM,QAAQ,GAAG,sBAAsB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;QACnC,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACtC,CAAC;QACD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC;QAElC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,GAAG,EAAE,CAAC;YACX,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;QAC7C,CAAC;QACD,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,GAAG,EAAE,CAAC;QAEX,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxC,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAED,uCAAc,GAAd,UACI,OAAqB,EAAE,KAAuB,EAC9C,OAA2B;QAA3B,wBAAA,EAAA,UAAU,WAAW,CAAC,KAAK;QAC7B,IAAM,QAAQ,GAAG,sBAAsB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC;QAClC,IAAI,CAAC,GAAG,EAAE,CAAC;IACb,CAAC;IAEO,4BAAG,GAAX;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC;QACT,CAAC;QACD,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC1D,OAAO,CAAC,GAAG,CACP,WAAW,EAAK,IAAI,CAAC,eAAe,WAAM,IAAI,CAAC,eAAiB,EAChE,MAAI,KAAK,MAAG,CAAC,CAAC;IACpB,CAAC;IAED,2CAAkB,GAAlB;QACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,2CAAkB,GAAlB;QACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,gCAAO,GAAP;QAAA,iBAaC;QAZC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,CAAC,CAAC;YAEnC,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAA,OAAO;YACpC,KAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;IAC3B,CAAC;IACH,qBAAC;AAAD,CAAC,AAjFD,IAiFC;;AAED,gCACI,YAA8B,EAAE,OAAoB;IACtD,MAAM,CAAI,YAAY,CAAC,CAAC,CAAC,SAAI,YAAY,CAAC,CAAC,CAAC,SAAI,OAAS,CAAC;AAC5D,CAAC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/texture_manager.d.ts","text":"import { GPGPUContext } from './gpgpu_context';\r\nimport { TextureType } from './tex_util';\r\nexport declare class TextureManager {\r\n    private gpgpu;\r\n    private numUsedTextures;\r\n    private numFreeTextures;\r\n    private freeTextures;\r\n    private logEnabled;\r\n    private allocatedTextures;\r\n    private usedTextureCount;\r\n    constructor(gpgpu: GPGPUContext);\r\n    acquireTexture(shapeRC: [number, number], texType?: TextureType): WebGLTexture;\r\n    releaseTexture(texture: WebGLTexture, shape: [number, number], texType?: TextureType): void;\r\n    private log();\r\n    getNumUsedTextures(): number;\r\n    getNumFreeTextures(): number;\r\n    dispose(): void;\r\n}\r\n"}}
