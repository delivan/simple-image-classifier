{"code":"import * as util from '../util';\r\nexport function assertParamsValid(input, begin, size) {\r\n    util.assert(input.rank === begin.length, \"Error in slice\" + input.rank + \"D: Length of begin \" + begin + \" must \" +\r\n        (\"match the rank of the array (\" + input.rank + \").\"));\r\n    util.assert(input.rank === size.length, \"Error in slice\" + input.rank + \"D: Length of size \" + size + \" must \" +\r\n        (\"match the rank of the array (\" + input.rank + \").\"));\r\n    for (var i = 0; i < input.rank; ++i) {\r\n        util.assert(begin[i] + size[i] <= input.shape[i], \"Error in slice\" + input.rank + \"D: begin[\" + i + \"] + size[\" + i + \"] \" +\r\n            (\"(\" + (begin[i] + size[i]) + \") would overflow input.shape[\" + i + \"] (\" + input.shape[i] + \")\"));\r\n    }\r\n}\r\nexport function getStridedSlicedInfo(shape, begin, end, strides, beginMask, endMask) {\r\n    if (beginMask === void 0) { beginMask = 0; }\r\n    if (endMask === void 0) { endMask = 0; }\r\n    var startIndex = [];\r\n    var endIndex = [];\r\n    for (var i = 0; i < shape.length; i++) {\r\n        startIndex[i] = startForAxis(beginMask, begin, strides, shape, i);\r\n        endIndex[i] = stopForAxis(endMask, end, strides, shape, i);\r\n    }\r\n    var size = new Array(shape.length).fill(0);\r\n    size = size.map(function (d, i) {\r\n        var count = 0;\r\n        for (var start = startIndex[i]; !(strides[i] > 0 ? start >= endIndex[i] : start <= endIndex[i]); start += strides[i]) {\r\n            count += 1;\r\n        }\r\n        return count;\r\n    });\r\n    return [startIndex, size];\r\n}\r\nexport function startForAxis(beginMask, startIndices, strides, inputShape, axis) {\r\n    var start = startIndices[axis];\r\n    if (beginMask & 1 << axis) {\r\n        if (strides[axis] > 0) {\r\n            start = Number.MIN_SAFE_INTEGER;\r\n        }\r\n        else {\r\n            start = Number.MAX_SAFE_INTEGER;\r\n        }\r\n    }\r\n    var axisSize = inputShape[axis];\r\n    if (start < 0) {\r\n        start += axisSize;\r\n    }\r\n    start = util.clamp(0, start, axisSize - 1);\r\n    return start;\r\n}\r\nexport function stopForAxis(endMask, stopIndices, strides, inputShape, axis) {\r\n    var stop = stopIndices[axis];\r\n    if (endMask & (1 << axis)) {\r\n        if (strides[axis] > 0) {\r\n            stop = Number.MAX_SAFE_INTEGER;\r\n        }\r\n        else {\r\n            stop = Number.MIN_SAFE_INTEGER;\r\n        }\r\n    }\r\n    var axisSize = inputShape[axis];\r\n    if (stop < 0) {\r\n        stop += axisSize;\r\n    }\r\n    if (strides[axis] > 0) {\r\n        stop = util.clamp(0, stop, axisSize);\r\n    }\r\n    else {\r\n        stop = util.clamp(-1, stop, axisSize - 1);\r\n    }\r\n    return stop;\r\n}\r\n//# sourceMappingURL=slice_util.js.map","map":"{\"version\":3,\"file\":\"slice_util.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/ops/slice_util.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/ops/slice_util.d.ts","text":"import { Tensor } from '../tensor';\r\nexport declare function assertParamsValid(input: Tensor, begin: number[], size: number[]): void;\r\nexport declare function getStridedSlicedInfo(shape: number[], begin: number[], end: number[], strides: number[], beginMask?: number, endMask?: number): [number[], number[]];\r\nexport declare function startForAxis(beginMask: number, startIndices: number[], strides: number[], inputShape: number[], axis: number): number;\r\nexport declare function stopForAxis(endMask: number, stopIndices: number[], strides: number[], inputShape: number[], axis: number): number;\r\n"}}
