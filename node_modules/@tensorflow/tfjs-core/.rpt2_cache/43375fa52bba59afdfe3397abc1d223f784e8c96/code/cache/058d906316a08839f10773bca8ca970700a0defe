{"code":"import * as util from './util';\r\nexport function getFilteredNodesXToY(tape, xs, y) {\r\n    var tensorsFromX = {};\r\n    var nodesFromX = {};\r\n    for (var i = 0; i < xs.length; i++) {\r\n        tensorsFromX[xs[i].id] = true;\r\n    }\r\n    for (var i = 0; i < tape.length; i++) {\r\n        var node = tape[i];\r\n        var nodeInputs = node.inputs;\r\n        for (var inputName in nodeInputs) {\r\n            var input = nodeInputs[inputName];\r\n            var anyInputFromX = false;\r\n            for (var j = 0; j < xs.length; j++) {\r\n                if (tensorsFromX[input.id]) {\r\n                    tensorsFromX[node.output.id] = true;\r\n                    anyInputFromX = true;\r\n                    nodesFromX[node.id] = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (anyInputFromX) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    var tensorsLeadToY = {};\r\n    tensorsLeadToY[y.id] = true;\r\n    var nodesToY = {};\r\n    for (var i = tape.length - 1; i >= 0; i--) {\r\n        var node = tape[i];\r\n        var nodeInputs = node.inputs;\r\n        var outputs = [];\r\n        outputs.push(node.output);\r\n        for (var j = 0; j < outputs.length; j++) {\r\n            if (tensorsLeadToY[outputs[j].id]) {\r\n                for (var inputName in nodeInputs) {\r\n                    tensorsLeadToY[nodeInputs[inputName].id] = true;\r\n                    nodesToY[node.id] = true;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    var filteredTape = [];\r\n    for (var i = 0; i < tape.length; i++) {\r\n        var node = tape[i];\r\n        if (nodesFromX[node.id] && nodesToY[node.id]) {\r\n            var prunedInputs = {};\r\n            for (var inputName in node.inputs) {\r\n                var nodeInput = node.inputs[inputName];\r\n                if (tensorsFromX[nodeInput.id]) {\r\n                    prunedInputs[inputName] = nodeInput;\r\n                }\r\n            }\r\n            var prunedNode = Object.assign({}, node);\r\n            prunedNode.inputs = prunedInputs;\r\n            prunedNode.output = node.output;\r\n            filteredTape.push(prunedNode);\r\n        }\r\n    }\r\n    return filteredTape;\r\n}\r\nexport function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape) {\r\n    for (var i = filteredTape.length - 1; i >= 0; i--) {\r\n        var node = filteredTape[i];\r\n        var dy = tensorAccumulatedGradientMap[node.output.id];\r\n        if (node.gradient == null) {\r\n            throw new Error(\"Cannot compute gradient: gradient function not found \" +\r\n                (\"for \" + node.name + \".\"));\r\n        }\r\n        var inputGradients = node.gradient(dy);\r\n        for (var inputName in node.inputs) {\r\n            if (!(inputName in inputGradients)) {\r\n                throw new Error(\"Cannot backprop through input \" + inputName + \". \" +\r\n                    (\"Available gradients found: \" + Object.keys(inputGradients) + \".\"));\r\n            }\r\n            var dx = inputGradients[inputName]();\r\n            var x = node.inputs[inputName];\r\n            if (!util.arraysEqual(dx.shape, x.shape)) {\r\n                throw new Error(\"Error in gradient for op \" + node.name + \". The gradient of input \" +\r\n                    (\"'\" + inputName + \"' has shape '\" + dx.shape + \"', which does not match \") +\r\n                    (\"the shape of the input '\" + x.shape + \"'\"));\r\n            }\r\n            if (tensorAccumulatedGradientMap[x.id] == null) {\r\n                tensorAccumulatedGradientMap[x.id] = dx;\r\n            }\r\n            else {\r\n                var curGradient = tensorAccumulatedGradientMap[x.id];\r\n                tensorAccumulatedGradientMap[x.id] = curGradient.add(dx);\r\n                curGradient.dispose();\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=tape.js.map","map":"{\"version\":3,\"file\":\"tape.js\",\"sourceRoot\":\"\",\"sources\":[\"src/tape.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/tape.d.ts","text":"import { Tensor } from './tensor';\r\nimport { NamedTensorMap } from './types';\r\nexport interface TapeNode {\r\n    id: number;\r\n    name: string;\r\n    output: Tensor;\r\n    inputs: NamedTensorMap;\r\n    gradient?: (dy: Tensor | NamedTensorMap) => NamedGradientMap;\r\n}\r\nexport declare type NamedGradientMap = {\r\n    [inputName: string]: () => Tensor;\r\n};\r\nexport declare function getFilteredNodesXToY(tape: TapeNode[], xs: Tensor[], y: Tensor): TapeNode[];\r\nexport declare function backpropagateGradients(tensorAccumulatedGradientMap: {\r\n    [tensorId: number]: Tensor;\r\n}, filteredTape: TapeNode[]): void;\r\n"}}
