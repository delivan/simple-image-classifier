{"code":"import * as tslib_1 from \"tslib\";\r\nimport { doc } from '../doc';\r\nimport { ENV } from '../environment';\r\nimport * as util from '../util';\r\nimport * as conv_util from './conv_util';\r\nimport { operation } from './operation';\r\nvar PoolOps = (function () {\r\n    function PoolOps() {\r\n    }\r\n    PoolOps.maxPool = function (x, filterSize, strides, pad, dimRoundingMode) {\r\n        util.assertArgumentsAreTensors({ x: x }, 'maxPool');\r\n        var x4D = x;\r\n        var reshapedTo4D = false;\r\n        if (x.rank === 3) {\r\n            reshapedTo4D = true;\r\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\r\n        }\r\n        util.assert(x4D.rank === 4, \"Error in maxPool: input must be rank 4 but got rank \" + x4D.rank + \".\");\r\n        if (dimRoundingMode != null) {\r\n            util.assert(util.isInt(pad), \"Error in maxPool: pad must be an integer when using, \" +\r\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\r\n        }\r\n        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad, dimRoundingMode);\r\n        var grad = function (dy, saved) {\r\n            var y4D = saved[0];\r\n            return {\r\n                x: function () { return PoolOps.maxPoolBackprop(dy, x4D, y4D, filterSize, strides, pad); }\r\n            };\r\n        };\r\n        var res = ENV.engine.runKernel(function (backend, save) { return save(backend.maxPool(x4D, convInfo)); }, { x: x4D }, grad);\r\n        if (reshapedTo4D) {\r\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\r\n        }\r\n        return res;\r\n    };\r\n    PoolOps.maxPoolBackprop = function (dy, input, output, filterSize, strides, pad, dimRoundingMode) {\r\n        util.assertArgumentsAreTensors({ dy: dy, input: input, output: output }, 'maxPoolBackprop');\r\n        util.assert(input.rank === dy.rank, \"Rank of input (\" + input.rank + \") does not match rank of dy (\" + dy.rank + \")\");\r\n        util.assert(dy.rank === 4, \"Error in maxPoolBackprop: dy must be rank 4 but got rank \" +\r\n            (dy.rank + \".\"));\r\n        util.assert(input.rank === 4, \"Error in maxPoolBackprop: input must be rank 4 but got rank \" +\r\n            (input.rank + \".\"));\r\n        if (dimRoundingMode != null) {\r\n            util.assert(util.isInt(pad), \"Error in maxPoolBackprop: pad must be an integer when using, \" +\r\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\r\n        }\r\n        var convInfo = conv_util.computePool2DInfo(input.shape, filterSize, strides, pad, dimRoundingMode);\r\n        var res = ENV.engine.runKernel(function (backend) { return backend.maxPoolBackprop(dy, input, output, convInfo); }, { dy: dy, input: input });\r\n        return res;\r\n    };\r\n    PoolOps.avgPool = function (x, filterSize, strides, pad, dimRoundingMode) {\r\n        util.assertArgumentsAreTensors({ x: x }, 'avgPool');\r\n        util.assert(x.dtype === 'float32', 'The input dtype to avgPool must be float32');\r\n        var x4D = x;\r\n        var reshapedTo4D = false;\r\n        if (x.rank === 3) {\r\n            reshapedTo4D = true;\r\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\r\n        }\r\n        util.assert(x4D.rank === 4, \"Error in avgPool: x must be rank 4 but got rank \" + x4D.rank + \".\");\r\n        if (dimRoundingMode != null) {\r\n            util.assert(util.isInt(pad), \"Error in avgPool: pad must be an integer when using, \" +\r\n                (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\r\n        }\r\n        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad);\r\n        var grad = function (dy) {\r\n            return {\r\n                x: function () { return PoolOps.avgPoolBackprop(dy, x4D, filterSize, strides, pad); }\r\n            };\r\n        };\r\n        var res = ENV.engine.runKernel(function (backend) { return backend.avgPool(x4D, convInfo); }, { x: x4D }, grad);\r\n        res = res.cast(x.dtype);\r\n        if (reshapedTo4D) {\r\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\r\n        }\r\n        return res;\r\n    };\r\n    PoolOps.avgPoolBackprop = function (dy, input, filterSize, strides, pad) {\r\n        util.assertArgumentsAreTensors({ dy: dy, input: input }, 'avgPoolBackprop');\r\n        util.assert(input.rank === dy.rank, \"Rank of input (\" + input.rank + \") does not match rank of dy (\" + dy.rank + \")\");\r\n        var input4D = input;\r\n        var dy4D = dy;\r\n        var reshapedTo4D = false;\r\n        if (input.rank === 3) {\r\n            reshapedTo4D = true;\r\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\r\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\r\n        }\r\n        util.assert(dy4D.rank === 4, \"Error in avgPoolBackprop: dy must be rank 4 but got rank \" +\r\n            (dy4D.rank + \".\"));\r\n        util.assert(input4D.rank === 4, \"Error in avgPoolBackprop: input must be rank 4 but got rank \" +\r\n            (input4D.rank + \".\"));\r\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad);\r\n        var res = ENV.engine.runKernel(function (backend) { return backend.avgPoolBackprop(dy4D, input4D, convInfo); }, { dy4D: dy4D, input4D: input4D });\r\n        if (reshapedTo4D) {\r\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\r\n        }\r\n        return res;\r\n    };\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Operations', subheading: 'Convolution' }),\r\n        operation\r\n    ], PoolOps, \"maxPool\", null);\r\n    tslib_1.__decorate([\r\n        operation\r\n    ], PoolOps, \"maxPoolBackprop\", null);\r\n    tslib_1.__decorate([\r\n        doc({ heading: 'Operations', subheading: 'Convolution' }),\r\n        operation\r\n    ], PoolOps, \"avgPool\", null);\r\n    tslib_1.__decorate([\r\n        operation\r\n    ], PoolOps, \"avgPoolBackprop\", null);\r\n    return PoolOps;\r\n}());\r\nexport { PoolOps };\r\n//# sourceMappingURL=pool.js.map","map":"{\"version\":3,\"file\":\"pool.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/ops/pool.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/ops/pool.d.ts","text":"import { Tensor3D, Tensor4D } from '../tensor';\r\nexport declare class PoolOps {\r\n    static maxPool<T extends Tensor3D | Tensor4D>(x: T, filterSize: [number, number] | number, strides: [number, number] | number, pad: 'valid' | 'same' | number, dimRoundingMode?: 'floor' | 'round' | 'ceil'): T;\r\n    static maxPoolBackprop(dy: Tensor4D, input: Tensor4D, output: Tensor4D, filterSize: [number, number] | number, strides: [number, number] | number, pad: 'valid' | 'same' | number, dimRoundingMode?: 'floor' | 'round' | 'ceil'): Tensor4D;\r\n    static avgPool<T extends Tensor3D | Tensor4D>(x: T, filterSize: [number, number] | number, strides: [number, number] | number, pad: 'valid' | 'same' | number, dimRoundingMode?: 'floor' | 'round' | 'ceil'): T;\r\n    static avgPoolBackprop<T extends Tensor3D | Tensor4D>(dy: T, input: T, filterSize: [number, number] | number, strides: [number, number] | number, pad: 'valid' | 'same' | number): T;\r\n}\r\n"}}
