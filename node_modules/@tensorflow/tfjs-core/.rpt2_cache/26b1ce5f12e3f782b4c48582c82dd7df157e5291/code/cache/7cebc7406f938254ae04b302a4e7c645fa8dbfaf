{"code":"var MultinomialProgram = (function () {\r\n    function MultinomialProgram(batchSize, numOutcomes, numSamples) {\r\n        this.variableNames = ['probs'];\r\n        this.outputShape = [batchSize, numSamples];\r\n        this.userCode = \"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \" + (numOutcomes - 1) + \"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\" + (numOutcomes - 1) + \"));\\n      }\\n    \";\r\n    }\r\n    MultinomialProgram.prototype.getCustomSetupFunc = function (seed) {\r\n        var _this = this;\r\n        return function (gpgpu, webGLProgram) {\r\n            if (_this.seedLoc == null) {\r\n                _this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\r\n            }\r\n            gpgpu.gl.uniform1f(_this.seedLoc, seed);\r\n        };\r\n    };\r\n    return MultinomialProgram;\r\n}());\r\nexport { MultinomialProgram };\r\n//# sourceMappingURL=multinomial_gpu.js.map","map":"{\"version\":3,\"file\":\"multinomial_gpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/multinomial_gpu.ts\"],\"names\":[],\"mappings\":\"AAoBA;IAQE,4BAAY,SAAiB,EAAE,WAAmB,EAAE,UAAkB;QAPtE,kBAAa,GAAG,CAAC,OAAO,CAAC,CAAC;QAQxB,IAAI,CAAC,WAAW,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAE3C,IAAI,CAAC,QAAQ,GAAG,gOAUU,WAAW,GAAG,CAAC,4PAUnB,WAAW,GAAG,CAAC,wBAEpC,CAAC;IACJ,CAAC;IAED,+CAAkB,GAAlB,UAAmB,IAAY;QAA/B,iBAOC;QANC,MAAM,CAAC,UAAC,KAAmB,EAAE,YAA0B;YACrD,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;gBACzB,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC,kBAAkB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAChE,CAAC;YACD,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,KAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC;IACJ,CAAC;IACH,yBAAC;AAAD,CAAC,AA5CD,IA4CC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/multinomial_gpu.d.ts","text":"import { GPGPUContext } from './gpgpu_context';\r\nimport { GPGPUProgram } from './gpgpu_math';\r\nexport declare class MultinomialProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    outputShape: number[];\r\n    userCode: string;\r\n    seedLoc: WebGLUniformLocation;\r\n    constructor(batchSize: number, numOutcomes: number, numSamples: number);\r\n    getCustomSetupFunc(seed: number): (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void;\r\n}\r\n"}}
