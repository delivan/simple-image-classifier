{"code":"import * as tslib_1 from \"tslib\";\r\nimport { tensor } from '../ops/ops';\r\nimport * as util from '../util';\r\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\r\nexport function loadWeights(manifest, filePathPrefix, weightNames, requestOptions) {\r\n    if (filePathPrefix === void 0) { filePathPrefix = ''; }\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var groupIndicesToFetchMap, groupWeightsToFetch, weightsFound, allManifestWeightNames, weightsNotFound, groupIndicesToFetch, requests, responses, buffers, weightsTensorMap, bufferIndexOffset;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    groupIndicesToFetchMap = manifest.map(function () { return false; });\r\n                    groupWeightsToFetch = {};\r\n                    weightsFound = weightNames != null ? weightNames.map(function () { return false; }) : [];\r\n                    allManifestWeightNames = [];\r\n                    manifest.forEach(function (manifestGroupConfig, groupIndex) {\r\n                        var groupOffset = 0;\r\n                        manifestGroupConfig.weights.forEach(function (weightsEntry) {\r\n                            var rawDtype = ('quantization' in weightsEntry) ?\r\n                                weightsEntry.quantization.dtype :\r\n                                weightsEntry.dtype;\r\n                            var weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\r\n                                util.sizeFromShape(weightsEntry.shape);\r\n                            var enqueueWeightsForFetchingFn = function () {\r\n                                groupIndicesToFetchMap[groupIndex] = true;\r\n                                if (groupWeightsToFetch[groupIndex] == null) {\r\n                                    groupWeightsToFetch[groupIndex] = [];\r\n                                }\r\n                                groupWeightsToFetch[groupIndex].push({\r\n                                    manifestEntry: weightsEntry,\r\n                                    groupOffset: groupOffset,\r\n                                    sizeBytes: weightsBytes\r\n                                });\r\n                            };\r\n                            if (weightNames != null) {\r\n                                weightNames.forEach(function (weightName, weightIndex) {\r\n                                    if (weightName === weightsEntry.name) {\r\n                                        enqueueWeightsForFetchingFn();\r\n                                        weightsFound[weightIndex] = true;\r\n                                    }\r\n                                });\r\n                            }\r\n                            else {\r\n                                enqueueWeightsForFetchingFn();\r\n                            }\r\n                            allManifestWeightNames.push(weightsEntry.name);\r\n                            groupOffset += weightsBytes;\r\n                        });\r\n                    });\r\n                    if (!weightsFound.every(function (found) { return found; })) {\r\n                        weightsNotFound = weightNames.filter(function (weight, i) { return !weightsFound[i]; });\r\n                        throw new Error(\"Could not find weights in manifest with names: \" +\r\n                            (weightsNotFound.join(', ') + \". \\n\") +\r\n                            \"Manifest JSON has weights with names: \" +\r\n                            (allManifestWeightNames.join(', ') + \".\"));\r\n                    }\r\n                    groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {\r\n                        if (shouldFetch) {\r\n                            accumulator.push(i);\r\n                        }\r\n                        return accumulator;\r\n                    }, []);\r\n                    requests = [];\r\n                    groupIndicesToFetch.forEach(function (i) {\r\n                        manifest[i].paths.forEach(function (filepath) {\r\n                            var fetchUrl = filePathPrefix +\r\n                                (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\r\n                            requests.push(fetch(fetchUrl, requestOptions));\r\n                        });\r\n                    });\r\n                    return [4, Promise.all(requests)];\r\n                case 1:\r\n                    responses = _a.sent();\r\n                    return [4, Promise.all(responses.map(function (response) { return response.arrayBuffer(); }))];\r\n                case 2:\r\n                    buffers = _a.sent();\r\n                    weightsTensorMap = {};\r\n                    bufferIndexOffset = 0;\r\n                    groupIndicesToFetch.forEach(function (i) {\r\n                        var numBuffers = manifest[i].paths.length;\r\n                        var groupBytes = 0;\r\n                        for (var i_1 = 0; i_1 < numBuffers; i_1++) {\r\n                            groupBytes += buffers[bufferIndexOffset + i_1].byteLength;\r\n                        }\r\n                        var groupBuffer = new ArrayBuffer(groupBytes);\r\n                        var groupByteBuffer = new Uint8Array(groupBuffer);\r\n                        var groupBufferOffset = 0;\r\n                        for (var i_2 = 0; i_2 < numBuffers; i_2++) {\r\n                            var buffer = new Uint8Array(buffers[bufferIndexOffset + i_2]);\r\n                            groupByteBuffer.set(buffer, groupBufferOffset);\r\n                            groupBufferOffset += buffer.byteLength;\r\n                        }\r\n                        var weightsEntries = groupWeightsToFetch[i];\r\n                        weightsEntries.forEach(function (weightsEntry) {\r\n                            var byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\r\n                            var typedArray;\r\n                            var dtype = weightsEntry.manifestEntry.dtype;\r\n                            if ('quantization' in weightsEntry.manifestEntry) {\r\n                                var quantization_1 = weightsEntry.manifestEntry.quantization;\r\n                                if (quantization_1.dtype !== 'uint8' && quantization_1.dtype !== 'uint16') {\r\n                                    throw new Error(\"Weight \" + weightsEntry.manifestEntry.name + \" has unknown \" +\r\n                                        (\"quantization dtype \" + quantization_1.dtype + \".\"));\r\n                                }\r\n                                var quantizedArray = (quantization_1.dtype === 'uint8') ?\r\n                                    new Uint8Array(byteBuffer) :\r\n                                    new Uint16Array(byteBuffer);\r\n                                if (dtype === 'float32') {\r\n                                    typedArray = Float32Array.from(quantizedArray, function (v) { return v * quantization_1.scale + quantization_1.min; });\r\n                                }\r\n                                else if (dtype === 'int32') {\r\n                                    typedArray = Int32Array.from(quantizedArray, function (v) { return Math.round(v * quantization_1.scale + quantization_1.min); });\r\n                                }\r\n                                else {\r\n                                    throw new Error(\"Weight \" + weightsEntry.manifestEntry.name + \" has a dtype not \" +\r\n                                        (\"supported by quantization: \" + dtype));\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (dtype === 'float32') {\r\n                                    typedArray = new Float32Array(byteBuffer);\r\n                                }\r\n                                else if (dtype === 'int32') {\r\n                                    typedArray = new Int32Array(byteBuffer);\r\n                                }\r\n                                else {\r\n                                    throw new Error(\"Weight \" + weightsEntry.manifestEntry.name + \" has unknown dtype \" +\r\n                                        (dtype + \".\"));\r\n                                }\r\n                            }\r\n                            var weightName = weightsEntry.manifestEntry.name;\r\n                            if (weightsTensorMap[weightName] != null) {\r\n                                throw new Error(\"Duplicate weight with name \" + weightName + \". \" +\r\n                                    \"Please make sure weights names are unique in the manifest JSON.\");\r\n                            }\r\n                            weightsTensorMap[weightName] = tensor(typedArray, weightsEntry.manifestEntry.shape, weightsEntry.manifestEntry.dtype);\r\n                        });\r\n                        bufferIndexOffset += numBuffers;\r\n                    });\r\n                    return [2, weightsTensorMap];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=weights_loader.js.map","map":"{\"version\":3,\"file\":\"weights_loader.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/io/weights_loader.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/io/weights_loader.d.ts","text":"import { NamedTensorMap } from '../types';\r\nimport { WeightsManifestConfig } from './types';\r\nexport declare function loadWeights(manifest: WeightsManifestConfig, filePathPrefix?: string, weightNames?: string[], requestOptions?: RequestInit): Promise<NamedTensorMap>;\r\n"}}
