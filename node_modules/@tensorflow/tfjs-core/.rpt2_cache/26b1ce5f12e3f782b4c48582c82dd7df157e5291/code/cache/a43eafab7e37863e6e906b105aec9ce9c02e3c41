{"code":"export var TextureType;\r\n(function (TextureType) {\r\n    TextureType[TextureType[\"FLOAT\"] = 0] = \"FLOAT\";\r\n    TextureType[TextureType[\"UNSIGNED_BYTE\"] = 1] = \"UNSIGNED_BYTE\";\r\n})(TextureType || (TextureType = {}));\r\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\r\n    return [columns, rows];\r\n}\r\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\r\n    return matrixSize * channelsPerTexture;\r\n}\r\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\r\n    return [columns * 4, rows];\r\n}\r\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\r\n    if (unpackedSize % channelsPerTexture !== 0) {\r\n        throw new Error(\"unpackedSize (\" + unpackedSize + \") must be a multiple of \" +\r\n            (\"\" + channelsPerTexture));\r\n    }\r\n    return unpackedSize / channelsPerTexture;\r\n}\r\nexport function encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture) {\r\n    var requiredSize = getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture);\r\n    if (unpackedArray.length < requiredSize) {\r\n        throw new Error(\"unpackedArray length (\" + unpackedArray.length + \") must be >= \" +\r\n            (\"\" + requiredSize));\r\n    }\r\n    var dst = 0;\r\n    for (var src = 0; src < matrix.length; ++src) {\r\n        unpackedArray[dst] = matrix[src];\r\n        dst += channelsPerTexture;\r\n    }\r\n}\r\nexport var FLOAT_MAX = 20000;\r\nexport var FLOAT_MIN = -FLOAT_MAX;\r\nvar FLOAT_RANGE = (FLOAT_MAX - FLOAT_MIN) / 255;\r\nvar FLOAT_DELTAS = [1, 1 / 255, 1 / (255 * 255), 1 / (255 * 255 * 255)];\r\nvar FLOAT_POWERS = [1, 255, 255 * 255];\r\nexport var BYTE_NAN_VALUE = 0;\r\nexport function encodeFloatArray(floatArray) {\r\n    var uintArray = new Uint8Array(floatArray.length * 4);\r\n    var _loop_1 = function (i) {\r\n        var value = floatArray[i / 4];\r\n        if (isNaN(value)) {\r\n            uintArray[i] = BYTE_NAN_VALUE;\r\n            uintArray[i + 1] = BYTE_NAN_VALUE;\r\n            uintArray[i + 2] = BYTE_NAN_VALUE;\r\n            uintArray[i + 3] = BYTE_NAN_VALUE;\r\n            return \"continue\";\r\n        }\r\n        var normalizedValue = (value - FLOAT_MIN) / FLOAT_RANGE;\r\n        var enc = FLOAT_POWERS.map(function (pow) { return pow * normalizedValue; });\r\n        var buckets = enc.map(function (value) { return Math.floor((value % 1) * 255); });\r\n        uintArray[i] = Math.floor(normalizedValue);\r\n        uintArray[i + 1] = buckets[0];\r\n        uintArray[i + 2] = buckets[1];\r\n        uintArray[i + 3] = buckets[2];\r\n    };\r\n    for (var i = 0; i < uintArray.length; i += 4) {\r\n        _loop_1(i);\r\n    }\r\n    return uintArray;\r\n}\r\nexport function decodeToFloatArray(uintArray) {\r\n    var floatArray = new Float32Array(uintArray.length / 4);\r\n    var _loop_2 = function (i) {\r\n        if (uintArray[i] === BYTE_NAN_VALUE &&\r\n            uintArray[i + 1] === BYTE_NAN_VALUE &&\r\n            uintArray[i + 2] === BYTE_NAN_VALUE &&\r\n            uintArray[i + 3] === BYTE_NAN_VALUE) {\r\n            floatArray[i / 4] = NaN;\r\n            return \"continue\";\r\n        }\r\n        var dot = 0;\r\n        FLOAT_DELTAS.forEach(function (delta, j) {\r\n            dot += delta * uintArray[i + j];\r\n        });\r\n        var value = dot * FLOAT_RANGE + FLOAT_MIN;\r\n        floatArray[i / 4] = value;\r\n    };\r\n    for (var i = 0; i < uintArray.length; i += 4) {\r\n        _loop_2(i);\r\n    }\r\n    return floatArray;\r\n}\r\nexport function decodeMatrixFromUnpackedArray(unpackedArray, matrix, channelsPerTexture) {\r\n    var requiredSize = getMatrixSizeFromUnpackedArraySize(unpackedArray.length, channelsPerTexture);\r\n    if (matrix.length < requiredSize) {\r\n        throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\r\n    }\r\n    var dst = 0;\r\n    for (var src = 0; src < unpackedArray.length; src += channelsPerTexture) {\r\n        matrix[dst++] = unpackedArray[src];\r\n    }\r\n}\r\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\r\n    var requiredSize = unpackedArray.length * channels / 4;\r\n    if (matrix.length < requiredSize) {\r\n        throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\r\n    }\r\n    var dst = 0;\r\n    for (var src = 0; src < unpackedArray.length; src += 4) {\r\n        for (var c = 0; c < channels; c++) {\r\n            matrix[dst++] = unpackedArray[src + c];\r\n        }\r\n    }\r\n}\r\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\r\n    return [Math.ceil(columns / 2), Math.ceil(rows / 2)];\r\n}\r\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\r\n    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];\r\n    return w * h * 4;\r\n}\r\nexport function encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA) {\r\n    var requiredSize = getPackedRGBAArraySizeFromMatrixShape(rows, columns);\r\n    if (packedRGBA.length < requiredSize) {\r\n        throw new Error(\"packedRGBA length (\" + packedRGBA.length + \") must be >= \" + requiredSize);\r\n    }\r\n    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), textureWidth = _a[0], textureHeight = _a[1];\r\n    var oddWidth = (columns % 2) === 1;\r\n    var oddHeight = (rows % 2) === 1;\r\n    var widthInFullBlocks = Math.floor(columns / 2);\r\n    var heightInFullBlocks = Math.floor(rows / 2);\r\n    {\r\n        var dstStride = (oddWidth ? 4 : 0);\r\n        var oneRow = columns;\r\n        var dst = 0;\r\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\r\n            var matrixSrcRow = (blockY * 2 * columns);\r\n            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\r\n                var matrixSrcCol = blockX * 2;\r\n                var src = matrixSrcRow + matrixSrcCol;\r\n                packedRGBA[dst] = matrix[src];\r\n                packedRGBA[dst + 1] = matrix[src + 1];\r\n                packedRGBA[dst + 2] = matrix[src + oneRow];\r\n                packedRGBA[dst + 3] = matrix[src + oneRow + 1];\r\n                dst += 4;\r\n            }\r\n            dst += dstStride;\r\n        }\r\n    }\r\n    if (oddWidth) {\r\n        var src = columns - 1;\r\n        var dst = (textureWidth - 1) * 4;\r\n        var srcStride = 2 * columns;\r\n        var dstStride = textureWidth * 4;\r\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\r\n            packedRGBA[dst] = matrix[src];\r\n            packedRGBA[dst + 2] = matrix[src + columns];\r\n            src += srcStride;\r\n            dst += dstStride;\r\n        }\r\n    }\r\n    if (oddHeight) {\r\n        var src = (rows - 1) * columns;\r\n        var dst = (textureHeight - 1) * textureWidth * 4;\r\n        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\r\n            packedRGBA[dst++] = matrix[src++];\r\n            packedRGBA[dst++] = matrix[src++];\r\n            dst += 2;\r\n        }\r\n    }\r\n    if (oddWidth && oddHeight) {\r\n        packedRGBA[packedRGBA.length - 4] = matrix[matrix.length - 1];\r\n    }\r\n    return packedRGBA;\r\n}\r\nexport function decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix) {\r\n    var requiredSize = rows * columns;\r\n    if (requiredSize < matrix.length) {\r\n        throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\r\n    }\r\n    var oddWidth = (columns % 2) === 1;\r\n    var oddHeight = (rows % 2) === 1;\r\n    var widthInFullBlocks = Math.floor(columns / 2);\r\n    var heightInFullBlocks = Math.floor(rows / 2);\r\n    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), textureWidth = _a[0], textureHeight = _a[1];\r\n    {\r\n        var srcStride = oddWidth ? 4 : 0;\r\n        var dstStride = columns + (oddWidth ? 1 : 0);\r\n        var src = 0;\r\n        var dstRow1 = 0;\r\n        var dstRow2 = columns;\r\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\r\n            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\r\n                matrix[dstRow1++] = packedRGBA[src++];\r\n                matrix[dstRow1++] = packedRGBA[src++];\r\n                matrix[dstRow2++] = packedRGBA[src++];\r\n                matrix[dstRow2++] = packedRGBA[src++];\r\n            }\r\n            src += srcStride;\r\n            dstRow1 += dstStride;\r\n            dstRow2 += dstStride;\r\n        }\r\n    }\r\n    if (oddWidth) {\r\n        var src = (textureWidth - 1) * 4;\r\n        var dst = columns - 1;\r\n        var srcStride = textureWidth * 4;\r\n        var dstStride = 2 * columns;\r\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\r\n            matrix[dst] = packedRGBA[src];\r\n            matrix[dst + columns] = packedRGBA[src + 2];\r\n            src += srcStride;\r\n            dst += dstStride;\r\n        }\r\n    }\r\n    if (oddHeight) {\r\n        var src = (textureHeight - 1) * textureWidth * 4;\r\n        var dst = (rows - 1) * columns;\r\n        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\r\n            matrix[dst++] = packedRGBA[src++];\r\n            matrix[dst++] = packedRGBA[src++];\r\n            src += 2;\r\n        }\r\n    }\r\n    if (oddWidth && oddHeight) {\r\n        matrix[matrix.length - 1] = packedRGBA[packedRGBA.length - 4];\r\n    }\r\n    return matrix;\r\n}\r\n//# sourceMappingURL=tex_util.js.map","map":"{\"version\":3,\"file\":\"tex_util.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/tex_util.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/tex_util.d.ts","text":"import { DataType, DataTypeMap } from '../../types';\r\nexport declare enum TextureType {\r\n    FLOAT = 0,\r\n    UNSIGNED_BYTE = 1,\r\n}\r\nexport interface TextureData {\r\n    texture: WebGLTexture;\r\n    shape: number[];\r\n    texShape: [number, number];\r\n    dtype: DataType;\r\n    values: DataTypeMap[DataType];\r\n    texType: TextureType;\r\n}\r\nexport declare function getUnpackedMatrixTextureShapeWidthHeight(rows: number, columns: number): [number, number];\r\nexport declare function getUnpackedArraySizeFromMatrixSize(matrixSize: number, channelsPerTexture: number): number;\r\nexport declare function getColorMatrixTextureShapeWidthHeight(rows: number, columns: number): [number, number];\r\nexport declare function getMatrixSizeFromUnpackedArraySize(unpackedSize: number, channelsPerTexture: number): number;\r\nexport declare type TypedArray = Float32Array | Uint8Array;\r\nexport declare function encodeMatrixToUnpackedArray(matrix: TypedArray, unpackedArray: TypedArray, channelsPerTexture: number): void;\r\nexport declare const FLOAT_MAX = 20000;\r\nexport declare const FLOAT_MIN: number;\r\nexport declare const BYTE_NAN_VALUE = 0;\r\nexport declare function encodeFloatArray(floatArray: Float32Array): Uint8Array;\r\nexport declare function decodeToFloatArray(uintArray: Uint8Array): Float32Array;\r\nexport declare function decodeMatrixFromUnpackedArray(unpackedArray: Float32Array, matrix: Float32Array, channelsPerTexture: number): void;\r\nexport declare function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray: Float32Array, matrix: Float32Array, channels: number): void;\r\nexport declare function getPackedMatrixTextureShapeWidthHeight(rows: number, columns: number): [number, number];\r\nexport declare function getPackedRGBAArraySizeFromMatrixShape(rows: number, columns: number): number;\r\nexport declare function encodeMatrixToPackedRGBA(matrix: Float32Array, rows: number, columns: number, packedRGBA: Float32Array): Float32Array;\r\nexport declare function decodeMatrixFromPackedRGBA(packedRGBA: Float32Array, rows: number, columns: number, matrix: Float32Array): Float32Array;\r\n"}}
