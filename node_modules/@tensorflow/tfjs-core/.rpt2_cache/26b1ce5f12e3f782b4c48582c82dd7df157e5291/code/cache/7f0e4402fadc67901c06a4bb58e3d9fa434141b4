{"code":"var LRNProgram = (function () {\r\n    function LRNProgram(xShape, radius, bias, alpha, beta) {\r\n        this.variableNames = ['x'];\r\n        this.outputShape = [];\r\n        var rad = radius;\r\n        var maxD = xShape[3] - 1;\r\n        this.outputShape = xShape;\r\n        var powOperator;\r\n        var basis = \"float(\" + bias + \") + float(\" + alpha + \") * sum\";\r\n        if (beta === 0.5) {\r\n            powOperator = \"inversesqrt(\" + basis + \")\";\r\n        }\r\n        else if (beta === 1.0) {\r\n            powOperator = \"1.0/(\" + basis + \")\";\r\n        }\r\n        else {\r\n            powOperator = \"exp(log(\" + basis + \") * float(-\" + beta + \"));\";\r\n        }\r\n        this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\" + rad + \"; j <= \" + rad + \"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \" + maxD + \") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \" + powOperator + \";\\n        setOutput(val);\\n      }\\n    \";\r\n    }\r\n    return LRNProgram;\r\n}());\r\nexport { LRNProgram };\r\n//# sourceMappingURL=lrn_gpu.js.map","map":"{\"version\":3,\"file\":\"lrn_gpu.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/kernels/webgl/lrn_gpu.ts\"],\"names\":[],\"mappings\":\"AAmBA;IAKE,oBACI,MAAgB,EAAE,MAAc,EAAE,IAAY,EAAE,KAAa,EAC7D,IAAY;QANhB,kBAAa,GAAG,CAAC,GAAG,CAAC,CAAC;QACtB,gBAAW,GAAa,EAAE,CAAC;QAMzB,IAAM,GAAG,GAAG,MAAM,CAAC;QACnB,IAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;QAM1B,IAAI,WAAW,CAAC;QAChB,IAAM,KAAK,GAAG,WAAS,IAAI,kBAAa,KAAK,YAAS,CAAC;QACvD,EAAE,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;YACjB,WAAW,GAAG,iBAAe,KAAK,MAAG,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;YACxB,WAAW,GAAG,UAAQ,KAAK,MAAG,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,WAAW,GAAG,aAAW,KAAK,mBAAc,IAAI,QAAK,CAAC;QACxD,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,4QASI,GAAG,eAAU,GAAG,gFAEJ,IAAI,mIAKd,WAAW,8CAGhC,CAAC;IACJ,CAAC;IACH,iBAAC;AAAD,CAAC,AA/CD,IA+CC\"}","dts":{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/rollup/tfjs-core/kernels/webgl/lrn_gpu.d.ts","text":"import { GPGPUProgram } from './gpgpu_math';\r\nexport declare class LRNProgram implements GPGPUProgram {\r\n    variableNames: string[];\r\n    outputShape: number[];\r\n    userCode: string;\r\n    constructor(xShape: number[], radius: number, bias: number, alpha: number, beta: number);\r\n}\r\n"}}
